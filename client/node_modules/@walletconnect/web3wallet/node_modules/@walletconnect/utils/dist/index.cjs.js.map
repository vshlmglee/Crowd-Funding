{"version":3,"file":"index.cjs.js","sources":["../src/caip.ts","../src/cacao.ts","../src/crypto.ts","../src/misc.ts","../src/relay.ts","../src/uri.ts","../src/namespaces.ts","../src/errors.ts","../src/validators.ts"],"sourcesContent":["import { SessionTypes, ProposalTypes } from \"@walletconnect/types\";\n\ninterface ChainIdParams {\n  namespace: string;\n  reference: string;\n}\n\ninterface AccountIdParams extends ChainIdParams {\n  address: string;\n}\n\nconst CAIP_DELIMITER = \":\";\n\nexport function parseChainId(chain: string): ChainIdParams {\n  const [namespace, reference] = chain.split(CAIP_DELIMITER);\n  return { namespace, reference };\n}\n\nexport function formatChainId(params: ChainIdParams): string {\n  const { namespace, reference } = params;\n  return [namespace, reference].join(CAIP_DELIMITER);\n}\n\nexport function parseAccountId(account: string): AccountIdParams {\n  const [namespace, reference, address] = account.split(CAIP_DELIMITER);\n  return { namespace, reference, address };\n}\n\nexport function formatAccountId(params: AccountIdParams): string {\n  const { namespace, reference, address } = params;\n  return [namespace, reference, address].join(CAIP_DELIMITER);\n}\n\nexport function getUniqueValues(array: string[], parser: (str: string) => string): string[] {\n  const unique: string[] = [];\n  array.forEach((str) => {\n    const value = parser(str);\n    if (!unique.includes(value)) unique.push(value);\n  });\n  return unique;\n}\n\nexport function getAddressFromAccount(account: string) {\n  const { address } = parseAccountId(account);\n  return address;\n}\n\nexport function getChainFromAccount(account: string) {\n  const { namespace, reference } = parseAccountId(account);\n  const chain = formatChainId({ namespace, reference });\n  return chain;\n}\n\nexport function formatAccountWithChain(address: string, chain: string) {\n  const { namespace, reference } = parseChainId(chain);\n  const account = formatAccountId({ namespace, reference, address });\n  return account;\n}\n\nexport function getAddressesFromAccounts(accounts: string[]) {\n  return getUniqueValues(accounts, getAddressFromAccount);\n}\n\nexport function getChainsFromAccounts(accounts: string[]) {\n  return getUniqueValues(accounts, getChainFromAccount);\n}\n\nexport function getAccountsFromNamespaces(\n  namespaces: SessionTypes.Namespaces,\n  keys: string[] = [],\n): string[] {\n  const accounts: string[] = [];\n  Object.keys(namespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = namespaces[key];\n    accounts.push(...ns.accounts);\n  });\n  return accounts;\n}\n\nexport function getChainsFromNamespaces(\n  namespaces: SessionTypes.Namespaces,\n  keys: string[] = [],\n): string[] {\n  const chains: string[] = [];\n  Object.keys(namespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = namespaces[key];\n    chains.push(...getChainsFromAccounts(ns.accounts));\n  });\n  return chains;\n}\n\nexport function getChainsFromRequiredNamespaces(\n  requiredNamespaces: ProposalTypes.RequiredNamespaces,\n  keys: string[] = [],\n): string[] {\n  const chains: string[] = [];\n  Object.keys(requiredNamespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = requiredNamespaces[key];\n    chains.push(...getChainsFromNamespace(key, ns));\n  });\n  return chains;\n}\n\nexport function getChainsFromNamespace(\n  namespace: string,\n  namespaceProps: ProposalTypes.BaseRequiredNamespace,\n) {\n  // check if chainId is provided in the key as `eip155:1` or in the namespace as chains[]\n  return namespace.includes(\":\") ? [namespace] : namespaceProps.chains || [];\n}\n","export interface CacaoPayload {\n  iss: string;\n  domain: string;\n  aud: string;\n  version: string;\n  nonce: string;\n  iat: string;\n  nbf?: string;\n  exp?: string;\n  statement?: string;\n  requestId?: string;\n  resources?: string[];\n}\n\nexport interface CacaoHeader {\n  t: \"eip4361\";\n}\n\nexport interface CacaoSignature {\n  t: \"eip191\" | \"eip1271\";\n  s: string;\n  m?: string;\n}\n\nexport interface Cacao {\n  h: CacaoHeader;\n  p: CacaoPayload;\n  s: CacaoSignature;\n}\n\nexport const getDidAddressSegments = (iss: string) => {\n  return iss?.split(\":\");\n};\n\nexport const getDidChainId = (iss: string) => {\n  const segments = iss && getDidAddressSegments(iss);\n  if (segments) {\n    return segments[3];\n  }\n  return undefined;\n};\n\nexport const getNamespacedDidChainId = (iss: string) => {\n  const segments = iss && getDidAddressSegments(iss);\n  if (segments) {\n    return segments[2] + \":\" + segments[3];\n  }\n  return undefined;\n};\n\nexport const getDidAddress = (iss: string) => {\n  const segments = iss && getDidAddressSegments(iss);\n  if (segments) {\n    return segments.pop();\n  }\n  return undefined;\n};\n\nexport const formatMessage = (cacao: CacaoPayload, iss: string) => {\n  const header = `${cacao.domain} wants you to sign in with your Ethereum account:`;\n  const walletAddress = getDidAddress(iss);\n  const statement = cacao.statement;\n  const uri = `URI: ${cacao.aud}`;\n  const version = `Version: ${cacao.version}`;\n  const chainId = `Chain ID: ${getDidChainId(iss)}`;\n  const nonce = `Nonce: ${cacao.nonce}`;\n  const issuedAt = `Issued At: ${cacao.iat}`;\n  const resources =\n    cacao.resources && cacao.resources.length > 0\n      ? `Resources:\\n${cacao.resources.map((resource) => `- ${resource}`).join(\"\\n\")}`\n      : undefined;\n\n  const message = [\n    header,\n    walletAddress,\n    ``,\n    statement,\n    ``,\n    uri,\n    version,\n    chainId,\n    nonce,\n    issuedAt,\n    resources,\n  ]\n    .filter((val) => val !== undefined && val !== null) // remove unnecessary empty lines\n    .join(\"\\n\");\n\n  return message;\n};\n","import { ChaCha20Poly1305 } from \"@stablelib/chacha20poly1305\";\nimport { HKDF } from \"@stablelib/hkdf\";\nimport { randomBytes } from \"@stablelib/random\";\nimport { hash, SHA256 } from \"@stablelib/sha256\";\nimport * as x25519 from \"@stablelib/x25519\";\nimport { CryptoTypes } from \"@walletconnect/types\";\nimport { concat, fromString, toString } from \"uint8arrays\";\n\nexport const BASE10 = \"base10\";\nexport const BASE16 = \"base16\";\nexport const BASE64 = \"base64pad\";\nexport const UTF8 = \"utf8\";\n\nexport const TYPE_0 = 0;\nexport const TYPE_1 = 1;\n\nconst ZERO_INDEX = 0;\nconst TYPE_LENGTH = 1;\nconst IV_LENGTH = 12;\nconst KEY_LENGTH = 32;\n\nexport function generateKeyPair(): CryptoTypes.KeyPair {\n  const keyPair = x25519.generateKeyPair();\n  return {\n    privateKey: toString(keyPair.secretKey, BASE16),\n    publicKey: toString(keyPair.publicKey, BASE16),\n  };\n}\n\nexport function generateRandomBytes32(): string {\n  const random = randomBytes(KEY_LENGTH);\n  return toString(random, BASE16);\n}\n\nexport function deriveSymKey(privateKeyA: string, publicKeyB: string): string {\n  const sharedKey = x25519.sharedKey(\n    fromString(privateKeyA, BASE16),\n    fromString(publicKeyB, BASE16),\n  );\n  const hkdf = new HKDF(SHA256, sharedKey);\n  const symKey = hkdf.expand(KEY_LENGTH);\n  return toString(symKey, BASE16);\n}\n\nexport function hashKey(key: string): string {\n  const result = hash(fromString(key, BASE16));\n  return toString(result, BASE16);\n}\n\nexport function hashMessage(message: string): string {\n  const result = hash(fromString(message, UTF8));\n  return toString(result, BASE16);\n}\n\nexport function encodeTypeByte(type: number): Uint8Array {\n  return fromString(`${type}`, BASE10);\n}\n\nexport function decodeTypeByte(byte: Uint8Array): number {\n  return Number(toString(byte, BASE10));\n}\n\nexport function encrypt(params: CryptoTypes.EncryptParams): string {\n  const type = encodeTypeByte(typeof params.type !== \"undefined\" ? params.type : TYPE_0);\n  if (decodeTypeByte(type) === TYPE_1 && typeof params.senderPublicKey === \"undefined\") {\n    throw new Error(\"Missing sender public key for type 1 envelope\");\n  }\n  const senderPublicKey =\n    typeof params.senderPublicKey !== \"undefined\"\n      ? fromString(params.senderPublicKey, BASE16)\n      : undefined;\n\n  const iv =\n    typeof params.iv !== \"undefined\" ? fromString(params.iv, BASE16) : randomBytes(IV_LENGTH);\n  const box = new ChaCha20Poly1305(fromString(params.symKey, BASE16));\n  const sealed = box.seal(iv, fromString(params.message, UTF8));\n  return serialize({ type, sealed, iv, senderPublicKey });\n}\n\nexport function decrypt(params: CryptoTypes.DecryptParams): string {\n  const box = new ChaCha20Poly1305(fromString(params.symKey, BASE16));\n  const { sealed, iv } = deserialize(params.encoded);\n  const message = box.open(iv, sealed);\n  if (message === null) throw new Error(\"Failed to decrypt\");\n  return toString(message, UTF8);\n}\n\nexport function serialize(params: CryptoTypes.EncodingParams): string {\n  if (decodeTypeByte(params.type) === TYPE_1) {\n    if (typeof params.senderPublicKey === \"undefined\") {\n      throw new Error(\"Missing sender public key for type 1 envelope\");\n    }\n    return toString(\n      concat([params.type, params.senderPublicKey, params.iv, params.sealed]),\n      BASE64,\n    );\n  }\n  // default to type 0 envelope\n  return toString(concat([params.type, params.iv, params.sealed]), BASE64);\n}\n\nexport function deserialize(encoded: string): CryptoTypes.EncodingParams {\n  const bytes = fromString(encoded, BASE64);\n  const type = bytes.slice(ZERO_INDEX, TYPE_LENGTH);\n  const slice1 = TYPE_LENGTH;\n  if (decodeTypeByte(type) === TYPE_1) {\n    const slice2 = slice1 + KEY_LENGTH;\n    const slice3 = slice2 + IV_LENGTH;\n    const senderPublicKey = bytes.slice(slice1, slice2);\n    const iv = bytes.slice(slice2, slice3);\n    const sealed = bytes.slice(slice3);\n    return { type, sealed, iv, senderPublicKey };\n  }\n  // default to type 0 envelope\n  const slice2 = slice1 + IV_LENGTH;\n  const iv = bytes.slice(slice1, slice2);\n  const sealed = bytes.slice(slice2);\n  return { type, sealed, iv };\n}\n\nexport function validateDecoding(\n  encoded: string,\n  opts?: CryptoTypes.DecodeOptions,\n): CryptoTypes.EncodingValidation {\n  const deserialized = deserialize(encoded);\n  return validateEncoding({\n    type: decodeTypeByte(deserialized.type),\n    senderPublicKey:\n      typeof deserialized.senderPublicKey !== \"undefined\"\n        ? toString(deserialized.senderPublicKey, BASE16)\n        : undefined,\n    receiverPublicKey: opts?.receiverPublicKey,\n  });\n}\n\nexport function validateEncoding(opts?: CryptoTypes.EncodeOptions): CryptoTypes.EncodingValidation {\n  const type = opts?.type || TYPE_0;\n  if (type === TYPE_1) {\n    if (typeof opts?.senderPublicKey === \"undefined\") {\n      throw new Error(\"missing sender public key\");\n    }\n    if (typeof opts?.receiverPublicKey === \"undefined\") {\n      throw new Error(\"missing receiver public key\");\n    }\n  }\n  return {\n    type,\n    senderPublicKey: opts?.senderPublicKey,\n    receiverPublicKey: opts?.receiverPublicKey,\n  };\n}\n\nexport function isTypeOneEnvelope(\n  result: CryptoTypes.EncodingValidation,\n): result is CryptoTypes.TypeOneParams {\n  return (\n    result.type === TYPE_1 &&\n    typeof result.senderPublicKey === \"string\" &&\n    typeof result.receiverPublicKey === \"string\"\n  );\n}\n","import { detect } from \"detect-browser\";\nimport { FIVE_MINUTES, fromMiliseconds, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  SignClientTypes,\n  RelayerClientMetadata,\n  EngineTypes,\n  RelayerTypes,\n} from \"@walletconnect/types\";\nimport { getDocument, getLocation, getNavigator } from \"@walletconnect/window-getters\";\nimport { getWindowMetadata } from \"@walletconnect/window-metadata\";\nimport { ErrorResponse } from \"@walletconnect/jsonrpc-utils\";\nimport * as qs from \"query-string\";\n\n// -- constants -----------------------------------------//\nexport const REACT_NATIVE_PRODUCT = \"ReactNative\";\n\nexport const ENV_MAP = {\n  reactNative: \"react-native\",\n  node: \"node\",\n  browser: \"browser\",\n  unknown: \"unknown\",\n};\n\nexport const EMPTY_SPACE = \" \";\n\nexport const COLON = \":\";\n\nexport const SLASH = \"/\";\n\nexport const DEFAULT_DEPTH = 2;\n\nexport const ONE_THOUSAND = 1000;\n\nexport const SDK_TYPE = \"js\";\n\n// -- env -----------------------------------------------//\n\nexport function isNode(): boolean {\n  return (\n    typeof process !== \"undefined\" &&\n    typeof process.versions !== \"undefined\" &&\n    typeof process.versions.node !== \"undefined\"\n  );\n}\n\nexport function isReactNative(): boolean {\n  return !getDocument() && !!getNavigator() && navigator.product === REACT_NATIVE_PRODUCT;\n}\n\nexport function isBrowser(): boolean {\n  return !isNode() && !!getNavigator();\n}\n\nexport function getEnvironment(): string {\n  if (isReactNative()) return ENV_MAP.reactNative;\n  if (isNode()) return ENV_MAP.node;\n  if (isBrowser()) return ENV_MAP.browser;\n  return ENV_MAP.unknown;\n}\n\n// -- query -----------------------------------------------//\n\nexport function appendToQueryString(queryString: string, newQueryParams: any): string {\n  let queryParams = qs.parse(queryString);\n\n  queryParams = { ...queryParams, ...newQueryParams };\n\n  queryString = qs.stringify(queryParams);\n\n  return queryString;\n}\n\n// -- metadata ----------------------------------------------//\n\nexport function getAppMetadata(): SignClientTypes.Metadata {\n  return (\n    getWindowMetadata() || {\n      name: \"\",\n      description: \"\",\n      url: \"\",\n      icons: [\"\"],\n    }\n  );\n}\n\nexport function getRelayClientMetadata(protocol: string, version: number): RelayerClientMetadata {\n  const env = getEnvironment();\n\n  const metadata: RelayerClientMetadata = { protocol, version, env };\n  if (env === \"browser\") {\n    metadata.host = getLocation()?.host || \"unknown\";\n  }\n  return metadata;\n}\n\n// -- rpcUrl ----------------------------------------------//\n\nexport function getJavascriptOS() {\n  const info = detect();\n  if (info === null) return \"unknown\";\n  const os = info.os ? info.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n  if (info.type === \"browser\") {\n    return [os, info.name, info.version].join(\"-\");\n  }\n  return [os, info.version].join(\"-\");\n}\n\nexport function getJavascriptID() {\n  const env = getEnvironment();\n  return env === ENV_MAP.browser ? [env, getLocation()?.host || \"unknown\"].join(\":\") : env;\n}\n\nexport function formatUA(protocol: string, version: number, sdkVersion: string) {\n  const os = getJavascriptOS();\n  const id = getJavascriptID();\n  return [[protocol, version].join(\"-\"), [SDK_TYPE, sdkVersion].join(\"-\"), os, id].join(\"/\");\n}\nconsole;\n\nexport function formatRelayRpcUrl({\n  protocol,\n  version,\n  relayUrl,\n  sdkVersion,\n  auth,\n  projectId,\n  useOnCloseEvent,\n}: RelayerTypes.RpcUrlParams) {\n  const splitUrl = relayUrl.split(\"?\");\n  const ua = formatUA(protocol, version, sdkVersion);\n  const params = { auth, ua, projectId, useOnCloseEvent: useOnCloseEvent || undefined };\n  const queryString = appendToQueryString(splitUrl[1] || \"\", params);\n  return splitUrl[0] + \"?\" + queryString;\n}\n\nexport function getHttpUrl(url: string) {\n  // regex from https://stackoverflow.com/questions/3883871/regexp-to-grab-protocol-from-url\n  const matches = url.match(/^[^:]+(?=:\\/\\/)/gi) || [];\n  let protocol = matches[0];\n  const domain = typeof protocol !== \"undefined\" ? url.split(\"://\")[1] : url;\n  protocol = protocol === \"wss\" ? \"https\" : \"http\";\n  return [protocol, domain].join(\"://\");\n}\n\n// -- assert ------------------------------------------------- //\n\nexport function assertType(obj: any, key: string, type: string) {\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(`Missing or invalid \"${key}\" param`);\n  }\n}\n\n// -- context ------------------------------------------------- //\n\nexport function parseContextNames(context: string, depth = DEFAULT_DEPTH) {\n  return getLastItems(context.split(SLASH), depth);\n}\n\nexport function formatMessageContext(context: string): string {\n  return parseContextNames(context).join(EMPTY_SPACE);\n}\n\n// -- array ------------------------------------------------- //\n\nexport function hasOverlap(a: any[], b: any[]): boolean {\n  const matches = a.filter((x) => b.includes(x));\n  return matches.length === a.length;\n}\n\nexport function getLastItems(arr: any[], depth = DEFAULT_DEPTH): any[] {\n  return arr.slice(Math.max(arr.length - depth, 0));\n}\n\n// -- map ------------------------------------------------- //\n\nexport function mapToObj<T = any>(map: Map<string, T>): Record<string, T> {\n  return Object.fromEntries(map.entries());\n}\n\nexport function objToMap<T = any>(obj: Record<string, T>): Map<string, T> {\n  return new Map<string, T>(Object.entries<T>(obj));\n}\n\nexport function mapEntries<A = any, B = any>(\n  obj: Record<string, A>,\n  cb: (x: A) => B,\n): Record<string, B> {\n  const res = {};\n  Object.keys(obj).forEach((key) => {\n    res[key] = cb(obj[key]);\n  });\n  return res;\n}\n\n// -- enum ------------------------------------------------- //\n\n// source: https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275\nexport const enumify = <T extends { [index: string]: U }, U extends string>(x: T): T => x;\n\n// -- string ------------------------------------------------- //\n\nexport function capitalizeWord(word: string) {\n  return word.trim().replace(/^\\w/, (c) => c.toUpperCase());\n}\n\nexport function capitalize(str: string) {\n  return str\n    .split(EMPTY_SPACE)\n    .map((w) => capitalizeWord(w))\n    .join(EMPTY_SPACE);\n}\n\n// -- promises --------------------------------------------- //\nexport function createDelayedPromise<T>(\n  expiry: number = FIVE_MINUTES,\n  expireErrorMessage?: string,\n) {\n  const timeout = toMiliseconds(expiry || FIVE_MINUTES);\n  let cacheResolve: undefined | ((value: T | PromiseLike<T>) => void);\n  let cacheReject: undefined | ((value?: ErrorResponse) => void);\n  let cacheTimeout: undefined | NodeJS.Timeout;\n\n  const done = () =>\n    new Promise<T>((promiseResolve, promiseReject) => {\n      cacheTimeout = setTimeout(() => {\n        promiseReject(new Error(expireErrorMessage));\n      }, timeout);\n      cacheResolve = promiseResolve;\n      cacheReject = promiseReject;\n    });\n  const resolve = (value?: T) => {\n    if (cacheTimeout && cacheResolve) {\n      clearTimeout(cacheTimeout);\n      cacheResolve(value as T);\n    }\n  };\n  const reject = (value?: ErrorResponse) => {\n    if (cacheTimeout && cacheReject) {\n      clearTimeout(cacheTimeout);\n      cacheReject(value);\n    }\n  };\n\n  return {\n    resolve,\n    reject,\n    done,\n  };\n}\n\nexport function createExpiringPromise<T>(\n  promise: Promise<T>,\n  expiry: number,\n  expireErrorMessage?: string,\n) {\n  return new Promise(async (resolve, reject) => {\n    const timeout = setTimeout(() => reject(new Error(expireErrorMessage)), expiry);\n    try {\n      const result = await promise;\n      resolve(result);\n    } catch (error) {\n      reject(error);\n    }\n    clearTimeout(timeout);\n  });\n}\n\n// -- expirer --------------------------------------------- //\n\nexport function formatExpirerTarget(type: \"topic\" | \"id\", value: string | number): string {\n  if (typeof value === \"string\" && value.startsWith(`${type}:`)) return value;\n  if (type.toLowerCase() === \"topic\") {\n    if (typeof value !== \"string\")\n      throw new Error(`Value must be \"string\" for expirer target type: topic`);\n    return `topic:${value}`;\n  } else if (type.toLowerCase() === \"id\") {\n    if (typeof value !== \"number\")\n      throw new Error(`Value must be \"number\" for expirer target type: id`);\n    return `id:${value}`;\n  }\n  throw new Error(`Unknown expirer target type: ${type}`);\n}\n\nexport function formatTopicTarget(topic: string): string {\n  return formatExpirerTarget(\"topic\", topic);\n}\n\nexport function formatIdTarget(id: number): string {\n  return formatExpirerTarget(\"id\", id);\n}\n\nexport function parseExpirerTarget(target: string) {\n  const [type, value] = target.split(\":\");\n  const parsed: { id?: number; topic?: string } = { id: undefined, topic: undefined };\n  if (type === \"topic\" && typeof value === \"string\") {\n    parsed.topic = value;\n  } else if (type === \"id\" && Number.isInteger(Number(value))) {\n    parsed.id = Number(value);\n  } else {\n    throw new Error(`Invalid target, expected id:number or topic:string, got ${type}:${value}`);\n  }\n\n  return parsed;\n}\n\nexport function calcExpiry(ttl: number, now?: number): number {\n  return fromMiliseconds((now || Date.now()) + toMiliseconds(ttl));\n}\n\nexport function isExpired(expiry: number) {\n  return Date.now() >= toMiliseconds(expiry);\n}\n\n// -- events ---------------------------------------------- //\n\nexport function engineEvent(event: EngineTypes.Event, id?: number | string | undefined) {\n  return `${event}${id ? `:${id}` : \"\"}`;\n}\n\nexport function mergeArrays<T>(a: T[] = [], b: T[] = []): T[] {\n  return [...new Set([...a, ...b])];\n}\n\nexport async function handleDeeplinkRedirect({\n  id,\n  topic,\n  wcDeepLink,\n}: {\n  id: number;\n  topic: string;\n  wcDeepLink: string;\n}) {\n  try {\n    if (!wcDeepLink) return;\n\n    const json = typeof wcDeepLink === \"string\" ? JSON.parse(wcDeepLink) : wcDeepLink;\n    let deeplink = json?.href;\n\n    if (typeof deeplink !== \"string\") return;\n\n    if (deeplink.endsWith(\"/\")) deeplink = deeplink.slice(0, -1);\n\n    const link = `${deeplink}/wc?requestId=${id}&sessionTopic=${topic}`;\n\n    const env = getEnvironment();\n\n    if (env === ENV_MAP.browser) {\n      window.open(link, \"_self\", \"noreferrer noopener\");\n    } else if (env === ENV_MAP.reactNative) {\n      // global.Linking is set by react-native-compat\n      if (typeof (global as any)?.Linking !== \"undefined\") {\n        await (global as any).Linking.openURL(link);\n      }\n    }\n  } catch (err) {\n    // Silent error, just log in console\n    // eslint-disable-next-line no-console\n    console.error(err);\n  }\n}\n","import { RELAY_JSONRPC } from \"@walletconnect/relay-api\";\nimport { RelayerTypes } from \"@walletconnect/types\";\n\nexport const RELAYER_DEFAULT_PROTOCOL = \"irn\";\n\nexport function getRelayProtocolName(\n  opts?: RelayerTypes.RequestOptions,\n): RelayerTypes.ProtocolOptions {\n  return opts?.relay || { protocol: RELAYER_DEFAULT_PROTOCOL };\n}\n\nexport function getRelayProtocolApi(protocol: string) {\n  const jsonrpc = RELAY_JSONRPC[protocol];\n  if (typeof jsonrpc === \"undefined\") {\n    throw new Error(`Relay Protocol not supported: ${protocol}`);\n  }\n  return jsonrpc;\n}\n","import * as qs from \"query-string\";\nimport { EngineTypes, RelayerTypes } from \"@walletconnect/types\";\n\n// -- uri -------------------------------------------------- //\n\nexport function parseRelayParams(params: any, delimiter = \"-\"): RelayerTypes.ProtocolOptions {\n  const relay: any = {};\n  const prefix = \"relay\" + delimiter;\n  Object.keys(params).forEach((key) => {\n    if (key.startsWith(prefix)) {\n      const name = key.replace(prefix, \"\");\n      const value = params[key];\n      relay[name] = value;\n    }\n  });\n  return relay;\n}\n\nexport function parseUri(str: string): EngineTypes.UriParameters {\n  const pathStart: number = str.indexOf(\":\");\n  const pathEnd: number | undefined = str.indexOf(\"?\") !== -1 ? str.indexOf(\"?\") : undefined;\n  const protocol: string = str.substring(0, pathStart);\n  const path: string = str.substring(pathStart + 1, pathEnd);\n  const requiredValues = path.split(\"@\");\n  const queryString: string = typeof pathEnd !== \"undefined\" ? str.substring(pathEnd) : \"\";\n  const queryParams = qs.parse(queryString);\n  const result = {\n    protocol,\n    topic: parseTopic(requiredValues[0]),\n    version: parseInt(requiredValues[1], 10),\n    symKey: queryParams.symKey as string,\n    relay: parseRelayParams(queryParams),\n  };\n  return result;\n}\n\nexport function parseTopic(topic: string): string {\n  return topic.startsWith(\"//\") ? topic.substring(2) : topic;\n}\n\nexport function formatRelayParams(relay: RelayerTypes.ProtocolOptions, delimiter = \"-\") {\n  const prefix = \"relay\";\n  const params: any = {};\n  Object.keys(relay).forEach((key) => {\n    const k = prefix + delimiter + key;\n    if (relay[key]) {\n      params[k] = relay[key];\n    }\n  });\n  return params;\n}\n\nexport function formatUri(params: EngineTypes.UriParameters): string {\n  return (\n    `${params.protocol}:${params.topic}@${params.version}?` +\n    qs.stringify({\n      symKey: params.symKey,\n      ...formatRelayParams(params.relay),\n    })\n  );\n}\n","import { ProposalTypes, SessionTypes } from \"@walletconnect/types\";\nimport { mergeArrays } from \"./misc\";\nimport { isConformingNamespaces, isValidNamespaces, isValidObject } from \"./validators\";\n\nexport function getAccountsChains(accounts: SessionTypes.Namespace[\"accounts\"]) {\n  const chains: string[] = [];\n  accounts.forEach((account) => {\n    const [chain, chainId] = account.split(\":\");\n    chains.push(`${chain}:${chainId}`);\n  });\n\n  return chains;\n}\n\nexport function getNamespacesChains(namespaces: SessionTypes.Namespaces) {\n  const chains: string[] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    chains.push(...getAccountsChains(namespace.accounts));\n  });\n\n  return chains;\n}\n\nexport function getNamespacesMethodsForChainId(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n) {\n  const methods: SessionTypes.Namespace[\"methods\"] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    const chains = getAccountsChains(namespace.accounts);\n    if (chains.includes(chainId)) methods.push(...namespace.methods);\n  });\n\n  return methods;\n}\n\nexport function getNamespacesEventsForChainId(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n) {\n  const events: SessionTypes.Namespace[\"events\"] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    const chains = getAccountsChains(namespace.accounts);\n    if (chains.includes(chainId)) events.push(...namespace.events);\n  });\n\n  return events;\n}\n\nexport function getRequiredNamespacesFromNamespaces(\n  namespaces: SessionTypes.Namespaces,\n  caller: string,\n): ProposalTypes.RequiredNamespaces {\n  const validNamespacesError = isValidNamespaces(namespaces, caller);\n  if (validNamespacesError) throw new Error(validNamespacesError.message);\n\n  const required = {};\n  for (const [namespace, values] of Object.entries(namespaces)) {\n    required[namespace] = {\n      methods: values.methods,\n      events: values.events,\n      chains: values.accounts.map((account) => `${account.split(\":\")[0]}:${account.split(\":\")[1]}`),\n    };\n  }\n  return required;\n}\n\nexport type BuildApprovedNamespacesParams = {\n  proposal: ProposalTypes.Struct;\n  supportedNamespaces: Record<\n    string,\n    { chains: string[]; methods: string[]; events: string[]; accounts: string[] }\n  >;\n};\n\n/**\n * util designed for Wallets that builds namespaces structure by provided supported chains, methods, events & accounts.\n * It takes required & optional namespaces provided in the session proposal\n * along with the supported chains/methods/events/accounts by the wallet and returns a structured namespaces object\n * @param {BuildApprovedNamespacesParams} params\n * @returns {SessionTypes.Namespaces}\n */\nexport function buildApprovedNamespaces(\n  params: BuildApprovedNamespacesParams,\n): SessionTypes.Namespaces {\n  const {\n    proposal: { requiredNamespaces, optionalNamespaces = {} },\n    supportedNamespaces,\n  } = params;\n  const normalizedRequired = normalizeNamespaces(requiredNamespaces);\n  const normalizedOptional = normalizeNamespaces(optionalNamespaces);\n\n  // build approved namespaces\n  const namespaces = {};\n  Object.keys(supportedNamespaces).forEach((namespace) => {\n    const supportedChains = supportedNamespaces[namespace].chains;\n    const supportedMethods = supportedNamespaces[namespace].methods;\n    const supportedEvents = supportedNamespaces[namespace].events;\n    const supportedAccounts = supportedNamespaces[namespace].accounts;\n\n    namespaces[namespace] = {\n      chains: supportedChains,\n      methods: supportedMethods,\n      events: supportedEvents,\n      accounts: supportedAccounts,\n    };\n  });\n\n  // verify all required namespaces are supported\n  const err = isConformingNamespaces(requiredNamespaces, namespaces, \"approve()\");\n  if (err) throw new Error(err.message);\n\n  const approvedNamespaces = {};\n\n  // assign accounts for the required namespaces\n  Object.keys(normalizedRequired).forEach((requiredNamespace) => {\n    const chains = supportedNamespaces[requiredNamespace].chains.filter((chain) =>\n      normalizedRequired[requiredNamespace]?.chains?.includes(chain),\n    );\n    const methods = supportedNamespaces[requiredNamespace].methods.filter((method) =>\n      normalizedRequired[requiredNamespace]?.methods?.includes(method),\n    );\n    const events = supportedNamespaces[requiredNamespace].events.filter((event) =>\n      normalizedRequired[requiredNamespace]?.events?.includes(event),\n    );\n\n    const accounts = chains\n      .map((chain: string) =>\n        supportedNamespaces[requiredNamespace].accounts.filter((account: string) =>\n          account.includes(`${chain}:`),\n        ),\n      )\n      .flat();\n\n    approvedNamespaces[requiredNamespace] = {\n      chains,\n      methods,\n      events,\n      accounts,\n    };\n  });\n\n  // add optional namespaces\n  Object.keys(normalizedOptional).forEach((optionalNamespace) => {\n    if (!supportedNamespaces[optionalNamespace]) return;\n\n    const chainsToAdd = normalizedOptional[optionalNamespace]?.chains?.filter((chain) =>\n      supportedNamespaces[optionalNamespace].chains.includes(chain),\n    );\n    const methodsToAdd = supportedNamespaces[optionalNamespace].methods.filter((method) =>\n      normalizedOptional[optionalNamespace]?.methods?.includes(method),\n    );\n    const eventsToAdd = supportedNamespaces[optionalNamespace].events.filter((event) =>\n      normalizedOptional[optionalNamespace]?.events?.includes(event),\n    );\n\n    const accountsToAdd = chainsToAdd\n      ?.map((chain: string) =>\n        supportedNamespaces[optionalNamespace].accounts.filter((account: string) =>\n          account.includes(chain),\n        ),\n      )\n      .flat();\n\n    approvedNamespaces[optionalNamespace] = {\n      chains: mergeArrays(approvedNamespaces[optionalNamespace]?.chains, chainsToAdd),\n      methods: mergeArrays(approvedNamespaces[optionalNamespace]?.methods, methodsToAdd),\n      events: mergeArrays(approvedNamespaces[optionalNamespace]?.events, eventsToAdd),\n      accounts: mergeArrays(approvedNamespaces[optionalNamespace]?.accounts, accountsToAdd),\n    };\n  });\n\n  return approvedNamespaces;\n}\n\nexport function isCaipNamespace(namespace: string): boolean {\n  return namespace.includes(\":\");\n}\n\nexport function parseNamespaceKey(namespace: string) {\n  return isCaipNamespace(namespace) ? namespace.split(\":\")[0] : namespace;\n}\n\n/**\n * Converts\n * ```\n * {\n *  \"eip155:1\": {...},\n *  \"eip155:2\": {...},\n * }\n * ```\n * into\n * ```\n * {\n *  \"eip155\": {\n *      chains: [\"eip155:1\", \"eip155:2\"],\n *      ...\n *    }\n * }\n *```\n */\nexport function normalizeNamespaces(\n  namespaces: ProposalTypes.RequiredNamespaces,\n): ProposalTypes.RequiredNamespaces {\n  const normalizedNamespaces = {} as ProposalTypes.RequiredNamespaces;\n  if (!isValidObject(namespaces)) return normalizedNamespaces;\n  for (const [key, values] of Object.entries(namespaces)) {\n    const chains = isCaipNamespace(key) ? [key] : values.chains;\n    const methods = values.methods || [];\n    const events = values.events || [];\n    const normalizedKey = parseNamespaceKey(key);\n    normalizedNamespaces[normalizedKey] = {\n      ...normalizedNamespaces[normalizedKey],\n      chains: mergeArrays(chains, normalizedNamespaces[normalizedKey]?.chains),\n      methods: mergeArrays(methods, normalizedNamespaces[normalizedKey]?.methods),\n      events: mergeArrays(events, normalizedNamespaces[normalizedKey]?.events),\n    };\n  }\n  return normalizedNamespaces;\n}\n","/**\n * Types\n */\ntype SdkErrorKey = keyof typeof SDK_ERRORS;\ntype InternalErrorKey = keyof typeof INTERNAL_ERRORS;\n\n/**\n * Constants\n */\nconst SDK_ERRORS = {\n  /* ----- INVALID (1xxx) ----- */\n  INVALID_METHOD: {\n    message: \"Invalid method.\",\n    code: 1001,\n  },\n  INVALID_EVENT: {\n    message: \"Invalid event.\",\n    code: 1002,\n  },\n  INVALID_UPDATE_REQUEST: {\n    message: \"Invalid update request.\",\n    code: 1003,\n  },\n  INVALID_EXTEND_REQUEST: {\n    message: \"Invalid extend request.\",\n    code: 1004,\n  },\n  INVALID_SESSION_SETTLE_REQUEST: {\n    message: \"Invalid session settle request.\",\n    code: 1005,\n  },\n  /* ----- UNAUTHORIZED (3xxx) ----- */\n  UNAUTHORIZED_METHOD: {\n    message: \"Unauthorized method.\",\n    code: 3001,\n  },\n  UNAUTHORIZED_EVENT: {\n    message: \"Unauthorized event.\",\n    code: 3002,\n  },\n  UNAUTHORIZED_UPDATE_REQUEST: {\n    message: \"Unauthorized update request.\",\n    code: 3003,\n  },\n  UNAUTHORIZED_EXTEND_REQUEST: {\n    message: \"Unauthorized extend request.\",\n    code: 3004,\n  },\n  /* ----- REJECTED (5xxx) ----- */\n  USER_REJECTED: {\n    message: \"User rejected.\",\n    code: 5000,\n  },\n  USER_REJECTED_CHAINS: {\n    message: \"User rejected chains.\",\n    code: 5001,\n  },\n  USER_REJECTED_METHODS: {\n    message: \"User rejected methods.\",\n    code: 5002,\n  },\n  USER_REJECTED_EVENTS: {\n    message: \"User rejected events.\",\n    code: 5003,\n  },\n  UNSUPPORTED_CHAINS: {\n    message: \"Unsupported chains.\",\n    code: 5100,\n  },\n  UNSUPPORTED_METHODS: {\n    message: \"Unsupported methods.\",\n    code: 5101,\n  },\n  UNSUPPORTED_EVENTS: {\n    message: \"Unsupported events.\",\n    code: 5102,\n  },\n  UNSUPPORTED_ACCOUNTS: {\n    message: \"Unsupported accounts.\",\n    code: 5103,\n  },\n  UNSUPPORTED_NAMESPACE_KEY: {\n    message: \"Unsupported namespace key.\",\n    code: 5104,\n  },\n  /* ----- REASON (6xxx) ----- */\n  USER_DISCONNECTED: {\n    message: \"User disconnected.\",\n    code: 6000,\n  },\n  /* ----- FAILURE (7xxx) ----- */\n  SESSION_SETTLEMENT_FAILED: {\n    message: \"Session settlement failed.\",\n    code: 7000,\n  },\n  /* ----- PAIRING (10xxx) ----- */\n  WC_METHOD_UNSUPPORTED: {\n    message: \"Unsupported wc_ method.\",\n    code: 10001,\n  },\n};\n\nconst INTERNAL_ERRORS = {\n  NOT_INITIALIZED: {\n    message: \"Not initialized.\",\n    code: 1,\n  },\n  NO_MATCHING_KEY: {\n    message: \"No matching key.\",\n    code: 2,\n  },\n  RESTORE_WILL_OVERRIDE: {\n    message: \"Restore will override.\",\n    code: 3,\n  },\n  RESUBSCRIBED: {\n    message: \"Resubscribed.\",\n    code: 4,\n  },\n  MISSING_OR_INVALID: {\n    message: \"Missing or invalid.\",\n    code: 5,\n  },\n  EXPIRED: {\n    message: \"Expired.\",\n    code: 6,\n  },\n  UNKNOWN_TYPE: {\n    message: \"Unknown type.\",\n    code: 7,\n  },\n  MISMATCHED_TOPIC: {\n    message: \"Mismatched topic.\",\n    code: 8,\n  },\n  NON_CONFORMING_NAMESPACES: {\n    message: \"Non conforming namespaces.\",\n    code: 9,\n  },\n};\n\n/**\n * Utilities\n */\nexport function getInternalError(key: InternalErrorKey, context?: string | number) {\n  const { message, code } = INTERNAL_ERRORS[key];\n  return {\n    message: context ? `${message} ${context}` : message,\n    code,\n  };\n}\n\nexport function getSdkError(key: SdkErrorKey, context?: string | number) {\n  const { message, code } = SDK_ERRORS[key];\n  return {\n    message: context ? `${message} ${context}` : message,\n    code,\n  };\n}\n","import { SessionTypes, ProposalTypes, RelayerTypes, EngineTypes } from \"@walletconnect/types\";\nimport { ErrorResponse } from \"@walletconnect/jsonrpc-types\";\nimport {\n  getNamespacesChains,\n  getNamespacesMethodsForChainId,\n  getNamespacesEventsForChainId,\n  getAccountsChains,\n} from \"./namespaces\";\nimport { getSdkError, getInternalError } from \"./errors\";\nimport { hasOverlap } from \"./misc\";\nimport { getChainsFromNamespace } from \"./caip\";\n\nexport type ErrorObject = { message: string; code: number } | null;\n\n// -- types validation ----------------------------------------------------- //\n\nexport function isValidArray(arr: any, itemCondition?: (item: any) => boolean) {\n  if (Array.isArray(arr)) {\n    if (typeof itemCondition !== \"undefined\" && arr.length) {\n      return arr.every(itemCondition);\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function isValidObject(obj: any) {\n  return Object.getPrototypeOf(obj) === Object.prototype && Object.keys(obj).length;\n}\n\nexport function isUndefined(input: any): input is undefined {\n  return typeof input === \"undefined\";\n}\n\nexport function isValidString(input: any, optional: boolean): input is string {\n  if (optional && isUndefined(input)) return true;\n\n  return typeof input === \"string\" && Boolean(input.trim().length);\n}\n\nexport function isValidNumber(input: any, optional: boolean) {\n  if (optional && isUndefined(input)) return true;\n\n  return typeof input === \"number\" && !isNaN(input);\n}\n\n// -- protocol validation -------------------------------------------------- //\n\nexport function isSessionCompatible(session: SessionTypes.Struct, params: EngineTypes.FindParams) {\n  const { requiredNamespaces } = params;\n  const sessionKeys = Object.keys(session.namespaces);\n  const paramsKeys = Object.keys(requiredNamespaces);\n  let compatible = true;\n\n  if (!hasOverlap(paramsKeys, sessionKeys)) return false;\n\n  sessionKeys.forEach((key) => {\n    const { accounts, methods, events } = session.namespaces[key];\n    const chains = getAccountsChains(accounts);\n    const requiredNamespace = requiredNamespaces[key];\n    if (\n      !hasOverlap(getChainsFromNamespace(key, requiredNamespace), chains) ||\n      !hasOverlap(requiredNamespace.methods, methods) ||\n      !hasOverlap(requiredNamespace.events, events)\n    ) {\n      compatible = false;\n    }\n  });\n\n  return compatible;\n}\n\nexport function isValidChainId(value: any) {\n  if (isValidString(value, false) && value.includes(\":\")) {\n    const split = value.split(\":\");\n    return split.length === 2;\n  }\n  return false;\n}\n\nexport function isValidAccountId(value: any) {\n  if (isValidString(value, false) && value.includes(\":\")) {\n    const split = value.split(\":\");\n    if (split.length === 3) {\n      const chainId = split[0] + \":\" + split[1];\n      return !!split[2] && isValidChainId(chainId);\n    }\n  }\n  return false;\n}\n\nexport function isValidUrl(value: any) {\n  if (isValidString(value, false)) {\n    try {\n      const url = new URL(value);\n      return typeof url !== \"undefined\";\n    } catch (e) {\n      return false;\n    }\n  }\n  return false;\n}\n\nexport function isProposalStruct(input: any): input is ProposalTypes.Struct {\n  return input?.proposer?.publicKey;\n}\n\nexport function isSessionStruct(input: any): input is SessionTypes.Struct {\n  return input?.topic;\n}\n\nexport function isValidController(input: any, method: string) {\n  let error: ErrorObject = null;\n  if (!isValidString(input?.publicKey, false)) {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method} controller public key should be a string`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceMethodsOrEvents(input: any): input is string {\n  let valid = true;\n  if (isValidArray(input)) {\n    if (input.length) {\n      valid = input.every((item: any) => isValidString(item, false));\n    }\n  } else {\n    valid = false;\n  }\n\n  return valid;\n}\n\nexport function isValidChains(key: string, chains: any, context: string) {\n  let error: ErrorObject = null;\n  if (isValidArray(chains)) {\n    chains.forEach((chain: any) => {\n      if (error) return;\n      if (!isValidChainId(chain) || !chain.includes(key)) {\n        error = getSdkError(\n          \"UNSUPPORTED_CHAINS\",\n          `${context}, chain ${chain} should be a string and conform to \"namespace:chainId\" format`,\n        );\n      }\n    });\n  } else {\n    error = getSdkError(\n      \"UNSUPPORTED_CHAINS\",\n      `${context}, chains ${chains} should be an array of strings conforming to \"namespace:chainId\" format`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceChains(namespaces: any, method: string) {\n  let error: ErrorObject = null;\n  Object.entries(namespaces).forEach(([key, namespace]: [string, any]) => {\n    if (error) return;\n    const validChainsError = isValidChains(\n      key,\n      getChainsFromNamespace(key, namespace),\n      `${method} requiredNamespace`,\n    );\n    if (validChainsError) {\n      error = validChainsError;\n    }\n  });\n\n  return error;\n}\n\nexport function isValidAccounts(accounts: any, context: string) {\n  let error: ErrorObject = null;\n  if (isValidArray(accounts)) {\n    accounts.forEach((account: any) => {\n      if (error) return;\n      if (!isValidAccountId(account)) {\n        error = getSdkError(\n          \"UNSUPPORTED_ACCOUNTS\",\n          `${context}, account ${account} should be a string and conform to \"namespace:chainId:address\" format`,\n        );\n      }\n    });\n  } else {\n    error = getSdkError(\n      \"UNSUPPORTED_ACCOUNTS\",\n      `${context}, accounts should be an array of strings conforming to \"namespace:chainId:address\" format`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceAccounts(input: any, method: string) {\n  let error: ErrorObject = null;\n  Object.values(input).forEach((namespace: any) => {\n    if (error) return;\n    const validAccountsError = isValidAccounts(namespace?.accounts, `${method} namespace`);\n    if (validAccountsError) {\n      error = validAccountsError;\n    }\n  });\n\n  return error;\n}\n\nexport function isValidActions(namespace: any, context: string) {\n  let error: ErrorObject = null;\n  if (!isValidNamespaceMethodsOrEvents(namespace?.methods)) {\n    error = getSdkError(\n      \"UNSUPPORTED_METHODS\",\n      `${context}, methods should be an array of strings or empty array for no methods`,\n    );\n  } else if (!isValidNamespaceMethodsOrEvents(namespace?.events)) {\n    error = getSdkError(\n      \"UNSUPPORTED_EVENTS\",\n      `${context}, events should be an array of strings or empty array for no events`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceActions(input: any, method: string) {\n  let error: ErrorObject = null;\n  Object.values(input).forEach((namespace: any) => {\n    if (error) return;\n    const validActionsError = isValidActions(namespace, `${method}, namespace`);\n    if (validActionsError) {\n      error = validActionsError;\n    }\n  });\n\n  return error;\n}\n\nexport function isValidRequiredNamespaces(input: any, method: string, type: string) {\n  let error: ErrorObject = null;\n  if (input && isValidObject(input)) {\n    const validActionsError = isValidNamespaceActions(input, method);\n    if (validActionsError) {\n      error = validActionsError;\n    }\n    const validChainsError = isValidNamespaceChains(input, method);\n    if (validChainsError) {\n      error = validChainsError;\n    }\n  } else {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method}, ${type} should be an object with data`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaces(input: any, method: string) {\n  let error: ErrorObject = null;\n  if (input && isValidObject(input)) {\n    const validActionsError = isValidNamespaceActions(input, method);\n    if (validActionsError) {\n      error = validActionsError;\n    }\n    const validAccountsError = isValidNamespaceAccounts(input, method);\n    if (validAccountsError) {\n      error = validAccountsError;\n    }\n  } else {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method}, namespaces should be an object with data`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidRelay(input: any): input is RelayerTypes.ProtocolOptions {\n  return isValidString(input.protocol, true);\n}\n\nexport function isValidRelays(\n  input: any,\n  optional: boolean,\n): input is RelayerTypes.ProtocolOptions[] {\n  let valid = false;\n\n  if (optional && !input) valid = true;\n  else if (input && isValidArray(input) && input.length) {\n    input.forEach((relay: RelayerTypes.ProtocolOptions) => {\n      valid = isValidRelay(relay);\n    });\n  }\n\n  return valid;\n}\n\nexport function isValidId(input: any) {\n  return typeof input === \"number\";\n}\n\nexport function isValidParams(input: any) {\n  return typeof input !== \"undefined\" && typeof input !== null;\n}\n\nexport function isValidErrorReason(input: any): input is ErrorResponse {\n  if (!input) return false;\n  if (typeof input !== \"object\") return false;\n  if (!input.code || !isValidNumber(input.code, false)) return false;\n  if (!input.message || !isValidString(input.message, false)) return false;\n\n  return true;\n}\n\nexport function isValidRequest(request: any) {\n  if (isUndefined(request)) return false;\n  if (!isValidString(request.method, false)) return false;\n  return true;\n}\n\nexport function isValidResponse(response: any) {\n  if (isUndefined(response)) return false;\n  if (isUndefined(response.result) && isUndefined(response.error)) return false;\n  if (!isValidNumber(response.id, false)) return false;\n  if (!isValidString(response.jsonrpc, false)) return false;\n  return true;\n}\n\nexport function isValidEvent(event: any) {\n  if (isUndefined(event)) return false;\n  if (!isValidString(event.name, false)) return false;\n  return true;\n}\n\nexport function isValidNamespacesChainId(namespaces: SessionTypes.Namespaces, chainId: string) {\n  if (!isValidChainId(chainId)) return false;\n  const chains = getNamespacesChains(namespaces);\n  if (!chains.includes(chainId)) return false;\n\n  return true;\n}\n\nexport function isValidNamespacesRequest(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n  method: string,\n) {\n  if (!isValidString(method, false)) return false;\n  const methods = getNamespacesMethodsForChainId(namespaces, chainId);\n  return methods.includes(method);\n}\n\nexport function isValidNamespacesEvent(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n  eventName: string,\n) {\n  if (!isValidString(eventName, false)) return false;\n  const events = getNamespacesEventsForChainId(namespaces, chainId);\n  return events.includes(eventName);\n}\n\nexport function isConformingNamespaces(\n  requiredNamespaces: ProposalTypes.RequiredNamespaces,\n  namespaces: SessionTypes.Namespaces,\n  context: string,\n) {\n  let error: ErrorObject = null;\n\n  const parsedRequired = parseNamespaces(requiredNamespaces);\n  const parsedApproved = parseApprovedNamespaces(namespaces);\n  const requiredChains = Object.keys(parsedRequired);\n  const approvedChains = Object.keys(parsedApproved);\n\n  const uniqueRequired = filterDuplicateNamespaces(Object.keys(requiredNamespaces));\n  const uniqueApproved = filterDuplicateNamespaces(Object.keys(namespaces));\n  const missingRequiredNamespaces = uniqueRequired.filter(\n    (namespace) => !uniqueApproved.includes(namespace),\n  );\n\n  if (missingRequiredNamespaces.length) {\n    error = getInternalError(\n      \"NON_CONFORMING_NAMESPACES\",\n      `${context} namespaces keys don't satisfy requiredNamespaces.\n      Required: ${missingRequiredNamespaces.toString()}\n      Received: ${Object.keys(namespaces).toString()}`,\n    );\n  }\n\n  if (!hasOverlap(requiredChains, approvedChains)) {\n    error = getInternalError(\n      \"NON_CONFORMING_NAMESPACES\",\n      `${context} namespaces chains don't satisfy required namespaces.\n      Required: ${requiredChains.toString()}\n      Approved: ${approvedChains.toString()}`,\n    );\n  }\n\n  // validate inline defined chains with approved accounts\n  Object.keys(namespaces).forEach((chain) => {\n    if (!chain.includes(\":\")) return;\n    if (error) return;\n    const chains = getAccountsChains(namespaces[chain].accounts);\n    if (!chains.includes(chain)) {\n      error = getInternalError(\n        \"NON_CONFORMING_NAMESPACES\",\n        `${context} namespaces accounts don't satisfy namespace accounts for ${chain}\n        Required: ${chain}\n        Approved: ${chains.toString()}`,\n      );\n    }\n  });\n\n  requiredChains.forEach((chain) => {\n    if (error) return;\n\n    if (!hasOverlap(parsedRequired[chain].methods, parsedApproved[chain].methods)) {\n      error = getInternalError(\n        \"NON_CONFORMING_NAMESPACES\",\n        `${context} namespaces methods don't satisfy namespace methods for ${chain}`,\n      );\n    } else if (!hasOverlap(parsedRequired[chain].events, parsedApproved[chain].events)) {\n      error = getInternalError(\n        \"NON_CONFORMING_NAMESPACES\",\n        `${context} namespaces events don't satisfy namespace events for ${chain}`,\n      );\n    }\n  });\n\n  return error;\n}\n\nfunction parseNamespaces(namespaces: ProposalTypes.RequiredNamespaces) {\n  const parsed = {};\n  Object.keys(namespaces).forEach((key) => {\n    // e.g. `eip155:1`\n    const isInlineChainDefinition = key.includes(\":\");\n\n    if (isInlineChainDefinition) {\n      parsed[key] = namespaces[key];\n    } else {\n      namespaces[key].chains?.forEach((chain) => {\n        parsed[chain] = {\n          methods: namespaces[key].methods,\n          events: namespaces[key].events,\n        };\n      });\n    }\n  });\n  return parsed;\n}\n\nfunction filterDuplicateNamespaces(namespaces: string[]) {\n  return [\n    ...new Set(\n      namespaces.map((namespace) =>\n        namespace.includes(\":\") ? namespace.split(\":\")[0] : namespace,\n      ),\n    ),\n  ];\n}\n\nfunction parseApprovedNamespaces(namespaces: SessionTypes.Namespaces) {\n  const parsed = {};\n  Object.keys(namespaces).forEach((key) => {\n    const isInlineChainDefinition = key.includes(\":\");\n    if (isInlineChainDefinition) {\n      parsed[key] = namespaces[key];\n    } else {\n      const chains = getAccountsChains(namespaces[key].accounts);\n      chains?.forEach((chain) => {\n        parsed[chain] = {\n          accounts: namespaces[key].accounts.filter((account: string) =>\n            account.includes(`${chain}:`),\n          ),\n          methods: namespaces[key].methods,\n          events: namespaces[key].events,\n        };\n      });\n    }\n  });\n  return parsed;\n}\n\nexport function isValidRequestExpiry(expiry: number, boundaries: { min: number; max: number }) {\n  return isValidNumber(expiry, false) && expiry <= boundaries.max && expiry >= boundaries.min;\n}\n"],"names":["CAIP_DELIMITER","chain","namespace","reference","params","account","address","array","parser","unique","str","value","accounts","namespaces","keys","key","ns","chains","requiredNamespaces","namespaceProps","iss","segments","cacao","header","walletAddress","statement","uri","version","chainId","nonce","issuedAt","resources","resource","val","ZERO_INDEX","TYPE_LENGTH","IV_LENGTH","KEY_LENGTH","keyPair","x25519","toString","random","randomBytes","privateKeyA","publicKeyB","sharedKey","fromString","symKey","HKDF","SHA256","result","hash","message","type","byte","senderPublicKey","iv","sealed","ChaCha20Poly1305","box","concat","encoded","bytes","slice1","slice2","slice3","opts","deserialized","getDocument","getNavigator","queryString","newQueryParams","queryParams","qs","__spreadValues","getWindowMetadata","protocol","_a","env","metadata","getLocation","info","detect","os","sdkVersion","id","relayUrl","auth","projectId","useOnCloseEvent","splitUrl","ua","url","domain","obj","context","depth","a","b","x","arr","map","cb","res","word","c","w","expiry","FIVE_MINUTES","expireErrorMessage","timeout","toMiliseconds","cacheResolve","cacheReject","cacheTimeout","promiseResolve","promiseReject","promise","resolve","reject","error","topic","target","parsed","ttl","now","fromMiliseconds","event","wcDeepLink","json","deeplink","link","err","jsonrpc","RELAY_JSONRPC","delimiter","relay","prefix","name","pathStart","pathEnd","requiredValues","k","R","S","methods","events","caller","validNamespacesError","isValidNamespaces","required","values","optionalNamespaces","supportedNamespaces","normalizedRequired","normalizedOptional","supportedChains","supportedMethods","supportedEvents","supportedAccounts","isConformingNamespaces","approvedNamespaces","requiredNamespace","_b","method","optionalNamespace","_c","_d","_e","_f","chainsToAdd","methodsToAdd","eventsToAdd","accountsToAdd","mergeArrays","normalizedNamespaces","isValidObject","normalizedKey","__spreadProps","SDK_ERRORS","INTERNAL_ERRORS","code","itemCondition","input","optional","session","sessionKeys","paramsKeys","compatible","hasOverlap","getAccountsChains","getChainsFromNamespace","split","e","getInternalError","valid","item","getSdkError","validChainsError","validAccountsError","validActionsError","request","response","getNamespacesChains","getNamespacesMethodsForChainId","eventName","getNamespacesEventsForChainId","parsedRequired","parseNamespaces","parsedApproved","parseApprovedNamespaces","requiredChains","approvedChains","uniqueRequired","filterDuplicateNamespaces","uniqueApproved","missingRequiredNamespaces","boundaries"],"mappings":"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"}