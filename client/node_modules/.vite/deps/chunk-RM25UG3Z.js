import {
  require_browser,
  require_browser2,
  require_elliptic
} from "./chunk-BL5AGTOU.js";
import {
  require_js,
  require_satisfies
} from "./chunk-5WOQBMPG.js";
import {
  require_call_bind,
  require_get_intrinsic,
  require_util
} from "./chunk-CY63Z6PF.js";
import {
  Connector
} from "./chunk-56PDSJSZ.js";
import {
  _defineProperty
} from "./chunk-UZDOK4BQ.js";
import {
  ethers_exports,
  init_lib as init_lib4,
  init_lib5 as init_lib6,
  init_lib7,
  lib_exports as lib_exports4,
  lib_exports5 as lib_exports6,
  lib_exports7
} from "./chunk-T4GQYX7O.js";
import {
  init_lib13 as init_lib5,
  init_lib2 as init_lib,
  init_lib3 as init_lib2,
  init_lib7 as init_lib3,
  lib_exports12 as lib_exports5,
  lib_exports2 as lib_exports,
  lib_exports3 as lib_exports2,
  lib_exports7 as lib_exports3,
  require_sha3
} from "./chunk-RGAYGF33.js";
import {
  require_bn
} from "./chunk-2O4376VB.js";
import {
  import_buffer,
  import_process,
  init_shim,
  require_buffer
} from "./chunk-ZGMFR26H.js";
import {
  __commonJS,
  __toCommonJS,
  __toESM
} from "./chunk-IKJM6GHQ.js";

// node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/axios/lib/utils.js"(exports, module) {
    "use strict";
    init_shim();
    var bind = require_bind();
    var toString = Object.prototype.toString;
    var kindOf = function(cache) {
      return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
      };
    }(/* @__PURE__ */ Object.create(null));
    function kindOfTest(type) {
      type = type.toLowerCase();
      return function isKindOf(thing) {
        return kindOf(thing) === type;
      };
    }
    function isArray(val) {
      return Array.isArray(val);
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (kindOf(val) !== "object") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isFormData(thing) {
      var pattern = "[object FormData]";
      return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
    }
    var isURLSearchParams = kindOfTest("URLSearchParams");
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    function inherits(constructor, superConstructor, props, descriptors) {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      props && Object.assign(constructor.prototype, props);
    }
    function toFlatObject(sourceObj, destObj, filter) {
      var props;
      var i;
      var prop;
      var merged = {};
      destObj = destObj || {};
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if (!merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    }
    function endsWith(str, searchString, position) {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      var lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    }
    function toArray(thing) {
      if (!thing)
        return null;
      var i = thing.length;
      if (isUndefined(i))
        return null;
      var arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    }
    var isTypedArray = function(TypedArray) {
      return function(thing) {
        return TypedArray && thing instanceof TypedArray;
      };
    }(typeof Uint8Array !== "undefined" && Object.getPrototypeOf(Uint8Array));
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      isTypedArray,
      isFileList
    };
  }
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/axios/lib/core/AxiosError.js
var require_AxiosError = __commonJS({
  "node_modules/axios/lib/core/AxiosError.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils();
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }
    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    var prototype = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED"
    ].forEach(function(code) {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, "isAxiosError", { value: true });
    AxiosError.from = function(error, code, config, request, response, customProps) {
      var axiosError = Object.create(prototype);
      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    module.exports = AxiosError;
  }
});

// node_modules/axios/lib/defaults/transitional.js
var require_transitional = __commonJS({
  "node_modules/axios/lib/defaults/transitional.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// node_modules/axios/lib/helpers/toFormData.js
var require_toFormData = __commonJS({
  "node_modules/axios/lib/helpers/toFormData.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils();
    function toFormData(obj, formData) {
      formData = formData || new FormData();
      var stack = [];
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils.isDate(value)) {
          return value.toISOString();
        }
        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return typeof Blob === "function" ? new Blob([value]) : import_buffer.Buffer.from(value);
        }
        return value;
      }
      function build(data, parentKey) {
        if (utils.isPlainObject(data) || utils.isArray(data)) {
          if (stack.indexOf(data) !== -1) {
            throw Error("Circular reference detected in " + parentKey);
          }
          stack.push(data);
          utils.forEach(data, function each(value, key) {
            if (utils.isUndefined(value))
              return;
            var fullKey = parentKey ? parentKey + "." + key : key;
            var arr;
            if (value && !parentKey && typeof value === "object") {
              if (utils.endsWith(key, "{}")) {
                value = JSON.stringify(value);
              } else if (utils.endsWith(key, "[]") && (arr = utils.toArray(value))) {
                arr.forEach(function(el) {
                  !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                });
                return;
              }
            }
            build(value, fullKey);
          });
          stack.pop();
        } else {
          formData.append(parentKey, convertValue(data));
        }
      }
      build(obj);
      return formData;
    }
    module.exports = toFormData;
  }
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    init_shim();
    var AxiosError = require_AxiosError();
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name) {
          var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    "use strict";
    init_shim();
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// node_modules/axios/lib/cancel/CanceledError.js
var require_CanceledError = __commonJS({
  "node_modules/axios/lib/cancel/CanceledError.js"(exports, module) {
    "use strict";
    init_shim();
    var AxiosError = require_AxiosError();
    var utils = require_utils();
    function CanceledError(message) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED);
      this.name = "CanceledError";
    }
    utils.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    module.exports = CanceledError;
  }
});

// node_modules/axios/lib/helpers/parseProtocol.js
var require_parseProtocol = __commonJS({
  "node_modules/axios/lib/helpers/parseProtocol.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = function parseProtocol(url) {
      var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    };
  }
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var transitionalDefaults = require_transitional();
    var AxiosError = require_AxiosError();
    var CanceledError = require_CanceledError();
    var parseProtocol = require_parseProtocol();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new CanceledError() : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        var protocol = parseProtocol(fullPath);
        if (protocol && ["http", "https", "file"].indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/axios/lib/helpers/null.js
var require_null = __commonJS({
  "node_modules/axios/lib/helpers/null.js"(exports, module) {
    init_shim();
    module.exports = null;
  }
});

// node_modules/axios/lib/defaults/index.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults/index.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var AxiosError = require_AxiosError();
    var transitionalDefaults = require_transitional();
    var toFormData = require_toFormData();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof import_process.default !== "undefined" && Object.prototype.toString.call(import_process.default) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        var isObjectPayload = utils.isObject(data);
        var contentType = headers && headers["Content-Type"];
        var isFileList;
        if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === "multipart/form-data") {
          var _FormData = this.env && this.env.FormData;
          return toFormData(isFileList ? { "files[]": data } : data, _FormData && new _FormData());
        } else if (isObjectPayload || contentType === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: require_null()
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils();
    var defaults = require_defaults();
    module.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var CanceledError = require_CanceledError();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError();
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "beforeRedirect": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/axios/lib/env/data.js"(exports, module) {
    init_shim();
    module.exports = {
      "version": "0.27.2"
    };
  }
});

// node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/axios/lib/helpers/validator.js"(exports, module) {
    "use strict";
    init_shim();
    var VERSION = require_data().version;
    var AxiosError = require_AxiosError();
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    module.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var buildFullPath = require_buildFullPath();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      var fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    module.exports = Axios;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    init_shim();
    var CanceledError = require_CanceledError();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new CanceledError(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils();
    module.exports = function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    };
  }
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.CanceledError = require_CanceledError();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.VERSION = require_data().version;
    axios.toFormData = require_toFormData();
    axios.AxiosError = require_AxiosError();
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module.exports = axios;
    module.exports.default = axios;
  }
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports, module) {
    init_shim();
    module.exports = require_axios();
  }
});

// node_modules/@safe-global/safe-ethers-adapters/dist/src/service.js
var require_service = __commonJS({
  "node_modules/@safe-global/safe-ethers-adapters/dist/src/service.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SafeService = void 0;
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var axios_1 = __importDefault(require_axios2());
    var SafeService2 = class {
      constructor(serviceUrl, network) {
        this.serviceUrl = serviceUrl;
        this.network = network !== null && network !== void 0 ? network : axios_1.default;
      }
      async estimateSafeTx(safe, safeTx) {
        const url = `${this.serviceUrl}/api/v1/safes/${safe}/multisig-transactions/estimations/`;
        const resp = await this.network.post(url, safeTx);
        return bignumber_1.BigNumber.from(resp.data.safeTxGas);
      }
      async getSafeTxDetails(safeTxHash) {
        const url = `${this.serviceUrl}/api/v1/multisig-transactions/${safeTxHash}`;
        const resp = await this.network.get(url);
        return resp.data;
      }
      async proposeTx(safeAddress, safeTxHash, safeTx, signature) {
        const url = `${this.serviceUrl}/api/v1/safes/${safeAddress}/multisig-transactions/`;
        const data = {
          ...safeTx.data,
          contractTransactionHash: safeTxHash,
          sender: signature.signer,
          signature: signature.data
        };
        const resp = await this.network.post(url, data);
        return resp.data;
      }
    };
    exports.SafeService = SafeService2;
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CompatibilityFallbackHandlerContract.js
var require_CompatibilityFallbackHandlerContract = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CompatibilityFallbackHandlerContract.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CreateCallContract.js
var require_CreateCallContract = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CreateCallContract.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/GnosisSafeContract.js
var require_GnosisSafeContract = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/GnosisSafeContract.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/GnosisSafeProxyFactoryContract.js
var require_GnosisSafeProxyFactoryContract = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/GnosisSafeProxyFactoryContract.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendCallOnlyContract.js
var require_MultiSendCallOnlyContract = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendCallOnlyContract.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendContract.js
var require_MultiSendContract = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendContract.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SignMessageLibContract.js
var require_SignMessageLibContract = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SignMessageLibContract.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/ethereumLibs/EthAdapter.js
var require_EthAdapter = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/ethereumLibs/EthAdapter.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/types.js
var require_types = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/types.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OperationType = void 0;
    var OperationType;
    (function(OperationType2) {
      OperationType2[OperationType2["Call"] = 0] = "Call";
      OperationType2[OperationType2["DelegateCall"] = 1] = "DelegateCall";
    })(OperationType = exports.OperationType || (exports.OperationType = {}));
  }
});

// node_modules/@safe-global/safe-core-sdk-types/dist/src/index.js
var require_src = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-types/dist/src/index.js"(exports) {
    "use strict";
    init_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_CompatibilityFallbackHandlerContract(), exports);
    __exportStar(require_CreateCallContract(), exports);
    __exportStar(require_GnosisSafeContract(), exports);
    __exportStar(require_GnosisSafeProxyFactoryContract(), exports);
    __exportStar(require_MultiSendCallOnlyContract(), exports);
    __exportStar(require_MultiSendContract(), exports);
    __exportStar(require_SignMessageLibContract(), exports);
    __exportStar(require_EthAdapter(), exports);
    __exportStar(require_types(), exports);
  }
});

// node_modules/@safe-global/safe-deployments/dist/types.js
var require_types2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/types.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/safe_l2.json
var require_safe_l2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/safe_l2.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x1eb4681c549d995AbdC4aB189cAbb9f00B508cAb",
      released: false,
      contractName: "SafeL2",
      version: "1.4.0",
      networkAddresses: {
        "5": "0x1eb4681c549d995AbdC4aB189cAbb9f00B508cAb",
        "56": "0x1eb4681c549d995AbdC4aB189cAbb9f00B508cAb",
        "100": "0x1eb4681c549d995AbdC4aB189cAbb9f00B508cAb"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "ChangedFallbackHandler",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "ChangedGuard",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "SafeModuleTransaction",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "additionalInfo",
              type: "bytes"
            }
          ],
          name: "SafeMultiSigTransaction",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "sender",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "SafeReceived",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "initiator",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address[]",
              name: "owners",
              type: "address[]"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "initializer",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          name: "SafeSetup",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          stateMutability: "nonpayable",
          type: "fallback"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "requiredSignatures",
              type: "uint256"
            }
          ],
          name: "checkNSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "checkSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getChainId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "offset",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "length",
              type: "uint256"
            }
          ],
          name: "getStorageAt",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "setGuard",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulateAndRevert",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          stateMutability: "payable",
          type: "receive"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/safe.json
var require_safe = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/safe.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xc962E67D9490E154D81181879ddf4CD3b65D2132",
      released: false,
      contractName: "Safe",
      version: "1.4.0",
      networkAddresses: {
        "5": "0xc962E67D9490E154D81181879ddf4CD3b65D2132",
        "56": "0xc962E67D9490E154D81181879ddf4CD3b65D2132",
        "100": "0xc962E67D9490E154D81181879ddf4CD3b65D2132"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "ChangedFallbackHandler",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "ChangedGuard",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "sender",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "SafeReceived",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "initiator",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address[]",
              name: "owners",
              type: "address[]"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "initializer",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          name: "SafeSetup",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          stateMutability: "nonpayable",
          type: "fallback"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "requiredSignatures",
              type: "uint256"
            }
          ],
          name: "checkNSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "checkSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getChainId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "offset",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "length",
              type: "uint256"
            }
          ],
          name: "getStorageAt",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "setGuard",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulateAndRevert",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          stateMutability: "payable",
          type: "receive"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/gnosis_safe_l2.json
var require_gnosis_safe_l2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/gnosis_safe_l2.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
      released: true,
      contractName: "GnosisSafeL2",
      version: "1.3.0",
      networkAddresses: {
        "1": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "3": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "4": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "5": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "10": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "11": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "12": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "18": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "25": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "28": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "39": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "40": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "41": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "42": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "50": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "51": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "56": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "61": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "63": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "69": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "82": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "83": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "97": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "100": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "106": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "108": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "111": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "122": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "123": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "137": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "246": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "250": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "288": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "300": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "321": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "322": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "336": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "338": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "420": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "588": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "592": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "595": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "599": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "686": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "787": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1001": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1008": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1088": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1101": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1111": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1112": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1115": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1116": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1284": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1285": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1287": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1294": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1807": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1984": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "2001": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "2002": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "2008": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "2019": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "2020": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "2221": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "2222": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "3737": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "4002": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "4689": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "4918": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "4919": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "5001": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "7341": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "7700": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "8217": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "9000": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "9001": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "9728": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "10000": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "10001": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "10200": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "11235": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "11437": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "12357": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "23294": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "42161": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "42170": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "42220": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "43113": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "43114": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "43288": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "44787": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "45000": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "47805": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "54211": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "56288": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "59140": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "71401": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "71402": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "73799": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "80001": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "84531": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "200101": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "200202": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "333999": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "421611": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "421613": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "534353": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "11155111": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "245022926": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1313161554": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1313161555": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "1666600000": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "1666700000": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "11297108099": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "11297108109": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "ChangedFallbackHandler",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "ChangedGuard",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "SafeModuleTransaction",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              indexed: false,
              internalType: "bytes",
              name: "additionalInfo",
              type: "bytes"
            }
          ],
          name: "SafeMultiSigTransaction",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "sender",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "SafeReceived",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "initiator",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address[]",
              name: "owners",
              type: "address[]"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "initializer",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          name: "SafeSetup",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          stateMutability: "nonpayable",
          type: "fallback"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "requiredSignatures",
              type: "uint256"
            }
          ],
          name: "checkNSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "checkSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getChainId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "offset",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "length",
              type: "uint256"
            }
          ],
          name: "getStorageAt",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "requiredTxGas",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "setGuard",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulateAndRevert",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          stateMutability: "payable",
          type: "receive"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/gnosis_safe.json
var require_gnosis_safe = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/gnosis_safe.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
      released: true,
      contractName: "GnosisSafe",
      version: "1.3.0",
      networkAddresses: {
        "1": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "3": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "4": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "5": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "10": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "11": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "12": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "18": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "25": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "28": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "39": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "40": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "41": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "42": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "50": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "51": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "56": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "61": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "63": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "69": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "82": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "83": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "97": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "100": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "106": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "108": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "111": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "122": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "123": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "137": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "246": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "250": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "288": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "300": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "321": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "322": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "336": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "338": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "420": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "588": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "592": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "595": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "599": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "686": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "787": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1001": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1008": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1088": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1101": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1111": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1112": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1115": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1116": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1284": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1285": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1287": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1294": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1807": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1984": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "2001": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "2002": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "2008": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "2019": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "2020": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "2221": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "2222": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "3737": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "4002": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "4689": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "4918": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "4919": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "5001": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "7341": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "7700": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "8217": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "9000": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "9001": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "9728": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "10000": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "10001": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "10200": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "11235": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "11437": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "12357": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "23294": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "42161": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "42170": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "42220": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "43113": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "43114": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "43288": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "44787": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "45000": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "47805": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "54211": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "56288": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "59140": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "71401": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "71402": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "73799": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "80001": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "84531": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "200101": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "200202": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "333999": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "421611": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "421613": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "534353": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "11155111": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "245022926": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1313161554": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1313161555": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "1666600000": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "1666700000": "0x69f4D1788e39c87893C980c06EdF4b7f686e2938",
        "11297108099": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "11297108109": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "ChangedFallbackHandler",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "ChangedGuard",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "sender",
              type: "address"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          name: "SafeReceived",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "initiator",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address[]",
              name: "owners",
              type: "address[]"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            },
            {
              indexed: false,
              internalType: "address",
              name: "initializer",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            }
          ],
          name: "SafeSetup",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          stateMutability: "nonpayable",
          type: "fallback"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "requiredSignatures",
              type: "uint256"
            }
          ],
          name: "checkNSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "checkSignatures",
          outputs: [],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "payable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getChainId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "offset",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "length",
              type: "uint256"
            }
          ],
          name: "getStorageAt",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "requiredTxGas",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "guard",
              type: "address"
            }
          ],
          name: "setGuard",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulateAndRevert",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          stateMutability: "payable",
          type: "receive"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.2.0/gnosis_safe.json
var require_gnosis_safe2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.2.0/gnosis_safe.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
      released: true,
      contractName: "GnosisSafe",
      version: "1.2.0",
      networkAddresses: {
        "1": "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
        "4": "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
        "5": "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
        "42": "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
        "88": "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
        "100": "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
        "246": "0x6851D6fDFAfD08c0295C392436245E5bc78B0185",
        "73799": "0x6851D6fDFAfD08c0295C392436245E5bc78B0185"
      },
      abi: [
        {
          inputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "masterCopy",
              type: "address"
            }
          ],
          name: "ChangedMasterCopy",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          payable: true,
          stateMutability: "payable",
          type: "fallback"
        },
        {
          constant: true,
          inputs: [],
          name: "NAME",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "_masterCopy",
              type: "address"
            }
          ],
          name: "changeMasterCopy",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "contract Module",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getModules",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "isModuleEnabled",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          payable: true,
          stateMutability: "payable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "requiredTxGas",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            }
          ],
          name: "signMessage",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/gnosis_safe.json
var require_gnosis_safe3 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/gnosis_safe.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
      released: true,
      contractName: "GnosisSafe",
      version: "1.1.1",
      networkAddresses: {
        "1": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
        "4": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
        "5": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
        "42": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
        "88": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
        "100": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
        "246": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
        "73799": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F"
      },
      abi: [
        {
          inputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "approvedHash",
              type: "bytes32"
            },
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "ApproveHash",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "masterCopy",
              type: "address"
            }
          ],
          name: "ChangedMasterCopy",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "threshold",
              type: "uint256"
            }
          ],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleFailure",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "module",
              type: "address"
            }
          ],
          name: "ExecutionFromModuleSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "txHash",
              type: "bytes32"
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            }
          ],
          name: "ExecutionSuccess",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          payable: true,
          stateMutability: "payable",
          type: "fallback"
        },
        {
          constant: true,
          inputs: [],
          name: "NAME",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "approvedHashes",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "_masterCopy",
              type: "address"
            }
          ],
          name: "changeMasterCopy",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "changeThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "contract Module",
              name: "prevModule",
              type: "address"
            },
            {
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "disableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "domainSeparator",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "contract Module",
              name: "module",
              type: "address"
            }
          ],
          name: "enableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModule",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "execTransactionFromModuleReturnData",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getModules",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "start",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "pageSize",
              type: "uint256"
            }
          ],
          name: "getModulesPaginated",
          outputs: [
            {
              internalType: "address[]",
              name: "array",
              type: "address[]"
            },
            {
              internalType: "address",
              name: "next",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getOwners",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getThreshold",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          name: "isOwner",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "nonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            }
          ],
          name: "removeOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "handler",
              type: "address"
            }
          ],
          name: "setFallbackHandler",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          name: "signedMessages",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "prevOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "oldOwner",
              type: "address"
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address"
            }
          ],
          name: "swapOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address[]",
              name: "_owners",
              type: "address[]"
            },
            {
              internalType: "uint256",
              name: "_threshold",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "address",
              name: "fallbackHandler",
              type: "address"
            },
            {
              internalType: "address",
              name: "paymentToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "payment",
              type: "uint256"
            },
            {
              internalType: "address payable",
              name: "paymentReceiver",
              type: "address"
            }
          ],
          name: "setup",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address payable",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "signatures",
              type: "bytes"
            }
          ],
          name: "execTransaction",
          outputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "requiredTxGas",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes32",
              name: "hashToApprove",
              type: "bytes32"
            }
          ],
          name: "approveHash",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            }
          ],
          name: "signMessage",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "encodeTransactionData",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            },
            {
              internalType: "uint256",
              name: "safeTxGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "baseGas",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "gasPrice",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "gasToken",
              type: "address"
            },
            {
              internalType: "address",
              name: "refundReceiver",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256"
            }
          ],
          name: "getTransactionHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.0.0/gnosis_safe.json
var require_gnosis_safe4 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.0.0/gnosis_safe.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A",
      released: true,
      contractName: "GnosisSafe",
      version: "1.0.0",
      networkAddresses: {
        "1": "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A",
        "4": "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A",
        "5": "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A",
        "42": "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A",
        "100": "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A"
      },
      abi: [
        {
          constant: false,
          inputs: [
            { name: "owner", type: "address" },
            { name: "_threshold", type: "uint256" }
          ],
          name: "addOwnerWithThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "DOMAIN_SEPARATOR_TYPEHASH",
          outputs: [{ name: "", type: "bytes32" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [{ name: "owner", type: "address" }],
          name: "isOwner",
          outputs: [{ name: "", type: "bool" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            { name: "to", type: "address" },
            { name: "value", type: "uint256" },
            { name: "data", type: "bytes" },
            { name: "operation", type: "uint8" }
          ],
          name: "execTransactionFromModule",
          outputs: [{ name: "success", type: "bool" }],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [{ name: "", type: "bytes32" }],
          name: "signedMessages",
          outputs: [{ name: "", type: "uint256" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [{ name: "module", type: "address" }],
          name: "enableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [{ name: "_threshold", type: "uint256" }],
          name: "changeThreshold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            { name: "", type: "address" },
            { name: "", type: "bytes32" }
          ],
          name: "approvedHashes",
          outputs: [{ name: "", type: "uint256" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [{ name: "_masterCopy", type: "address" }],
          name: "changeMasterCopy",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "SENTINEL_MODULES",
          outputs: [{ name: "", type: "address" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "SENTINEL_OWNERS",
          outputs: [{ name: "", type: "address" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getOwners",
          outputs: [{ name: "", type: "address[]" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "NAME",
          outputs: [{ name: "", type: "string" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "nonce",
          outputs: [{ name: "", type: "uint256" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getModules",
          outputs: [{ name: "", type: "address[]" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "SAFE_MSG_TYPEHASH",
          outputs: [{ name: "", type: "bytes32" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "SAFE_TX_TYPEHASH",
          outputs: [{ name: "", type: "bytes32" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            { name: "prevModule", type: "address" },
            { name: "module", type: "address" }
          ],
          name: "disableModule",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            { name: "prevOwner", type: "address" },
            { name: "oldOwner", type: "address" },
            { name: "newOwner", type: "address" }
          ],
          name: "swapOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "getThreshold",
          outputs: [{ name: "", type: "uint256" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "domainSeparator",
          outputs: [{ name: "", type: "bytes32" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            { name: "prevOwner", type: "address" },
            { name: "owner", type: "address" },
            { name: "_threshold", type: "uint256" }
          ],
          name: "removeOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "VERSION",
          outputs: [{ name: "", type: "string" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        { payable: true, stateMutability: "payable", type: "fallback" },
        {
          anonymous: false,
          inputs: [{ indexed: false, name: "txHash", type: "bytes32" }],
          name: "ExecutionFailed",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [{ indexed: false, name: "owner", type: "address" }],
          name: "AddedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [{ indexed: false, name: "owner", type: "address" }],
          name: "RemovedOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [{ indexed: false, name: "threshold", type: "uint256" }],
          name: "ChangedThreshold",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [{ indexed: false, name: "module", type: "address" }],
          name: "EnabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [{ indexed: false, name: "module", type: "address" }],
          name: "DisabledModule",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            { indexed: false, name: "newContract", type: "address" }
          ],
          name: "ContractCreation",
          type: "event"
        },
        {
          constant: false,
          inputs: [
            { name: "_owners", type: "address[]" },
            { name: "_threshold", type: "uint256" },
            { name: "to", type: "address" },
            { name: "data", type: "bytes" },
            { name: "paymentToken", type: "address" },
            { name: "payment", type: "uint256" },
            { name: "paymentReceiver", type: "address" }
          ],
          name: "setup",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            { name: "to", type: "address" },
            { name: "value", type: "uint256" },
            { name: "data", type: "bytes" },
            { name: "operation", type: "uint8" },
            { name: "safeTxGas", type: "uint256" },
            { name: "baseGas", type: "uint256" },
            { name: "gasPrice", type: "uint256" },
            { name: "gasToken", type: "address" },
            { name: "refundReceiver", type: "address" },
            { name: "signatures", type: "bytes" }
          ],
          name: "execTransaction",
          outputs: [{ name: "success", type: "bool" }],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            { name: "to", type: "address" },
            { name: "value", type: "uint256" },
            { name: "data", type: "bytes" },
            { name: "operation", type: "uint8" }
          ],
          name: "requiredTxGas",
          outputs: [{ name: "", type: "uint256" }],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [{ name: "hashToApprove", type: "bytes32" }],
          name: "approveHash",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [{ name: "_data", type: "bytes" }],
          name: "signMessage",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            { name: "_data", type: "bytes" },
            { name: "_signature", type: "bytes" }
          ],
          name: "isValidSignature",
          outputs: [{ name: "", type: "bytes4" }],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [{ name: "message", type: "bytes" }],
          name: "getMessageHash",
          outputs: [{ name: "", type: "bytes32" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            { name: "to", type: "address" },
            { name: "value", type: "uint256" },
            { name: "data", type: "bytes" },
            { name: "operation", type: "uint8" },
            { name: "safeTxGas", type: "uint256" },
            { name: "baseGas", type: "uint256" },
            { name: "gasPrice", type: "uint256" },
            { name: "gasToken", type: "address" },
            { name: "refundReceiver", type: "address" },
            { name: "_nonce", type: "uint256" }
          ],
          name: "encodeTransactionData",
          outputs: [{ name: "", type: "bytes" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            { name: "to", type: "address" },
            { name: "value", type: "uint256" },
            { name: "data", type: "bytes" },
            { name: "operation", type: "uint8" },
            { name: "safeTxGas", type: "uint256" },
            { name: "baseGas", type: "uint256" },
            { name: "gasPrice", type: "uint256" },
            { name: "gasToken", type: "address" },
            { name: "refundReceiver", type: "address" },
            { name: "_nonce", type: "uint256" }
          ],
          name: "getTransactionHash",
          outputs: [{ name: "", type: "bytes32" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/utils.js
var require_utils2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/utils.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findDeployment = void 0;
    var satisfies_1 = __importDefault(require_satisfies());
    var DEFAULT_FILTER = { released: true };
    var findDeployment = (criteria = DEFAULT_FILTER, deployments) => {
      const criteriaWithDefaults = Object.assign(Object.assign({}, DEFAULT_FILTER), criteria);
      return deployments.find((deployment) => {
        if (typeof criteriaWithDefaults.version !== "undefined" && !(0, satisfies_1.default)(deployment.version, criteriaWithDefaults.version))
          return false;
        if (typeof criteriaWithDefaults.released === "boolean" && deployment.released != criteriaWithDefaults.released)
          return false;
        if (criteriaWithDefaults.network && !deployment.networkAddresses[criteriaWithDefaults.network])
          return false;
        return true;
      });
    };
    exports.findDeployment = findDeployment;
  }
});

// node_modules/@safe-global/safe-deployments/dist/safes.js
var require_safes = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/safes.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSafeL2SingletonDeployment = exports._safeL2Deployments = exports.getSafeSingletonDeployment = exports._safeDeployments = void 0;
    var safe_l2_json_1 = __importDefault(require_safe_l2());
    var safe_json_1 = __importDefault(require_safe());
    var gnosis_safe_l2_json_1 = __importDefault(require_gnosis_safe_l2());
    var gnosis_safe_json_1 = __importDefault(require_gnosis_safe());
    var gnosis_safe_json_2 = __importDefault(require_gnosis_safe2());
    var gnosis_safe_json_3 = __importDefault(require_gnosis_safe3());
    var gnosis_safe_json_4 = __importDefault(require_gnosis_safe4());
    var utils_1 = require_utils2();
    exports._safeDeployments = [
      safe_json_1.default,
      gnosis_safe_json_1.default,
      gnosis_safe_json_2.default,
      gnosis_safe_json_3.default,
      gnosis_safe_json_4.default
    ];
    var getSafeSingletonDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, exports._safeDeployments);
    };
    exports.getSafeSingletonDeployment = getSafeSingletonDeployment;
    exports._safeL2Deployments = [
      safe_l2_json_1.default,
      gnosis_safe_l2_json_1.default
    ];
    var getSafeL2SingletonDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, exports._safeL2Deployments);
    };
    exports.getSafeL2SingletonDeployment = getSafeL2SingletonDeployment;
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.0.0/proxy_factory.json
var require_proxy_factory = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.0.0/proxy_factory.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x12302fE9c02ff50939BaAaaf415fc226C078613C",
      released: true,
      contractName: "ProxyFactory",
      version: "1.0.0",
      networkAddresses: {
        "1": "0x12302fE9c02ff50939BaAaaf415fc226C078613C",
        "4": "0x12302fE9c02ff50939BaAaaf415fc226C078613C",
        "5": "0x12302fE9c02ff50939BaAaaf415fc226C078613C",
        "42": "0x12302fE9c02ff50939BaAaaf415fc226C078613C",
        "100": "0x12302fE9c02ff50939BaAaaf415fc226C078613C"
      },
      abi: [
        {
          constant: false,
          inputs: [
            {
              name: "_mastercopy",
              type: "address"
            },
            {
              name: "initializer",
              type: "bytes"
            },
            {
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createProxyWithNonce",
          outputs: [
            {
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "proxyCreationCode",
          outputs: [
            {
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "pure",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "masterCopy",
              type: "address"
            },
            {
              name: "data",
              type: "bytes"
            }
          ],
          name: "createProxy",
          outputs: [
            {
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "proxyRuntimeCode",
          outputs: [
            {
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "pure",
          type: "function"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              name: "proxy",
              type: "address"
            }
          ],
          name: "ProxyCreation",
          type: "event"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/proxy_factory.json
var require_proxy_factory2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/proxy_factory.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
      released: true,
      contractName: "ProxyFactory",
      version: "1.1.1",
      networkAddresses: {
        "1": "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
        "4": "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
        "5": "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
        "42": "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
        "88": "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
        "100": "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
        "246": "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B",
        "73799": "0x76E2cFc1F5Fa8F6a5b3fC4c8F4788F0116861F9B"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          name: "ProxyCreation",
          type: "event"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "masterCopy",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          name: "createProxy",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "proxyRuntimeCode",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "pure",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "proxyCreationCode",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "pure",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "_mastercopy",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createProxyWithNonce",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "_mastercopy",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            },
            {
              internalType: "contract IProxyCreationCallback",
              name: "callback",
              type: "address"
            }
          ],
          name: "createProxyWithCallback",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "_mastercopy",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "calculateCreateProxyWithNonceAddress",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/proxy_factory.json
var require_proxy_factory3 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/proxy_factory.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
      released: true,
      contractName: "GnosisSafeProxyFactory",
      version: "1.3.0",
      networkAddresses: {
        "1": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "3": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "4": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "5": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "10": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "11": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "12": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "18": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "25": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "28": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "39": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "40": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "41": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "42": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "50": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "51": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "56": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "61": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "63": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "69": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "82": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "83": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "97": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "100": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "106": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "108": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "111": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "122": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "123": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "137": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "246": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "250": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "288": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "300": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "321": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "322": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "336": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "338": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "420": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "588": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "592": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "595": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "599": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "686": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "787": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1001": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1008": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1088": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1101": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1111": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1112": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1115": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1116": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1284": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1285": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1287": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1294": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1807": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1984": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "2001": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "2002": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "2008": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "2019": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "2020": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "2221": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "2222": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "3737": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "4002": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "4689": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "4918": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "4919": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "5001": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "7341": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "7700": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "8217": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "9000": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "9001": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "9728": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "10000": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "10001": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "10200": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "11235": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "11437": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "12357": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "23294": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "42161": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "42170": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "42220": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "43113": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "43114": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "43288": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "44787": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "45000": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "47805": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "54211": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "56288": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "59140": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "71401": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "71402": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "73799": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "80001": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "84531": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "200101": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "200202": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "333999": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "421611": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "421613": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "534353": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "11155111": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "245022926": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1313161554": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1313161555": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "1666600000": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "1666700000": "0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC",
        "11297108099": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",
        "11297108109": "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "singleton",
              type: "address"
            }
          ],
          name: "ProxyCreation",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "calculateCreateProxyWithNonceAddress",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          name: "createProxy",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            },
            {
              internalType: "contract IProxyCreationCallback",
              name: "callback",
              type: "address"
            }
          ],
          name: "createProxyWithCallback",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createProxyWithNonce",
          outputs: [
            {
              internalType: "contract GnosisSafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "proxyCreationCode",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [],
          name: "proxyRuntimeCode",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/safe_proxy_factory.json
var require_safe_proxy_factory = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/safe_proxy_factory.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
      contractName: "SafeProxyFactory",
      version: "1.4.0",
      released: false,
      networkAddresses: {
        "5": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "56": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67",
        "100": "0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            },
            {
              indexed: false,
              internalType: "address",
              name: "singleton",
              type: "address"
            }
          ],
          name: "ProxyCreation",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createChainSpecificProxyWithNonce",
          outputs: [
            {
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            },
            {
              internalType: "contract IProxyCreationCallback",
              name: "callback",
              type: "address"
            }
          ],
          name: "createProxyWithCallback",
          outputs: [
            {
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_singleton",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "initializer",
              type: "bytes"
            },
            {
              internalType: "uint256",
              name: "saltNonce",
              type: "uint256"
            }
          ],
          name: "createProxyWithNonce",
          outputs: [
            {
              internalType: "contract SafeProxy",
              name: "proxy",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [],
          name: "getChainId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "proxyCreationCode",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/factories.js
var require_factories = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/factories.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProxyFactoryDeployment = void 0;
    var proxy_factory_json_1 = __importDefault(require_proxy_factory());
    var proxy_factory_json_2 = __importDefault(require_proxy_factory2());
    var proxy_factory_json_3 = __importDefault(require_proxy_factory3());
    var safe_proxy_factory_json_1 = __importDefault(require_safe_proxy_factory());
    var utils_1 = require_utils2();
    var factoryDeployments = [
      safe_proxy_factory_json_1.default,
      proxy_factory_json_3.default,
      proxy_factory_json_2.default,
      proxy_factory_json_1.default
    ];
    var getProxyFactoryDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, factoryDeployments);
    };
    exports.getProxyFactoryDeployment = getProxyFactoryDeployment;
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/create_call.json
var require_create_call = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/create_call.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
      released: true,
      contractName: "CreateCall",
      version: "1.3.0",
      networkAddresses: {
        "1": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "3": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "4": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "5": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "10": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "11": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "12": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "18": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "25": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "28": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "39": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "40": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "41": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "42": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "50": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "51": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "56": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "61": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "63": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "69": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "82": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "83": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "97": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "100": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "106": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "108": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "111": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "122": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "123": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "137": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "246": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "250": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "288": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "300": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "321": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "322": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "336": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "338": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "420": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "588": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "592": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "595": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "599": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "686": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "787": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1001": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1008": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1088": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1101": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1111": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1112": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1115": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1116": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1284": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1285": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1287": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1294": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1807": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1984": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "2001": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "2002": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "2008": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "2019": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "2020": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "2221": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "2222": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "3737": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "4002": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "4689": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "4918": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "4919": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "5001": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "7341": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "7700": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "8217": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "9000": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "9001": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "9728": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "10000": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "10001": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "10200": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "11235": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "11437": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "12357": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "23294": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "42161": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "42170": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "42220": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "43113": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "43114": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "43288": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "44787": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "45000": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "47805": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "54211": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "56288": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "59140": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "71401": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "71402": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "73799": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "80001": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "84531": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "200101": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "200202": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "333999": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "421611": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "421613": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "534353": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "11155111": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "245022926": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1313161554": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1313161555": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "1666600000": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "1666700000": "0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d",
        "11297108099": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4",
        "11297108109": "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          name: "ContractCreation",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "deploymentData",
              type: "bytes"
            }
          ],
          name: "performCreate",
          outputs: [
            {
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "deploymentData",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "salt",
              type: "bytes32"
            }
          ],
          name: "performCreate2",
          outputs: [
            {
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/create_call.json
var require_create_call2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/create_call.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
      released: false,
      contractName: "CreateCall",
      version: "1.4.0",
      networkAddresses: {
        "5": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "56": "0x9b35Af71d77eaf8d7e40252370304687390A1A52",
        "100": "0x9b35Af71d77eaf8d7e40252370304687390A1A52"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          name: "ContractCreation",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "deploymentData",
              type: "bytes"
            }
          ],
          name: "performCreate",
          outputs: [
            {
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "deploymentData",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "salt",
              type: "bytes32"
            }
          ],
          name: "performCreate2",
          outputs: [
            {
              internalType: "address",
              name: "newContract",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/multi_send.json
var require_multi_send = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/multi_send.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
      released: true,
      contractName: "MultiSend",
      version: "1.1.1",
      networkAddresses: {
        "1": "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
        "4": "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
        "5": "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
        "42": "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
        "88": "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
        "100": "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
        "246": "0x8D29bE29923b68abfDD21e541b9374737B49cdAD",
        "73799": "0x8D29bE29923b68abfDD21e541b9374737B49cdAD"
      },
      abi: [
        {
          inputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/multi_send.json
var require_multi_send2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/multi_send.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
      released: true,
      contractName: "MultiSend",
      version: "1.3.0",
      networkAddresses: {
        "1": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "3": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "4": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "5": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "10": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "11": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "12": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "18": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "25": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "28": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "39": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "40": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "41": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "42": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "50": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "51": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "56": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "61": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "63": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "69": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "82": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "83": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "97": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "100": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "106": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "108": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "111": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "122": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "123": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "137": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "246": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "250": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "288": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "300": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "321": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "322": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "336": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "338": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "420": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "588": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "592": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "595": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "599": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "686": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "787": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1001": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1008": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1088": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1101": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1111": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1112": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1115": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1116": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1284": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1285": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1287": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1294": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1807": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1984": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "2001": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "2002": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "2008": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "2019": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "2020": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "2221": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "2222": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "3737": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "4002": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "4689": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "4918": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "4919": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "5001": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "7341": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "7700": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "8217": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "9000": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "9001": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "9728": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "10000": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "10001": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "10200": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "11235": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "11437": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "12357": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "23294": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "42161": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "42170": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "42220": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "43113": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "43114": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "43288": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "44787": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "45000": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "47805": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "54211": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "56288": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "59140": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "71401": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "71402": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "73799": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "80001": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "84531": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "200101": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "200202": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "333999": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "421611": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "421613": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "534353": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "11155111": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "245022926": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1313161554": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1313161555": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "1666600000": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "1666700000": "0x998739BFdAAdde7C933B942a68053933098f9EDa",
        "11297108099": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
        "11297108109": "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/multi_send.json
var require_multi_send3 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/multi_send.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
      released: false,
      contractName: "MultiSend",
      version: "1.4.0",
      networkAddresses: {
        "5": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "56": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526",
        "100": "0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/multi_send_call_only.json
var require_multi_send_call_only = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/multi_send_call_only.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
      released: true,
      contractName: "MultiSendCallOnly",
      version: "1.3.0",
      networkAddresses: {
        "1": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "3": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "4": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "5": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "10": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "11": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "12": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "18": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "25": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "28": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "39": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "40": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "41": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "42": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "50": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "51": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "56": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "61": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "63": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "69": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "82": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "83": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "97": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "100": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "106": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "108": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "111": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "122": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "123": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "137": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "246": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "250": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "288": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "300": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "321": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "322": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "336": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "338": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "420": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "588": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "592": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "595": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "599": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "686": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "787": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1001": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1008": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1088": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1101": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1111": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1112": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1115": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1116": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1284": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1285": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1287": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1294": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1807": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1984": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "2001": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "2002": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "2008": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "2019": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "2020": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "2221": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "2222": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "3737": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "4002": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "4689": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "4918": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "4919": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "5001": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "7341": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "7700": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "8217": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "9000": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "9001": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "9728": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "10000": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "10001": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "10200": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "11235": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "11437": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "12357": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "23294": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "42161": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "42170": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "42220": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "43113": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "43114": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "43288": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "44787": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "45000": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "47805": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "54211": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "56288": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "59140": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "71401": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "71402": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "73799": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "80001": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "84531": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "200101": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "200202": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "333999": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "421611": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "421613": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "534353": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "11155111": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "245022926": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1313161554": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1313161555": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "1666600000": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "1666700000": "0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B",
        "11297108099": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D",
        "11297108109": "0x40A2aCCbd92BCA938b02010E17A5b8929b49130D"
      },
      abi: [
        {
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/multi_send_call_only.json
var require_multi_send_call_only2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/multi_send_call_only.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
      released: false,
      contractName: "MultiSendCallOnly",
      version: "1.4.0",
      networkAddresses: {
        "5": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "56": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2",
        "100": "0x9641d764fc13c8B624c04430C7356C1C7C8102e2"
      },
      abi: [
        {
          inputs: [
            {
              internalType: "bytes",
              name: "transactions",
              type: "bytes"
            }
          ],
          name: "multiSend",
          outputs: [],
          stateMutability: "payable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/sign_message_lib.json
var require_sign_message_lib = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/sign_message_lib.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
      contractName: "SignMessageLib",
      version: "1.3.0",
      released: true,
      networkAddresses: {
        "1": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "3": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "4": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "5": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "10": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "11": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "12": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "18": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "25": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "28": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "39": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "40": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "41": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "42": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "50": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "51": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "56": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "61": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "63": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "69": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "82": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "83": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "97": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "100": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "106": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "108": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "111": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "122": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "123": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "137": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "246": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "250": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "288": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "300": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "321": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "322": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "336": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "338": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "420": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "588": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "592": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "595": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "599": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "686": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "787": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1001": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1008": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1088": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1101": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1111": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1112": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1115": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1116": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1284": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1285": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1287": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1294": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1807": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1984": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "2001": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "2002": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "2008": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "2019": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "2020": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "2221": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "2222": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "3737": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "4002": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "4689": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "4918": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "4919": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "5001": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "7341": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "7700": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "8217": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "9000": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "9001": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "9728": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "10000": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "10001": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "10200": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "11235": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "11437": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "12357": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "23294": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "42161": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "42170": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "42220": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "43113": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "43114": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "43288": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "44787": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "45000": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "47805": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "54211": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "56288": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "59140": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "71401": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "71402": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "73799": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "80001": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "84531": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "200101": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "200202": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "421611": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "421613": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "534353": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "11155111": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "245022926": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1313161554": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1313161555": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "1666600000": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "1666700000": "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
        "11297108099": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
        "11297108109": "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            }
          ],
          name: "signMessage",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/sign_message_lib.json
var require_sign_message_lib2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/sign_message_lib.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x58FCe385Ed16beB4BCE49c8DF34c7d6975807520",
      contractName: "SignMessageLib",
      version: "1.4.0",
      released: false,
      networkAddresses: {
        "5": "0x58FCe385Ed16beB4BCE49c8DF34c7d6975807520",
        "56": "0x58FCe385Ed16beB4BCE49c8DF34c7d6975807520",
        "100": "0x58FCe385Ed16beB4BCE49c8DF34c7d6975807520"
      },
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "msgHash",
              type: "bytes32"
            }
          ],
          name: "SignMsg",
          type: "event"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            }
          ],
          name: "signMessage",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/libs.js
var require_libs = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/libs.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSignMessageLibDeployment = exports.getCreateCallDeployment = exports.getMultiSendCallOnlyDeployment = exports.getMultiSendDeployment = void 0;
    var create_call_json_1 = __importDefault(require_create_call());
    var create_call_json_2 = __importDefault(require_create_call2());
    var multi_send_json_1 = __importDefault(require_multi_send());
    var multi_send_json_2 = __importDefault(require_multi_send2());
    var multi_send_json_3 = __importDefault(require_multi_send3());
    var multi_send_call_only_json_1 = __importDefault(require_multi_send_call_only());
    var multi_send_call_only_json_2 = __importDefault(require_multi_send_call_only2());
    var sign_message_lib_json_1 = __importDefault(require_sign_message_lib());
    var sign_message_lib_json_2 = __importDefault(require_sign_message_lib2());
    var utils_1 = require_utils2();
    var multiSendDeployments = [
      multi_send_json_3.default,
      multi_send_json_2.default,
      multi_send_json_1.default
    ];
    var getMultiSendDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, multiSendDeployments);
    };
    exports.getMultiSendDeployment = getMultiSendDeployment;
    var multiSendCallOnlyDeployments = [
      multi_send_call_only_json_2.default,
      multi_send_call_only_json_1.default
    ];
    var getMultiSendCallOnlyDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, multiSendCallOnlyDeployments);
    };
    exports.getMultiSendCallOnlyDeployment = getMultiSendCallOnlyDeployment;
    var createCallDeployments = [
      create_call_json_2.default,
      create_call_json_1.default
    ];
    var getCreateCallDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, createCallDeployments);
    };
    exports.getCreateCallDeployment = getCreateCallDeployment;
    var signMessageLibDeployments = [
      sign_message_lib_json_2.default,
      sign_message_lib_json_1.default
    ];
    var getSignMessageLibDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, signMessageLibDeployments);
    };
    exports.getSignMessageLibDeployment = getSignMessageLibDeployment;
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/default_callback_handler.json
var require_default_callback_handler = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.1.1/default_callback_handler.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
      released: true,
      contractName: "DefaultCallbackHandler",
      version: "1.1.1",
      networkAddresses: {
        "1": "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
        "4": "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
        "5": "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
        "42": "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
        "88": "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
        "100": "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
        "246": "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44",
        "73799": "0xd5D82B6aDDc9027B22dCA772Aa68D5d74cdBdF44"
      },
      abi: [
        {
          constant: true,
          inputs: [],
          name: "NAME",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155BatchReceived",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC721Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "tokensReceived",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/compatibility_fallback_handler.json
var require_compatibility_fallback_handler = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/compatibility_fallback_handler.json"(exports, module) {
    module.exports = {
      defaultAddress: "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
      released: true,
      contractName: "CompatibilityFallbackHandler",
      version: "1.3.0",
      networkAddresses: {
        "1": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "3": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "4": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "5": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "10": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "11": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "12": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "18": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "25": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "28": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "39": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "40": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "41": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "42": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "50": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "51": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "56": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "61": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "63": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "69": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "82": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "83": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "97": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "100": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "106": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "108": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "111": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "122": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "123": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "137": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "246": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "250": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "288": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "300": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "321": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "322": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "336": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "338": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "420": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "588": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "592": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "595": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "599": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "686": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "787": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1001": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1008": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1088": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1101": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1111": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1112": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1115": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1116": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1284": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1285": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1287": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1294": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1807": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1984": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "2001": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "2002": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "2008": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "2019": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "2020": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "2221": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "2222": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "3737": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "4002": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "4689": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "4918": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "4919": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "5001": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "7341": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "7700": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "8217": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "9000": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "9001": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "9728": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "10000": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "10001": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "10200": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "11235": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "11437": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "12357": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "23294": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "42161": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "42170": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "42220": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "43113": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "43114": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "43288": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "44787": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "45000": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "47805": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "54211": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "56288": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "59140": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "71401": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "71402": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "73799": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "80001": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "84531": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "200101": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "200202": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "333999": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "421611": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "421613": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "534353": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "11155111": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "245022926": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1313161554": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1313161555": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "1666600000": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "1666700000": "0x017062a1dE2FE6b99BE3d9d37841FeD19F573804",
        "11297108099": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4",
        "11297108109": "0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4"
      },
      abi: [
        {
          inputs: [],
          name: "NAME",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "contract GnosisSafe",
              name: "safe",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHashForSafe",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getModules",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155BatchReceived",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC721Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulate",
          outputs: [
            {
              internalType: "bytes",
              name: "response",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4"
            }
          ],
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "tokensReceived",
          outputs: [],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/compatibility_fallback_handler.json
var require_compatibility_fallback_handler2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/compatibility_fallback_handler.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x2a15DE4410d4c8af0A7b6c12803120f43C42B820",
      released: false,
      contractName: "CompatibilityFallbackHandler",
      version: "1.4.0",
      networkAddresses: {
        "5": "0x2a15DE4410d4c8af0A7b6c12803120f43C42B820",
        "56": "0x2a15DE4410d4c8af0A7b6c12803120f43C42B820",
        "100": "0x2a15DE4410d4c8af0A7b6c12803120f43C42B820"
      },
      abi: [
        {
          inputs: [
            {
              internalType: "contract Safe",
              name: "safe",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "encodeMessageDataForSafe",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "contract Safe",
              name: "safe",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "message",
              type: "bytes"
            }
          ],
          name: "getMessageHashForSafe",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [],
          name: "getModules",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_dataHash",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "_signature",
              type: "bytes"
            }
          ],
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155BatchReceived",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC1155Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "onERC721Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ],
          stateMutability: "pure",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "targetContract",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "calldataPayload",
              type: "bytes"
            }
          ],
          name: "simulate",
          outputs: [
            {
              internalType: "bytes",
              name: "response",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4"
            }
          ],
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ],
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          name: "tokensReceived",
          outputs: [],
          stateMutability: "pure",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/handler.js
var require_handler = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/handler.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFallbackHandlerDeployment = exports.getCompatibilityFallbackHandlerDeployment = exports.getDefaultCallbackHandlerDeployment = void 0;
    var default_callback_handler_json_1 = __importDefault(require_default_callback_handler());
    var compatibility_fallback_handler_json_1 = __importDefault(require_compatibility_fallback_handler());
    var compatibility_fallback_handler_json_2 = __importDefault(require_compatibility_fallback_handler2());
    var utils_1 = require_utils2();
    var defaultCallbackHandlerDeployments = [
      default_callback_handler_json_1.default
    ];
    var getDefaultCallbackHandlerDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, defaultCallbackHandlerDeployments);
    };
    exports.getDefaultCallbackHandlerDeployment = getDefaultCallbackHandlerDeployment;
    var compatFallbackHandlerDeployments = [
      compatibility_fallback_handler_json_2.default,
      compatibility_fallback_handler_json_1.default
    ];
    var getCompatibilityFallbackHandlerDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, compatFallbackHandlerDeployments);
    };
    exports.getCompatibilityFallbackHandlerDeployment = getCompatibilityFallbackHandlerDeployment;
    var fallbackHandlerDeployments = [
      compatibility_fallback_handler_json_2.default,
      compatibility_fallback_handler_json_1.default,
      default_callback_handler_json_1.default
    ];
    var getFallbackHandlerDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, fallbackHandlerDeployments);
    };
    exports.getFallbackHandlerDeployment = getFallbackHandlerDeployment;
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/simulate_tx_accessor.json
var require_simulate_tx_accessor = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.3.0/simulate_tx_accessor.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
      released: true,
      contractName: "SimulateTxAccessor",
      version: "1.3.0",
      networkAddresses: {
        "1": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "3": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "4": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "5": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "10": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "11": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "12": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "18": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "25": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "28": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "39": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "40": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "41": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "42": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "50": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "51": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "56": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "61": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "63": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "69": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "82": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "83": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "97": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "100": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "106": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "108": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "111": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "122": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "123": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "137": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "246": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "250": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "288": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "300": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "321": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "322": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "336": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "338": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "420": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "588": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "592": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "595": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "599": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "686": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "787": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1001": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1008": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1088": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1101": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1111": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1112": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1115": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1116": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1284": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1285": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1287": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1294": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1807": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1984": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "2001": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "2002": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "2008": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "2019": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "2020": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "2221": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "2222": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "3737": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "4002": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "4689": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "4918": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "4919": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "5001": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "7341": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "7700": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "8217": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "9000": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "9001": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "9728": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "10000": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "10001": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "10200": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "11235": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "11437": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "12357": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "23294": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "42161": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "42170": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "42220": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "43113": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "43114": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "43288": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "44787": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "45000": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "47805": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "54211": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "56288": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "59140": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "71401": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "71402": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "73799": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "80001": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "84531": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "200101": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "200202": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "333999": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "421611": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "421613": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "534353": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "11155111": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "245022926": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1313161554": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1313161555": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "1666600000": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "1666700000": "0x727a77a074D1E6c4530e814F89E618a3298FC044",
        "11297108099": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da",
        "11297108109": "0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "simulate",
          outputs: [
            {
              internalType: "uint256",
              name: "estimate",
              type: "uint256"
            },
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/simulate_tx_accessor.json
var require_simulate_tx_accessor2 = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/assets/v1.4.0/simulate_tx_accessor.json"(exports, module) {
    module.exports = {
      defaultAddress: "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
      released: false,
      contractName: "SimulateTxAccessor",
      version: "1.4.0",
      networkAddresses: {
        "5": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "56": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199",
        "100": "0x3d4BA2E0884aa488718476ca2FB8Efc291A46199"
      },
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "enum Enum.Operation",
              name: "operation",
              type: "uint8"
            }
          ],
          name: "simulate",
          outputs: [
            {
              internalType: "uint256",
              name: "estimate",
              type: "uint256"
            },
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function"
        }
      ]
    };
  }
});

// node_modules/@safe-global/safe-deployments/dist/accessors.js
var require_accessors = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/accessors.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSimulateTxAccessorDeployment = void 0;
    var simulate_tx_accessor_json_1 = __importDefault(require_simulate_tx_accessor());
    var simulate_tx_accessor_json_2 = __importDefault(require_simulate_tx_accessor2());
    var utils_1 = require_utils2();
    var accessorDeployments = [
      simulate_tx_accessor_json_2.default,
      simulate_tx_accessor_json_1.default
    ];
    var getSimulateTxAccessorDeployment = (filter) => {
      return (0, utils_1.findDeployment)(filter, accessorDeployments);
    };
    exports.getSimulateTxAccessorDeployment = getSimulateTxAccessorDeployment;
  }
});

// node_modules/@safe-global/safe-deployments/dist/index.js
var require_dist = __commonJS({
  "node_modules/@safe-global/safe-deployments/dist/index.js"(exports) {
    "use strict";
    init_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_types2(), exports);
    __exportStar(require_safes(), exports);
    __exportStar(require_factories(), exports);
    __exportStar(require_libs(), exports);
    __exportStar(require_handler(), exports);
    __exportStar(require_accessors(), exports);
  }
});

// node_modules/@safe-global/safe-ethers-adapters/dist/src/utils.js
var require_utils3 = __commonJS({
  "node_modules/@safe-global/safe-ethers-adapters/dist/src/utils.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapReceipt = exports.createLibInterface = exports.createLibAddress = exports.createLibDeployment = void 0;
    var abi_1 = (init_lib4(), __toCommonJS(lib_exports4));
    var address_1 = (init_lib3(), __toCommonJS(lib_exports3));
    var safe_deployments_1 = require_dist();
    exports.createLibDeployment = (0, safe_deployments_1.getCreateCallDeployment)();
    exports.createLibAddress = exports.createLibDeployment.defaultAddress;
    exports.createLibInterface = new abi_1.Interface(exports.createLibDeployment.abi);
    var mapStatus = (receipt) => {
      const success = receipt.logs.find((log) => log.topics[0] === "0x442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e");
      return !!success ? 1 : 0;
    };
    var mapContractAddress = (receipt, safeTx) => {
      if (safeTx.to.toLowerCase() === exports.createLibAddress.toLowerCase()) {
        const creationLog = receipt.logs.find((log) => log.topics[0] === "0x4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b511");
        if (creationLog)
          return (0, address_1.getAddress)("0x" + creationLog.data.slice(creationLog.data.length - 40));
      }
      return receipt.contractAddress;
    };
    var mapReceipt = (receipt, safeTx) => {
      receipt.status = mapStatus(receipt);
      receipt.contractAddress = mapContractAddress(receipt, safeTx);
      return receipt;
    };
    exports.mapReceipt = mapReceipt;
  }
});

// node_modules/@safe-global/safe-ethers-adapters/dist/src/signer.js
var require_signer = __commonJS({
  "node_modules/@safe-global/safe-ethers-adapters/dist/src/signer.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SafeEthersSigner = void 0;
    var abstract_signer_1 = (init_lib5(), __toCommonJS(lib_exports5));
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var safe_core_sdk_types_1 = require_src();
    var utils_1 = require_utils3();
    var sleep = (duration) => new Promise((resolve) => setTimeout(resolve, duration));
    var SafeEthersSigner2 = class extends abstract_signer_1.VoidSigner {
      constructor(safe, service, provider, options) {
        super(safe.getAddress(), provider);
        this.service = service;
        this.safe = safe;
        this.options = options;
      }
      async buildTransactionResponse(safeTxHash, safeTx) {
        const connectedSafe = await this.safe;
        const connectedService = this.service;
        return {
          to: safeTx.to,
          value: bignumber_1.BigNumber.from(safeTx.value),
          data: safeTx.data,
          operation: safeTx.operation,
          gasLimit: bignumber_1.BigNumber.from(safeTx.safeTxGas),
          gasPrice: bignumber_1.BigNumber.from(0),
          nonce: safeTx.nonce,
          chainId: await connectedSafe.getChainId(),
          hash: safeTxHash,
          from: this.address,
          confirmations: 0,
          wait: async (confirmations) => {
            var _a, _b;
            while (true) {
              try {
                const txDetails = await connectedService.getSafeTxDetails(safeTxHash);
                if (txDetails.transactionHash) {
                  this._checkProvider("sendTransaction");
                  const receipt = await this.provider.waitForTransaction(txDetails.transactionHash, confirmations);
                  return (0, utils_1.mapReceipt)(receipt, safeTx);
                }
              } catch (e) {
              }
              await sleep((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.pollingDelay) !== null && _b !== void 0 ? _b : 5e3);
            }
          }
        };
      }
      async sendTransaction(transaction) {
        var _a, _b, _c;
        const tx = await transaction;
        let operation = safe_core_sdk_types_1.OperationType.Call;
        let to = await tx.to;
        let data = (_b = (_a = await tx.data) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "0x";
        let value = bignumber_1.BigNumber.from((_c = await tx.value) !== null && _c !== void 0 ? _c : 0);
        if (!to) {
          to = utils_1.createLibAddress;
          data = utils_1.createLibInterface.encodeFunctionData("performCreate", [value, data]);
          value = bignumber_1.BigNumber.from(0);
          operation = safe_core_sdk_types_1.OperationType.DelegateCall;
        }
        const baseTx = {
          to,
          data,
          value: value.toString(),
          operation
        };
        const safeTxGas = await this.service.estimateSafeTx(this.address, baseTx);
        const connectedSafe = await this.safe;
        const safeTransactionData = {
          ...baseTx,
          safeTxGas: safeTxGas.toNumber()
        };
        const safeTx = await connectedSafe.createTransaction({ safeTransactionData });
        const safeTxHash = await connectedSafe.getTransactionHash(safeTx);
        const signature = await connectedSafe.signTransactionHash(safeTxHash);
        await this.service.proposeTx(this.address, safeTxHash, safeTx, signature);
        return this.buildTransactionResponse(safeTxHash, safeTx.data);
      }
    };
    exports.SafeEthersSigner = SafeEthersSigner2;
  }
});

// node_modules/@safe-global/safe-ethers-adapters/dist/src/index.js
var require_src2 = __commonJS({
  "node_modules/@safe-global/safe-ethers-adapters/dist/src/index.js"(exports) {
    "use strict";
    init_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_service(), exports);
    __exportStar(require_signer(), exports);
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/contracts/config.js
var require_config = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/contracts/config.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.safeDeploymentsL1ChainIds = exports.safeDeploymentsVersions = exports.SAFE_BASE_VERSION = exports.SAFE_LAST_VERSION = void 0;
    exports.SAFE_LAST_VERSION = "1.3.0";
    exports.SAFE_BASE_VERSION = "1.0.0";
    exports.safeDeploymentsVersions = {
      "1.3.0": {
        safeMasterCopyVersion: "1.3.0",
        safeMasterCopyL2Version: "1.3.0",
        safeProxyFactoryVersion: "1.3.0",
        compatibilityFallbackHandler: "1.3.0",
        multiSendVersion: "1.3.0",
        multiSendCallOnlyVersion: "1.3.0",
        signMessageLibVersion: "1.3.0",
        createCallVersion: "1.3.0"
      },
      "1.2.0": {
        safeMasterCopyVersion: "1.2.0",
        safeMasterCopyL2Version: void 0,
        safeProxyFactoryVersion: "1.1.1",
        compatibilityFallbackHandler: "1.3.0",
        multiSendVersion: "1.1.1",
        multiSendCallOnlyVersion: "1.3.0",
        signMessageLibVersion: "1.3.0",
        createCallVersion: "1.3.0"
      },
      "1.1.1": {
        safeMasterCopyVersion: "1.1.1",
        safeMasterCopyL2Version: void 0,
        safeProxyFactoryVersion: "1.1.1",
        compatibilityFallbackHandler: "1.3.0",
        multiSendVersion: "1.1.1",
        multiSendCallOnlyVersion: "1.3.0",
        signMessageLibVersion: "1.3.0",
        createCallVersion: "1.3.0"
      },
      "1.0.0": {
        safeMasterCopyVersion: "1.0.0",
        safeMasterCopyL2Version: void 0,
        safeProxyFactoryVersion: "1.0.0",
        compatibilityFallbackHandler: "1.3.0",
        multiSendVersion: "1.1.1",
        multiSendCallOnlyVersion: "1.3.0",
        signMessageLibVersion: "1.3.0",
        createCallVersion: "1.3.0"
      }
    };
    exports.safeDeploymentsL1ChainIds = [
      1
    ];
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/contracts/safeDeploymentContracts.js
var require_safeDeploymentContracts = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/contracts/safeDeploymentContracts.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCreateCallContract = exports.getSignMessageLibContract = exports.getMultiSendCallOnlyContract = exports.getMultiSendContract = exports.getCompatibilityFallbackHandlerContract = exports.getProxyFactoryContract = exports.getSafeContract = exports.getCreateCallContractDeployment = exports.getSignMessageLibContractDeployment = exports.getSafeProxyFactoryContractDeployment = exports.getMultiSendContractDeployment = exports.getMultiSendCallOnlyContractDeployment = exports.getCompatibilityFallbackHandlerContractDeployment = exports.getSafeContractDeployment = void 0;
    var safe_deployments_1 = require_dist();
    var config_1 = require_config();
    function getSafeContractDeployment(safeVersion, chainId, isL1SafeMasterCopy = false) {
      const version = config_1.safeDeploymentsVersions[safeVersion].safeMasterCopyVersion;
      const filters = { version, network: chainId.toString(), released: true };
      if (config_1.safeDeploymentsL1ChainIds.includes(chainId) || isL1SafeMasterCopy) {
        return (0, safe_deployments_1.getSafeSingletonDeployment)(filters);
      }
      return (0, safe_deployments_1.getSafeL2SingletonDeployment)(filters);
    }
    exports.getSafeContractDeployment = getSafeContractDeployment;
    function getCompatibilityFallbackHandlerContractDeployment(safeVersion, chainId) {
      const version = config_1.safeDeploymentsVersions[safeVersion].compatibilityFallbackHandler;
      return (0, safe_deployments_1.getCompatibilityFallbackHandlerDeployment)({
        version,
        network: chainId.toString(),
        released: true
      });
    }
    exports.getCompatibilityFallbackHandlerContractDeployment = getCompatibilityFallbackHandlerContractDeployment;
    function getMultiSendCallOnlyContractDeployment(safeVersion, chainId) {
      const version = config_1.safeDeploymentsVersions[safeVersion].multiSendCallOnlyVersion;
      return (0, safe_deployments_1.getMultiSendCallOnlyDeployment)({ version, network: chainId.toString(), released: true });
    }
    exports.getMultiSendCallOnlyContractDeployment = getMultiSendCallOnlyContractDeployment;
    function getMultiSendContractDeployment(safeVersion, chainId) {
      const version = config_1.safeDeploymentsVersions[safeVersion].multiSendVersion;
      return (0, safe_deployments_1.getMultiSendDeployment)({ version, network: chainId.toString(), released: true });
    }
    exports.getMultiSendContractDeployment = getMultiSendContractDeployment;
    function getSafeProxyFactoryContractDeployment(safeVersion, chainId) {
      const version = config_1.safeDeploymentsVersions[safeVersion].safeProxyFactoryVersion;
      return (0, safe_deployments_1.getProxyFactoryDeployment)({ version, network: chainId.toString(), released: true });
    }
    exports.getSafeProxyFactoryContractDeployment = getSafeProxyFactoryContractDeployment;
    function getSignMessageLibContractDeployment(safeVersion, chainId) {
      const version = config_1.safeDeploymentsVersions[safeVersion].signMessageLibVersion;
      return (0, safe_deployments_1.getSignMessageLibDeployment)({ version, network: chainId.toString(), released: true });
    }
    exports.getSignMessageLibContractDeployment = getSignMessageLibContractDeployment;
    function getCreateCallContractDeployment(safeVersion, chainId) {
      const version = config_1.safeDeploymentsVersions[safeVersion].createCallVersion;
      return (0, safe_deployments_1.getCreateCallDeployment)({ version, network: chainId.toString(), released: true });
    }
    exports.getCreateCallContractDeployment = getCreateCallContractDeployment;
    async function getSafeContract({ ethAdapter, safeVersion, chainId, customSafeAddress, isL1SafeMasterCopy, customContracts }) {
      const singletonDeployment = getSafeContractDeployment(safeVersion, chainId, isL1SafeMasterCopy);
      const gnosisSafeContract = ethAdapter.getSafeContract({
        safeVersion,
        chainId,
        singletonDeployment,
        customContractAddress: customSafeAddress !== null && customSafeAddress !== void 0 ? customSafeAddress : customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeMasterCopyAddress,
        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeMasterCopyAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(gnosisSafeContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("SafeProxy contract is not deployed on the current network");
      }
      return gnosisSafeContract;
    }
    exports.getSafeContract = getSafeContract;
    async function getProxyFactoryContract({ ethAdapter, safeVersion, chainId, customContracts }) {
      const proxyFactoryDeployment = getSafeProxyFactoryContractDeployment(safeVersion, chainId);
      const safeProxyFactoryContract = await ethAdapter.getSafeProxyFactoryContract({
        safeVersion,
        chainId,
        singletonDeployment: proxyFactoryDeployment,
        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeProxyFactoryAddress,
        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeProxyFactoryAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(safeProxyFactoryContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("SafeProxyFactory contract is not deployed on the current network");
      }
      return safeProxyFactoryContract;
    }
    exports.getProxyFactoryContract = getProxyFactoryContract;
    async function getCompatibilityFallbackHandlerContract({ ethAdapter, safeVersion, chainId, customContracts }) {
      const fallbackHandlerDeployment = getCompatibilityFallbackHandlerContractDeployment(safeVersion, chainId);
      const fallbackHandlerContract = await ethAdapter.getCompatibilityFallbackHandlerContract({
        safeVersion,
        chainId,
        singletonDeployment: fallbackHandlerDeployment,
        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.fallbackHandlerAddress,
        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.fallbackHandlerAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(fallbackHandlerContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("CompatibilityFallbackHandler contract is not deployed on the current network");
      }
      return fallbackHandlerContract;
    }
    exports.getCompatibilityFallbackHandlerContract = getCompatibilityFallbackHandlerContract;
    async function getMultiSendContract({ ethAdapter, safeVersion, chainId, customContracts }) {
      const multiSendDeployment = getMultiSendContractDeployment(safeVersion, chainId);
      const multiSendContract = await ethAdapter.getMultiSendContract({
        safeVersion,
        chainId,
        singletonDeployment: multiSendDeployment,
        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendAddress,
        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(multiSendContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("MultiSend contract is not deployed on the current network");
      }
      return multiSendContract;
    }
    exports.getMultiSendContract = getMultiSendContract;
    async function getMultiSendCallOnlyContract({ ethAdapter, safeVersion, chainId, customContracts }) {
      const multiSendCallOnlyDeployment = getMultiSendCallOnlyContractDeployment(safeVersion, chainId);
      const multiSendCallOnlyContract = await ethAdapter.getMultiSendCallOnlyContract({
        safeVersion,
        chainId,
        singletonDeployment: multiSendCallOnlyDeployment,
        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendCallOnlyAddress,
        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendCallOnlyAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(multiSendCallOnlyContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("MultiSendCallOnly contract is not deployed on the current network");
      }
      return multiSendCallOnlyContract;
    }
    exports.getMultiSendCallOnlyContract = getMultiSendCallOnlyContract;
    async function getSignMessageLibContract({ ethAdapter, safeVersion, chainId, customContracts }) {
      const signMessageLibDeployment = getSignMessageLibContractDeployment(safeVersion, chainId);
      const signMessageLibContract = await ethAdapter.getSignMessageLibContract({
        safeVersion,
        chainId,
        singletonDeployment: signMessageLibDeployment,
        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.signMessageLibAddress,
        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.signMessageLibAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(signMessageLibContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("SignMessageLib contract is not deployed on the current network");
      }
      return signMessageLibContract;
    }
    exports.getSignMessageLibContract = getSignMessageLibContract;
    async function getCreateCallContract({ ethAdapter, safeVersion, chainId, customContracts }) {
      const createCallDeployment = getCreateCallContractDeployment(safeVersion, chainId);
      const createCallContract = await ethAdapter.getCreateCallContract({
        safeVersion,
        chainId,
        singletonDeployment: createCallDeployment,
        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.createCallAddress,
        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.createCallAbi
      });
      const isContractDeployed = await ethAdapter.isContractDeployed(createCallContract.getAddress());
      if (!isContractDeployed) {
        throw new Error("CreateCall contract is not deployed on the current network");
      }
      return createCallContract;
    }
    exports.getCreateCallContract = getCreateCallContract;
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/managers/contractManager.js
var require_contractManager = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/managers/contractManager.js"(exports) {
    "use strict";
    init_shim();
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _ContractManager_contractNetworks;
    var _ContractManager_isL1SafeMasterCopy;
    var _ContractManager_safeContract;
    var _ContractManager_multiSendContract;
    var _ContractManager_multiSendCallOnlyContract;
    Object.defineProperty(exports, "__esModule", { value: true });
    var config_1 = require_config();
    var safeDeploymentContracts_1 = require_safeDeploymentContracts();
    var ContractManager = class {
      constructor() {
        _ContractManager_contractNetworks.set(this, void 0);
        _ContractManager_isL1SafeMasterCopy.set(this, void 0);
        _ContractManager_safeContract.set(this, void 0);
        _ContractManager_multiSendContract.set(this, void 0);
        _ContractManager_multiSendCallOnlyContract.set(this, void 0);
      }
      static async create({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {
        const contractManager = new ContractManager();
        await contractManager.init({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks });
        return contractManager;
      }
      async init({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {
        const chainId = await ethAdapter.getChainId();
        const customContracts = contractNetworks === null || contractNetworks === void 0 ? void 0 : contractNetworks[chainId];
        __classPrivateFieldSet(this, _ContractManager_contractNetworks, contractNetworks, "f");
        __classPrivateFieldSet(this, _ContractManager_isL1SafeMasterCopy, isL1SafeMasterCopy, "f");
        const temporarySafeContract = await (0, safeDeploymentContracts_1.getSafeContract)({
          ethAdapter,
          safeVersion: config_1.SAFE_LAST_VERSION,
          chainId,
          isL1SafeMasterCopy,
          customSafeAddress: safeAddress,
          customContracts
        });
        const safeVersion = await temporarySafeContract.getVersion();
        __classPrivateFieldSet(this, _ContractManager_safeContract, await (0, safeDeploymentContracts_1.getSafeContract)({
          ethAdapter,
          safeVersion,
          chainId,
          isL1SafeMasterCopy,
          customSafeAddress: safeAddress,
          customContracts
        }), "f");
        __classPrivateFieldSet(this, _ContractManager_multiSendContract, await (0, safeDeploymentContracts_1.getMultiSendContract)({
          ethAdapter,
          safeVersion,
          chainId,
          customContracts
        }), "f");
        __classPrivateFieldSet(this, _ContractManager_multiSendCallOnlyContract, await (0, safeDeploymentContracts_1.getMultiSendCallOnlyContract)({
          ethAdapter,
          safeVersion,
          chainId,
          customContracts
        }), "f");
      }
      get contractNetworks() {
        return __classPrivateFieldGet(this, _ContractManager_contractNetworks, "f");
      }
      get isL1SafeMasterCopy() {
        return __classPrivateFieldGet(this, _ContractManager_isL1SafeMasterCopy, "f");
      }
      get safeContract() {
        return __classPrivateFieldGet(this, _ContractManager_safeContract, "f");
      }
      get multiSendContract() {
        return __classPrivateFieldGet(this, _ContractManager_multiSendContract, "f");
      }
      get multiSendCallOnlyContract() {
        return __classPrivateFieldGet(this, _ContractManager_multiSendCallOnlyContract, "f");
      }
    };
    _ContractManager_contractNetworks = /* @__PURE__ */ new WeakMap(), _ContractManager_isL1SafeMasterCopy = /* @__PURE__ */ new WeakMap(), _ContractManager_safeContract = /* @__PURE__ */ new WeakMap(), _ContractManager_multiSendContract = /* @__PURE__ */ new WeakMap(), _ContractManager_multiSendCallOnlyContract = /* @__PURE__ */ new WeakMap();
    exports.default = ContractManager;
  }
});

// node_modules/ethjs-unit/node_modules/bn.js/lib/bn.js
var require_bn2 = __commonJS({
  "node_modules/ethjs-unit/node_modules/bn.js/lib/bn.js"(exports, module) {
    init_shim();
    (function(module2, exports2) {
      "use strict";
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer;
      try {
        Buffer = require_buffer().Buffer;
      } catch (e) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
        }
        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }
        if (number[0] === "-") {
          this.negative = 1;
        }
        this.strip();
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex(str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r <<= 4;
          if (c >= 49 && c <= 54) {
            r |= c - 49 + 10;
          } else if (c >= 17 && c <= 22) {
            r |= c - 17 + 10;
          } else {
            r |= c & 15;
          }
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            r += c - 49 + 10;
          } else if (c >= 17) {
            r += c - 17 + 10;
          } else {
            r += c;
          }
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
      };
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          r.strip();
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name])
          return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN(1);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/number-to-bn/node_modules/bn.js/lib/bn.js
var require_bn3 = __commonJS({
  "node_modules/number-to-bn/node_modules/bn.js/lib/bn.js"(exports, module) {
    init_shim();
    (function(module2, exports2) {
      "use strict";
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer;
      try {
        Buffer = require_buffer().Buffer;
      } catch (e) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
        }
        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }
        if (number[0] === "-") {
          this.negative = 1;
        }
        this.strip();
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex(str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r <<= 4;
          if (c >= 49 && c <= 54) {
            r |= c - 49 + 10;
          } else if (c >= 17 && c <= 22) {
            r |= c - 17 + 10;
          } else {
            r |= c & 15;
          }
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            r += c - 49 + 10;
          } else if (c >= 17) {
            r += c - 17 + 10;
          } else {
            r += c;
          }
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
      };
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          r.strip();
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name])
          return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN(1);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/is-hex-prefixed/src/index.js
var require_src3 = __commonJS({
  "node_modules/is-hex-prefixed/src/index.js"(exports, module) {
    init_shim();
    module.exports = function isHexPrefixed(str) {
      if (typeof str !== "string") {
        throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + typeof str + ", while checking isHexPrefixed.");
      }
      return str.slice(0, 2) === "0x";
    };
  }
});

// node_modules/strip-hex-prefix/src/index.js
var require_src4 = __commonJS({
  "node_modules/strip-hex-prefix/src/index.js"(exports, module) {
    init_shim();
    var isHexPrefixed = require_src3();
    module.exports = function stripHexPrefix(str) {
      if (typeof str !== "string") {
        return str;
      }
      return isHexPrefixed(str) ? str.slice(2) : str;
    };
  }
});

// node_modules/number-to-bn/src/index.js
var require_src5 = __commonJS({
  "node_modules/number-to-bn/src/index.js"(exports, module) {
    init_shim();
    var BN = require_bn3();
    var stripHexPrefix = require_src4();
    module.exports = function numberToBN(arg) {
      if (typeof arg === "string" || typeof arg === "number") {
        var multiplier = new BN(1);
        var formattedString = String(arg).toLowerCase().trim();
        var isHexPrefixed = formattedString.substr(0, 2) === "0x" || formattedString.substr(0, 3) === "-0x";
        var stringArg = stripHexPrefix(formattedString);
        if (stringArg.substr(0, 1) === "-") {
          stringArg = stripHexPrefix(stringArg.slice(1));
          multiplier = new BN(-1, 10);
        }
        stringArg = stringArg === "" ? "0" : stringArg;
        if (!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/) || stringArg.match(/^[a-fA-F]+$/) || isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/)) {
          return new BN(stringArg, 16).mul(multiplier);
        }
        if ((stringArg.match(/^-?[0-9]+$/) || stringArg === "") && isHexPrefixed === false) {
          return new BN(stringArg, 10).mul(multiplier);
        }
      } else if (typeof arg === "object" && arg.toString && (!arg.pop && !arg.push)) {
        if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {
          return new BN(arg.toString(10), 10);
        }
      }
      throw new Error("[number-to-bn] while converting number " + JSON.stringify(arg) + " to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.");
    };
  }
});

// node_modules/ethjs-unit/lib/index.js
var require_lib = __commonJS({
  "node_modules/ethjs-unit/lib/index.js"(exports, module) {
    "use strict";
    init_shim();
    var BN = require_bn2();
    var numberToBN = require_src5();
    var zero = new BN(0);
    var negative1 = new BN(-1);
    var unitMap = {
      "noether": "0",
      "wei": "1",
      "kwei": "1000",
      "Kwei": "1000",
      "babbage": "1000",
      "femtoether": "1000",
      "mwei": "1000000",
      "Mwei": "1000000",
      "lovelace": "1000000",
      "picoether": "1000000",
      "gwei": "1000000000",
      "Gwei": "1000000000",
      "shannon": "1000000000",
      "nanoether": "1000000000",
      "nano": "1000000000",
      "szabo": "1000000000000",
      "microether": "1000000000000",
      "micro": "1000000000000",
      "finney": "1000000000000000",
      "milliether": "1000000000000000",
      "milli": "1000000000000000",
      "ether": "1000000000000000000",
      "kether": "1000000000000000000000",
      "grand": "1000000000000000000000",
      "mether": "1000000000000000000000000",
      "gether": "1000000000000000000000000000",
      "tether": "1000000000000000000000000000000"
    };
    function getValueOfUnit(unitInput) {
      var unit = unitInput ? unitInput.toLowerCase() : "ether";
      var unitValue = unitMap[unit];
      if (typeof unitValue !== "string") {
        throw new Error("[ethjs-unit] the unit provided " + unitInput + " doesn't exists, please use the one of the following units " + JSON.stringify(unitMap, null, 2));
      }
      return new BN(unitValue, 10);
    }
    function numberToString(arg) {
      if (typeof arg === "string") {
        if (!arg.match(/^-?[0-9.]+$/)) {
          throw new Error("while converting number to string, invalid number value '" + arg + "', should be a number matching (^-?[0-9.]+).");
        }
        return arg;
      } else if (typeof arg === "number") {
        return String(arg);
      } else if (typeof arg === "object" && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {
        if (arg.toPrecision) {
          return String(arg.toPrecision());
        } else {
          return arg.toString(10);
        }
      }
      throw new Error("while converting number to string, invalid number value '" + arg + "' type " + typeof arg + ".");
    }
    function fromWei(weiInput, unit, optionsInput) {
      var wei = numberToBN(weiInput);
      var negative = wei.lt(zero);
      var base = getValueOfUnit(unit);
      var baseLength = unitMap[unit].length - 1 || 1;
      var options = optionsInput || {};
      if (negative) {
        wei = wei.mul(negative1);
      }
      var fraction = wei.mod(base).toString(10);
      while (fraction.length < baseLength) {
        fraction = "0" + fraction;
      }
      if (!options.pad) {
        fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
      }
      var whole = wei.div(base).toString(10);
      if (options.commify) {
        whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      }
      var value = "" + whole + (fraction == "0" ? "" : "." + fraction);
      if (negative) {
        value = "-" + value;
      }
      return value;
    }
    function toWei(etherInput, unit) {
      var ether = numberToString(etherInput);
      var base = getValueOfUnit(unit);
      var baseLength = unitMap[unit].length - 1 || 1;
      var negative = ether.substring(0, 1) === "-";
      if (negative) {
        ether = ether.substring(1);
      }
      if (ether === ".") {
        throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei, invalid value");
      }
      var comps = ether.split(".");
      if (comps.length > 2) {
        throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei,  too many decimal points");
      }
      var whole = comps[0], fraction = comps[1];
      if (!whole) {
        whole = "0";
      }
      if (!fraction) {
        fraction = "0";
      }
      if (fraction.length > baseLength) {
        throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei, too many decimal places");
      }
      while (fraction.length < baseLength) {
        fraction += "0";
      }
      whole = new BN(whole);
      fraction = new BN(fraction);
      var wei = whole.mul(base).add(fraction);
      if (negative) {
        wei = wei.mul(negative1);
      }
      return new BN(wei.toString(10), 10);
    }
    module.exports = {
      unitMap,
      numberToString,
      getValueOfUnit,
      fromWei,
      toWei
    };
  }
});

// node_modules/utf8/utf8.js
var require_utf8 = __commonJS({
  "node_modules/utf8/utf8.js"(exports) {
    init_shim();
    (function(root) {
      var stringFromCharCode = String.fromCharCode;
      function ucs2decode(string) {
        var output = [];
        var counter = 0;
        var length = string.length;
        var value;
        var extra;
        while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function ucs2encode(array) {
        var length = array.length;
        var index = -1;
        var value;
        var output = "";
        while (++index < length) {
          value = array[index];
          if (value > 65535) {
            value -= 65536;
            output += stringFromCharCode(value >>> 10 & 1023 | 55296);
            value = 56320 | value & 1023;
          }
          output += stringFromCharCode(value);
        }
        return output;
      }
      function checkScalarValue(codePoint) {
        if (codePoint >= 55296 && codePoint <= 57343) {
          throw Error(
            "Lone surrogate U+" + codePoint.toString(16).toUpperCase() + " is not a scalar value"
          );
        }
      }
      function createByte(codePoint, shift) {
        return stringFromCharCode(codePoint >> shift & 63 | 128);
      }
      function encodeCodePoint(codePoint) {
        if ((codePoint & 4294967168) == 0) {
          return stringFromCharCode(codePoint);
        }
        var symbol = "";
        if ((codePoint & 4294965248) == 0) {
          symbol = stringFromCharCode(codePoint >> 6 & 31 | 192);
        } else if ((codePoint & 4294901760) == 0) {
          checkScalarValue(codePoint);
          symbol = stringFromCharCode(codePoint >> 12 & 15 | 224);
          symbol += createByte(codePoint, 6);
        } else if ((codePoint & 4292870144) == 0) {
          symbol = stringFromCharCode(codePoint >> 18 & 7 | 240);
          symbol += createByte(codePoint, 12);
          symbol += createByte(codePoint, 6);
        }
        symbol += stringFromCharCode(codePoint & 63 | 128);
        return symbol;
      }
      function utf8encode(string) {
        var codePoints = ucs2decode(string);
        var length = codePoints.length;
        var index = -1;
        var codePoint;
        var byteString = "";
        while (++index < length) {
          codePoint = codePoints[index];
          byteString += encodeCodePoint(codePoint);
        }
        return byteString;
      }
      function readContinuationByte() {
        if (byteIndex >= byteCount) {
          throw Error("Invalid byte index");
        }
        var continuationByte = byteArray[byteIndex] & 255;
        byteIndex++;
        if ((continuationByte & 192) == 128) {
          return continuationByte & 63;
        }
        throw Error("Invalid continuation byte");
      }
      function decodeSymbol() {
        var byte1;
        var byte2;
        var byte3;
        var byte4;
        var codePoint;
        if (byteIndex > byteCount) {
          throw Error("Invalid byte index");
        }
        if (byteIndex == byteCount) {
          return false;
        }
        byte1 = byteArray[byteIndex] & 255;
        byteIndex++;
        if ((byte1 & 128) == 0) {
          return byte1;
        }
        if ((byte1 & 224) == 192) {
          byte2 = readContinuationByte();
          codePoint = (byte1 & 31) << 6 | byte2;
          if (codePoint >= 128) {
            return codePoint;
          } else {
            throw Error("Invalid continuation byte");
          }
        }
        if ((byte1 & 240) == 224) {
          byte2 = readContinuationByte();
          byte3 = readContinuationByte();
          codePoint = (byte1 & 15) << 12 | byte2 << 6 | byte3;
          if (codePoint >= 2048) {
            checkScalarValue(codePoint);
            return codePoint;
          } else {
            throw Error("Invalid continuation byte");
          }
        }
        if ((byte1 & 248) == 240) {
          byte2 = readContinuationByte();
          byte3 = readContinuationByte();
          byte4 = readContinuationByte();
          codePoint = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
          if (codePoint >= 65536 && codePoint <= 1114111) {
            return codePoint;
          }
        }
        throw Error("Invalid UTF-8 detected");
      }
      var byteArray;
      var byteCount;
      var byteIndex;
      function utf8decode(byteString) {
        byteArray = ucs2decode(byteString);
        byteCount = byteArray.length;
        byteIndex = 0;
        var codePoints = [];
        var tmp;
        while ((tmp = decodeSymbol()) !== false) {
          codePoints.push(tmp);
        }
        return ucs2encode(codePoints);
      }
      root.version = "3.0.0";
      root.encode = utf8encode;
      root.decode = utf8decode;
    })(typeof exports === "undefined" ? exports.utf8 = {} : exports);
  }
});

// node_modules/rlp/dist.browser/index.js
var require_dist2 = __commonJS({
  "node_modules/rlp/dist.browser/index.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLength = exports.decode = exports.encode = void 0;
    var bn_js_1 = __importDefault(require_bn());
    function encode(input) {
      if (Array.isArray(input)) {
        var output = [];
        for (var i = 0; i < input.length; i++) {
          output.push(encode(input[i]));
        }
        var buf = import_buffer.Buffer.concat(output);
        return import_buffer.Buffer.concat([encodeLength(buf.length, 192), buf]);
      } else {
        var inputBuf = toBuffer(input);
        return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : import_buffer.Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
      }
    }
    exports.encode = encode;
    function safeParseInt(v, base) {
      if (v[0] === "0" && v[1] === "0") {
        throw new Error("invalid RLP: extra zeros");
      }
      return parseInt(v, base);
    }
    function encodeLength(len, offset) {
      if (len < 56) {
        return import_buffer.Buffer.from([len + offset]);
      } else {
        var hexLength = intToHex(len);
        var lLength = hexLength.length / 2;
        var firstByte = intToHex(offset + 55 + lLength);
        return import_buffer.Buffer.from(firstByte + hexLength, "hex");
      }
    }
    function decode(input, stream) {
      if (stream === void 0) {
        stream = false;
      }
      if (!input || input.length === 0) {
        return import_buffer.Buffer.from([]);
      }
      var inputBuffer = toBuffer(input);
      var decoded = _decode(inputBuffer);
      if (stream) {
        return decoded;
      }
      if (decoded.remainder.length !== 0) {
        throw new Error("invalid remainder");
      }
      return decoded.data;
    }
    exports.decode = decode;
    function getLength(input) {
      if (!input || input.length === 0) {
        return import_buffer.Buffer.from([]);
      }
      var inputBuffer = toBuffer(input);
      var firstByte = inputBuffer[0];
      if (firstByte <= 127) {
        return inputBuffer.length;
      } else if (firstByte <= 183) {
        return firstByte - 127;
      } else if (firstByte <= 191) {
        return firstByte - 182;
      } else if (firstByte <= 247) {
        return firstByte - 191;
      } else {
        var llength = firstByte - 246;
        var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString("hex"), 16);
        return llength + length_1;
      }
    }
    exports.getLength = getLength;
    function _decode(input) {
      var length, llength, data, innerRemainder, d;
      var decoded = [];
      var firstByte = input[0];
      if (firstByte <= 127) {
        return {
          data: input.slice(0, 1),
          remainder: input.slice(1)
        };
      } else if (firstByte <= 183) {
        length = firstByte - 127;
        if (firstByte === 128) {
          data = import_buffer.Buffer.from([]);
        } else {
          data = input.slice(1, length);
        }
        if (length === 2 && data[0] < 128) {
          throw new Error("invalid rlp encoding: byte must be less 0x80");
        }
        return {
          data,
          remainder: input.slice(length)
        };
      } else if (firstByte <= 191) {
        llength = firstByte - 182;
        if (input.length - 1 < llength) {
          throw new Error("invalid RLP: not enough bytes for string length");
        }
        length = safeParseInt(input.slice(1, llength).toString("hex"), 16);
        if (length <= 55) {
          throw new Error("invalid RLP: expected string length to be greater than 55");
        }
        data = input.slice(llength, length + llength);
        if (data.length < length) {
          throw new Error("invalid RLP: not enough bytes for string");
        }
        return {
          data,
          remainder: input.slice(length + llength)
        };
      } else if (firstByte <= 247) {
        length = firstByte - 191;
        innerRemainder = input.slice(1, length);
        while (innerRemainder.length) {
          d = _decode(innerRemainder);
          decoded.push(d.data);
          innerRemainder = d.remainder;
        }
        return {
          data: decoded,
          remainder: input.slice(length)
        };
      } else {
        llength = firstByte - 246;
        length = safeParseInt(input.slice(1, llength).toString("hex"), 16);
        var totalLength = llength + length;
        if (totalLength > input.length) {
          throw new Error("invalid rlp: total length is larger than the data");
        }
        innerRemainder = input.slice(llength, totalLength);
        if (innerRemainder.length === 0) {
          throw new Error("invalid rlp, List has a invalid length");
        }
        while (innerRemainder.length) {
          d = _decode(innerRemainder);
          decoded.push(d.data);
          innerRemainder = d.remainder;
        }
        return {
          data: decoded,
          remainder: input.slice(totalLength)
        };
      }
    }
    function isHexPrefixed(str) {
      return str.slice(0, 2) === "0x";
    }
    function stripHexPrefix(str) {
      if (typeof str !== "string") {
        return str;
      }
      return isHexPrefixed(str) ? str.slice(2) : str;
    }
    function intToHex(integer) {
      if (integer < 0) {
        throw new Error("Invalid integer as argument, must be unsigned!");
      }
      var hex = integer.toString(16);
      return hex.length % 2 ? "0" + hex : hex;
    }
    function padToEven(a) {
      return a.length % 2 ? "0" + a : a;
    }
    function intToBuffer(integer) {
      var hex = intToHex(integer);
      return import_buffer.Buffer.from(hex, "hex");
    }
    function toBuffer(v) {
      if (!import_buffer.Buffer.isBuffer(v)) {
        if (typeof v === "string") {
          if (isHexPrefixed(v)) {
            return import_buffer.Buffer.from(padToEven(stripHexPrefix(v)), "hex");
          } else {
            return import_buffer.Buffer.from(v);
          }
        } else if (typeof v === "number" || typeof v === "bigint") {
          if (!v) {
            return import_buffer.Buffer.from([]);
          } else {
            return intToBuffer(v);
          }
        } else if (v === null || v === void 0) {
          return import_buffer.Buffer.from([]);
        } else if (v instanceof Uint8Array) {
          return import_buffer.Buffer.from(v);
        } else if (bn_js_1.default.isBN(v)) {
          return import_buffer.Buffer.from(v.toArray());
        } else {
          throw new Error("invalid type");
        }
      }
      return v;
    }
  }
});

// node_modules/ethereumjs-util/dist.browser/externals.js
var require_externals = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/externals.js"(exports) {
    "use strict";
    init_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.rlp = exports.BN = void 0;
    var bn_js_1 = __importDefault(require_bn());
    exports.BN = bn_js_1.default;
    var rlp = __importStar(require_dist2());
    exports.rlp = rlp;
  }
});

// node_modules/ethereumjs-util/dist.browser/constants.js
var require_constants = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/constants.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = exports.MAX_UINT64 = void 0;
    var buffer_1 = require_buffer();
    var externals_1 = require_externals();
    exports.MAX_UINT64 = new externals_1.BN("ffffffffffffffff", 16);
    exports.MAX_INTEGER = new externals_1.BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16);
    exports.TWO_POW256 = new externals_1.BN("10000000000000000000000000000000000000000000000000000000000000000", 16);
    exports.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    exports.KECCAK256_NULL = buffer_1.Buffer.from(exports.KECCAK256_NULL_S, "hex");
    exports.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347";
    exports.KECCAK256_RLP_ARRAY = buffer_1.Buffer.from(exports.KECCAK256_RLP_ARRAY_S, "hex");
    exports.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421";
    exports.KECCAK256_RLP = buffer_1.Buffer.from(exports.KECCAK256_RLP_S, "hex");
  }
});

// node_modules/assert/build/internal/errors.js
var require_errors = __commonJS({
  "node_modules/assert/build/internal/errors.js"(exports, module) {
    "use strict";
    init_shim();
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    var codes = {};
    var assert;
    var util;
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = function(_Base) {
        _inherits(NodeError2, _Base);
        function NodeError2(arg1, arg2, arg3) {
          var _this;
          _classCallCheck(this, NodeError2);
          _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeError2).call(this, getMessage(arg1, arg2, arg3)));
          _this.code = code;
          return _this;
        }
        return NodeError2;
      }(Base);
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
          return String(i);
        });
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      if (assert === void 0)
        assert = require_assert();
      assert(typeof name === "string", "'name' must be a string");
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith(name, " argument")) {
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      } else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      }
      msg += ". Received type ".concat(_typeof(actual));
      return msg;
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_VALUE", function(name, value) {
      var reason = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "is invalid";
      if (util === void 0)
        util = require_util();
      var inspected = util.inspect(value);
      if (inspected.length > 128) {
        inspected = "".concat(inspected.slice(0, 128), "...");
      }
      return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
    }, TypeError, RangeError);
    createErrorType("ERR_INVALID_RETURN_VALUE", function(input, name, value) {
      var type;
      if (value && value.constructor && value.constructor.name) {
        type = "instance of ".concat(value.constructor.name);
      } else {
        type = "type ".concat(_typeof(value));
      }
      return "Expected ".concat(input, ' to be returned from the "').concat(name, '"') + " function but got ".concat(type, ".");
    }, TypeError);
    createErrorType("ERR_MISSING_ARGS", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (assert === void 0)
        assert = require_assert();
      assert(args.length > 0, "At least one arg needs to be specified");
      var msg = "The ";
      var len = args.length;
      args = args.map(function(a) {
        return '"'.concat(a, '"');
      });
      switch (len) {
        case 1:
          msg += "".concat(args[0], " argument");
          break;
        case 2:
          msg += "".concat(args[0], " and ").concat(args[1], " arguments");
          break;
        default:
          msg += args.slice(0, len - 1).join(", ");
          msg += ", and ".concat(args[len - 1], " arguments");
          break;
      }
      return "".concat(msg, " must be specified");
    }, TypeError);
    module.exports.codes = codes;
  }
});

// node_modules/assert/build/internal/assert/assertion_error.js
var require_assertion_error = __commonJS({
  "node_modules/assert/build/internal/assert/assertion_error.js"(exports, module) {
    "use strict";
    init_shim();
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          _defineProperty2(target, key, source[key]);
        });
      }
      return target;
    }
    function _defineProperty2(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
      _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !_isNativeFunction(Class2))
          return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2))
            return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
        return _setPrototypeOf(Wrapper, Class2);
      };
      return _wrapNativeSuper(Class);
    }
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _construct(Parent, args, Class) {
      if (isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        _construct = function _construct2(Parent2, args2, Class2) {
          var a = [null];
          a.push.apply(a, args2);
          var Constructor = Function.bind.apply(Parent2, a);
          var instance = new Constructor();
          if (Class2)
            _setPrototypeOf(instance, Class2.prototype);
          return instance;
        };
      }
      return _construct.apply(null, arguments);
    }
    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var _require = require_util();
    var inspect = _require.inspect;
    var _require2 = require_errors();
    var ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE;
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function repeat(str, count) {
      count = Math.floor(count);
      if (str.length == 0 || count == 0)
        return "";
      var maxCount = str.length * count;
      count = Math.floor(Math.log(count) / Math.log(2));
      while (count) {
        str += str;
        count--;
      }
      str += str.substring(0, maxCount - str.length);
      return str;
    }
    var blue = "";
    var green = "";
    var red = "";
    var white = "";
    var kReadableOperator = {
      deepStrictEqual: "Expected values to be strictly deep-equal:",
      strictEqual: "Expected values to be strictly equal:",
      strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
      deepEqual: "Expected values to be loosely deep-equal:",
      equal: "Expected values to be loosely equal:",
      notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
      notStrictEqual: 'Expected "actual" to be strictly unequal to:',
      notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
      notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
      notEqual: 'Expected "actual" to be loosely unequal to:',
      notIdentical: "Values identical but not reference-equal:"
    };
    var kMaxShortLength = 10;
    function copyError(source) {
      var keys = Object.keys(source);
      var target = Object.create(Object.getPrototypeOf(source));
      keys.forEach(function(key) {
        target[key] = source[key];
      });
      Object.defineProperty(target, "message", {
        value: source.message
      });
      return target;
    }
    function inspectValue(val) {
      return inspect(val, {
        compact: false,
        customInspect: false,
        depth: 1e3,
        maxArrayLength: Infinity,
        showHidden: false,
        breakLength: Infinity,
        showProxy: false,
        sorted: true,
        getters: true
      });
    }
    function createErrDiff(actual, expected, operator) {
      var other = "";
      var res = "";
      var lastPos = 0;
      var end = "";
      var skipped = false;
      var actualInspected = inspectValue(actual);
      var actualLines = actualInspected.split("\n");
      var expectedLines = inspectValue(expected).split("\n");
      var i = 0;
      var indicator = "";
      if (operator === "strictEqual" && _typeof(actual) === "object" && _typeof(expected) === "object" && actual !== null && expected !== null) {
        operator = "strictEqualObject";
      }
      if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
        var inputLength = actualLines[0].length + expectedLines[0].length;
        if (inputLength <= kMaxShortLength) {
          if ((_typeof(actual) !== "object" || actual === null) && (_typeof(expected) !== "object" || expected === null) && (actual !== 0 || expected !== 0)) {
            return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
          }
        } else if (operator !== "strictEqualObject") {
          var maxLength = import_process.default.stderr && import_process.default.stderr.isTTY ? import_process.default.stderr.columns : 80;
          if (inputLength < maxLength) {
            while (actualLines[0][i] === expectedLines[0][i]) {
              i++;
            }
            if (i > 2) {
              indicator = "\n  ".concat(repeat(" ", i), "^");
              i = 0;
            }
          }
        }
      }
      var a = actualLines[actualLines.length - 1];
      var b = expectedLines[expectedLines.length - 1];
      while (a === b) {
        if (i++ < 2) {
          end = "\n  ".concat(a).concat(end);
        } else {
          other = a;
        }
        actualLines.pop();
        expectedLines.pop();
        if (actualLines.length === 0 || expectedLines.length === 0)
          break;
        a = actualLines[actualLines.length - 1];
        b = expectedLines[expectedLines.length - 1];
      }
      var maxLines = Math.max(actualLines.length, expectedLines.length);
      if (maxLines === 0) {
        var _actualLines = actualInspected.split("\n");
        if (_actualLines.length > 30) {
          _actualLines[26] = "".concat(blue, "...").concat(white);
          while (_actualLines.length > 27) {
            _actualLines.pop();
          }
        }
        return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join("\n"), "\n");
      }
      if (i > 3) {
        end = "\n".concat(blue, "...").concat(white).concat(end);
        skipped = true;
      }
      if (other !== "") {
        end = "\n  ".concat(other).concat(end);
        other = "";
      }
      var printedLines = 0;
      var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
      var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
      for (i = 0; i < maxLines; i++) {
        var cur = i - lastPos;
        if (actualLines.length < i + 1) {
          if (cur > 1 && i > 2) {
            if (cur > 4) {
              res += "\n".concat(blue, "...").concat(white);
              skipped = true;
            } else if (cur > 3) {
              res += "\n  ".concat(expectedLines[i - 2]);
              printedLines++;
            }
            res += "\n  ".concat(expectedLines[i - 1]);
            printedLines++;
          }
          lastPos = i;
          other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
          printedLines++;
        } else if (expectedLines.length < i + 1) {
          if (cur > 1 && i > 2) {
            if (cur > 4) {
              res += "\n".concat(blue, "...").concat(white);
              skipped = true;
            } else if (cur > 3) {
              res += "\n  ".concat(actualLines[i - 2]);
              printedLines++;
            }
            res += "\n  ".concat(actualLines[i - 1]);
            printedLines++;
          }
          lastPos = i;
          res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
          printedLines++;
        } else {
          var expectedLine = expectedLines[i];
          var actualLine = actualLines[i];
          var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ",") || actualLine.slice(0, -1) !== expectedLine);
          if (divergingLines && endsWith(expectedLine, ",") && expectedLine.slice(0, -1) === actualLine) {
            divergingLines = false;
            actualLine += ",";
          }
          if (divergingLines) {
            if (cur > 1 && i > 2) {
              if (cur > 4) {
                res += "\n".concat(blue, "...").concat(white);
                skipped = true;
              } else if (cur > 3) {
                res += "\n  ".concat(actualLines[i - 2]);
                printedLines++;
              }
              res += "\n  ".concat(actualLines[i - 1]);
              printedLines++;
            }
            lastPos = i;
            res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
            other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
            printedLines += 2;
          } else {
            res += other;
            other = "";
            if (cur === 1 || i === 0) {
              res += "\n  ".concat(actualLine);
              printedLines++;
            }
          }
        }
        if (printedLines > 20 && i < maxLines - 2) {
          return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
        }
      }
      return "".concat(msg).concat(skipped ? skippedMsg : "", "\n").concat(res).concat(other).concat(end).concat(indicator);
    }
    var AssertionError = function(_Error) {
      _inherits(AssertionError2, _Error);
      function AssertionError2(options) {
        var _this;
        _classCallCheck(this, AssertionError2);
        if (_typeof(options) !== "object" || options === null) {
          throw new ERR_INVALID_ARG_TYPE("options", "Object", options);
        }
        var message = options.message, operator = options.operator, stackStartFn = options.stackStartFn;
        var actual = options.actual, expected = options.expected;
        var limit = Error.stackTraceLimit;
        Error.stackTraceLimit = 0;
        if (message != null) {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError2).call(this, String(message)));
        } else {
          if (import_process.default.stderr && import_process.default.stderr.isTTY) {
            if (import_process.default.stderr && import_process.default.stderr.getColorDepth && import_process.default.stderr.getColorDepth() !== 1) {
              blue = "\x1B[34m";
              green = "\x1B[32m";
              white = "\x1B[39m";
              red = "\x1B[31m";
            } else {
              blue = "";
              green = "";
              white = "";
              red = "";
            }
          }
          if (_typeof(actual) === "object" && actual !== null && _typeof(expected) === "object" && expected !== null && "stack" in actual && actual instanceof Error && "stack" in expected && expected instanceof Error) {
            actual = copyError(actual);
            expected = copyError(expected);
          }
          if (operator === "deepStrictEqual" || operator === "strictEqual") {
            _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError2).call(this, createErrDiff(actual, expected, operator)));
          } else if (operator === "notDeepStrictEqual" || operator === "notStrictEqual") {
            var base = kReadableOperator[operator];
            var res = inspectValue(actual).split("\n");
            if (operator === "notStrictEqual" && _typeof(actual) === "object" && actual !== null) {
              base = kReadableOperator.notStrictEqualObject;
            }
            if (res.length > 30) {
              res[26] = "".concat(blue, "...").concat(white);
              while (res.length > 27) {
                res.pop();
              }
            }
            if (res.length === 1) {
              _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError2).call(this, "".concat(base, " ").concat(res[0])));
            } else {
              _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError2).call(this, "".concat(base, "\n\n").concat(res.join("\n"), "\n")));
            }
          } else {
            var _res = inspectValue(actual);
            var other = "";
            var knownOperators = kReadableOperator[operator];
            if (operator === "notDeepEqual" || operator === "notEqual") {
              _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
              if (_res.length > 1024) {
                _res = "".concat(_res.slice(0, 1021), "...");
              }
            } else {
              other = "".concat(inspectValue(expected));
              if (_res.length > 512) {
                _res = "".concat(_res.slice(0, 509), "...");
              }
              if (other.length > 512) {
                other = "".concat(other.slice(0, 509), "...");
              }
              if (operator === "deepEqual" || operator === "equal") {
                _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
              } else {
                other = " ".concat(operator, " ").concat(other);
              }
            }
            _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError2).call(this, "".concat(_res).concat(other)));
          }
        }
        Error.stackTraceLimit = limit;
        _this.generatedMessage = !message;
        Object.defineProperty(_assertThisInitialized(_this), "name", {
          value: "AssertionError [ERR_ASSERTION]",
          enumerable: false,
          writable: true,
          configurable: true
        });
        _this.code = "ERR_ASSERTION";
        _this.actual = actual;
        _this.expected = expected;
        _this.operator = operator;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
        }
        _this.stack;
        _this.name = "AssertionError";
        return _possibleConstructorReturn(_this);
      }
      _createClass(AssertionError2, [{
        key: "toString",
        value: function toString() {
          return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
        }
      }, {
        key: inspect.custom,
        value: function value(recurseTimes, ctx) {
          return inspect(this, _objectSpread({}, ctx, {
            customInspect: false,
            depth: 0
          }));
        }
      }]);
      return AssertionError2;
    }(_wrapNativeSuper(Error));
    module.exports = AssertionError;
  }
});

// node_modules/es6-object-assign/index.js
var require_es6_object_assign = __commonJS({
  "node_modules/es6-object-assign/index.js"(exports, module) {
    "use strict";
    init_shim();
    function assign(target, firstSource) {
      if (target === void 0 || target === null) {
        throw new TypeError("Cannot convert first argument to object");
      }
      var to = Object(target);
      for (var i = 1; i < arguments.length; i++) {
        var nextSource = arguments[i];
        if (nextSource === void 0 || nextSource === null) {
          continue;
        }
        var keysArray = Object.keys(Object(nextSource));
        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
          var nextKey = keysArray[nextIndex];
          var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
          if (desc !== void 0 && desc.enumerable) {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
      return to;
    }
    function polyfill() {
      if (!Object.assign) {
        Object.defineProperty(Object, "assign", {
          enumerable: false,
          configurable: true,
          writable: true,
          value: assign
        });
      }
    }
    module.exports = {
      assign,
      polyfill
    };
  }
});

// node_modules/object-keys/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/object-keys/isArguments.js"(exports, module) {
    "use strict";
    init_shim();
    var toStr = Object.prototype.toString;
    module.exports = function isArguments(value) {
      var str = toStr.call(value);
      var isArgs = str === "[object Arguments]";
      if (!isArgs) {
        isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
      }
      return isArgs;
    };
  }
});

// node_modules/object-keys/implementation.js
var require_implementation = __commonJS({
  "node_modules/object-keys/implementation.js"(exports, module) {
    "use strict";
    init_shim();
    var keysShim;
    if (!Object.keys) {
      has = Object.prototype.hasOwnProperty;
      toStr = Object.prototype.toString;
      isArgs = require_isArguments();
      isEnumerable = Object.prototype.propertyIsEnumerable;
      hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
      hasProtoEnumBug = isEnumerable.call(function() {
      }, "prototype");
      dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      equalsConstructorPrototype = function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
      };
      excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
      };
      hasAutomationEqualityBug = function() {
        if (typeof window === "undefined") {
          return false;
        }
        for (var k in window) {
          try {
            if (!excludedKeys["$" + k] && has.call(window, k) && window[k] !== null && typeof window[k] === "object") {
              try {
                equalsConstructorPrototype(window[k]);
              } catch (e) {
                return true;
              }
            }
          } catch (e) {
            return true;
          }
        }
        return false;
      }();
      equalsConstructorPrototypeIfNotBuggy = function(o) {
        if (typeof window === "undefined" || !hasAutomationEqualityBug) {
          return equalsConstructorPrototype(o);
        }
        try {
          return equalsConstructorPrototype(o);
        } catch (e) {
          return false;
        }
      };
      keysShim = function keys(object) {
        var isObject = object !== null && typeof object === "object";
        var isFunction = toStr.call(object) === "[object Function]";
        var isArguments = isArgs(object);
        var isString = isObject && toStr.call(object) === "[object String]";
        var theKeys = [];
        if (!isObject && !isFunction && !isArguments) {
          throw new TypeError("Object.keys called on a non-object");
        }
        var skipProto = hasProtoEnumBug && isFunction;
        if (isString && object.length > 0 && !has.call(object, 0)) {
          for (var i = 0; i < object.length; ++i) {
            theKeys.push(String(i));
          }
        }
        if (isArguments && object.length > 0) {
          for (var j = 0; j < object.length; ++j) {
            theKeys.push(String(j));
          }
        } else {
          for (var name in object) {
            if (!(skipProto && name === "prototype") && has.call(object, name)) {
              theKeys.push(String(name));
            }
          }
        }
        if (hasDontEnumBug) {
          var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
          for (var k = 0; k < dontEnums.length; ++k) {
            if (!(skipConstructor && dontEnums[k] === "constructor") && has.call(object, dontEnums[k])) {
              theKeys.push(dontEnums[k]);
            }
          }
        }
        return theKeys;
      };
    }
    var has;
    var toStr;
    var isArgs;
    var isEnumerable;
    var hasDontEnumBug;
    var hasProtoEnumBug;
    var dontEnums;
    var equalsConstructorPrototype;
    var excludedKeys;
    var hasAutomationEqualityBug;
    var equalsConstructorPrototypeIfNotBuggy;
    module.exports = keysShim;
  }
});

// node_modules/object-keys/index.js
var require_object_keys = __commonJS({
  "node_modules/object-keys/index.js"(exports, module) {
    "use strict";
    init_shim();
    var slice = Array.prototype.slice;
    var isArgs = require_isArguments();
    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o) {
      return origKeys(o);
    } : require_implementation();
    var originalKeys = Object.keys;
    keysShim.shim = function shimObjectKeys() {
      if (Object.keys) {
        var keysWorksWithArguments = function() {
          var args = Object.keys(arguments);
          return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) {
          Object.keys = function keys(object) {
            if (isArgs(object)) {
              return originalKeys(slice.call(object));
            }
            return originalKeys(object);
          };
        }
      } else {
        Object.keys = keysShim;
      }
      return Object.keys || keysShim;
    };
    module.exports = keysShim;
  }
});

// node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS({
  "node_modules/has-property-descriptors/index.js"(exports, module) {
    "use strict";
    init_shim();
    var GetIntrinsic = require_get_intrinsic();
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var hasPropertyDescriptors = function hasPropertyDescriptors2() {
      if ($defineProperty) {
        try {
          $defineProperty({}, "a", { value: 1 });
          return true;
        } catch (e) {
          return false;
        }
      }
      return false;
    };
    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
      if (!hasPropertyDescriptors()) {
        return null;
      }
      try {
        return $defineProperty([], "length", { value: 1 }).length !== 1;
      } catch (e) {
        return true;
      }
    };
    module.exports = hasPropertyDescriptors;
  }
});

// node_modules/define-properties/index.js
var require_define_properties = __commonJS({
  "node_modules/define-properties/index.js"(exports, module) {
    "use strict";
    init_shim();
    var keys = require_object_keys();
    var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
    var toStr = Object.prototype.toString;
    var concat = Array.prototype.concat;
    var origDefineProperty = Object.defineProperty;
    var isFunction = function(fn) {
      return typeof fn === "function" && toStr.call(fn) === "[object Function]";
    };
    var hasPropertyDescriptors = require_has_property_descriptors()();
    var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;
    var defineProperty = function(object, name, value, predicate) {
      if (name in object) {
        if (predicate === true) {
          if (object[name] === value) {
            return;
          }
        } else if (!isFunction(predicate) || !predicate()) {
          return;
        }
      }
      if (supportsDescriptors) {
        origDefineProperty(object, name, {
          configurable: true,
          enumerable: false,
          value,
          writable: true
        });
      } else {
        object[name] = value;
      }
    };
    var defineProperties = function(object, map) {
      var predicates = arguments.length > 2 ? arguments[2] : {};
      var props = keys(map);
      if (hasSymbols) {
        props = concat.call(props, Object.getOwnPropertySymbols(map));
      }
      for (var i = 0; i < props.length; i += 1) {
        defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
      }
    };
    defineProperties.supportsDescriptors = !!supportsDescriptors;
    module.exports = defineProperties;
  }
});

// node_modules/object-is/implementation.js
var require_implementation2 = __commonJS({
  "node_modules/object-is/implementation.js"(exports, module) {
    "use strict";
    init_shim();
    var numberIsNaN = function(value) {
      return value !== value;
    };
    module.exports = function is(a, b) {
      if (a === 0 && b === 0) {
        return 1 / a === 1 / b;
      }
      if (a === b) {
        return true;
      }
      if (numberIsNaN(a) && numberIsNaN(b)) {
        return true;
      }
      return false;
    };
  }
});

// node_modules/object-is/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/object-is/polyfill.js"(exports, module) {
    "use strict";
    init_shim();
    var implementation = require_implementation2();
    module.exports = function getPolyfill() {
      return typeof Object.is === "function" ? Object.is : implementation;
    };
  }
});

// node_modules/object-is/shim.js
var require_shim = __commonJS({
  "node_modules/object-is/shim.js"(exports, module) {
    "use strict";
    init_shim();
    var getPolyfill = require_polyfill();
    var define = require_define_properties();
    module.exports = function shimObjectIs() {
      var polyfill = getPolyfill();
      define(Object, { is: polyfill }, {
        is: function testObjectIs() {
          return Object.is !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// node_modules/object-is/index.js
var require_object_is = __commonJS({
  "node_modules/object-is/index.js"(exports, module) {
    "use strict";
    init_shim();
    var define = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation2();
    var getPolyfill = require_polyfill();
    var shim = require_shim();
    var polyfill = callBind(getPolyfill(), Object);
    define(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module.exports = polyfill;
  }
});

// node_modules/is-nan/implementation.js
var require_implementation3 = __commonJS({
  "node_modules/is-nan/implementation.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = function isNaN(value) {
      return value !== value;
    };
  }
});

// node_modules/is-nan/polyfill.js
var require_polyfill2 = __commonJS({
  "node_modules/is-nan/polyfill.js"(exports, module) {
    "use strict";
    init_shim();
    var implementation = require_implementation3();
    module.exports = function getPolyfill() {
      if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a")) {
        return Number.isNaN;
      }
      return implementation;
    };
  }
});

// node_modules/is-nan/shim.js
var require_shim2 = __commonJS({
  "node_modules/is-nan/shim.js"(exports, module) {
    "use strict";
    init_shim();
    var define = require_define_properties();
    var getPolyfill = require_polyfill2();
    module.exports = function shimNumberIsNaN() {
      var polyfill = getPolyfill();
      define(Number, { isNaN: polyfill }, {
        isNaN: function testIsNaN() {
          return Number.isNaN !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// node_modules/is-nan/index.js
var require_is_nan = __commonJS({
  "node_modules/is-nan/index.js"(exports, module) {
    "use strict";
    init_shim();
    var callBind = require_call_bind();
    var define = require_define_properties();
    var implementation = require_implementation3();
    var getPolyfill = require_polyfill2();
    var shim = require_shim2();
    var polyfill = callBind(getPolyfill(), Number);
    define(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module.exports = polyfill;
  }
});

// node_modules/assert/build/internal/util/comparisons.js
var require_comparisons = __commonJS({
  "node_modules/assert/build/internal/util/comparisons.js"(exports, module) {
    "use strict";
    init_shim();
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    function _iterableToArrayLimit(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var regexFlagsSupported = /a/g.flags !== void 0;
    var arrayFromSet = function arrayFromSet2(set) {
      var array = [];
      set.forEach(function(value) {
        return array.push(value);
      });
      return array;
    };
    var arrayFromMap = function arrayFromMap2(map) {
      var array = [];
      map.forEach(function(value, key) {
        return array.push([key, value]);
      });
      return array;
    };
    var objectIs = Object.is ? Object.is : require_object_is();
    var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
      return [];
    };
    var numberIsNaN = Number.isNaN ? Number.isNaN : require_is_nan();
    function uncurryThis(f) {
      return f.call.bind(f);
    }
    var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
    var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
    var objectToString = uncurryThis(Object.prototype.toString);
    var _require$types = require_util().types;
    var isAnyArrayBuffer = _require$types.isAnyArrayBuffer;
    var isArrayBufferView = _require$types.isArrayBufferView;
    var isDate = _require$types.isDate;
    var isMap = _require$types.isMap;
    var isRegExp = _require$types.isRegExp;
    var isSet = _require$types.isSet;
    var isNativeError = _require$types.isNativeError;
    var isBoxedPrimitive = _require$types.isBoxedPrimitive;
    var isNumberObject = _require$types.isNumberObject;
    var isStringObject = _require$types.isStringObject;
    var isBooleanObject = _require$types.isBooleanObject;
    var isBigIntObject = _require$types.isBigIntObject;
    var isSymbolObject = _require$types.isSymbolObject;
    var isFloat32Array = _require$types.isFloat32Array;
    var isFloat64Array = _require$types.isFloat64Array;
    function isNonIndex(key) {
      if (key.length === 0 || key.length > 10)
        return true;
      for (var i = 0; i < key.length; i++) {
        var code = key.charCodeAt(i);
        if (code < 48 || code > 57)
          return true;
      }
      return key.length === 10 && key >= Math.pow(2, 32);
    }
    function getOwnNonIndexProperties(value) {
      return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
    }
    function compare(a, b) {
      if (a === b) {
        return 0;
      }
      var x = a.length;
      var y = b.length;
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y) {
        return -1;
      }
      if (y < x) {
        return 1;
      }
      return 0;
    }
    var ONLY_ENUMERABLE = void 0;
    var kStrict = true;
    var kLoose = false;
    var kNoIterator = 0;
    var kIsArray = 1;
    var kIsSet = 2;
    var kIsMap = 3;
    function areSimilarRegExps(a, b) {
      return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
    }
    function areSimilarFloatArrays(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      for (var offset = 0; offset < a.byteLength; offset++) {
        if (a[offset] !== b[offset]) {
          return false;
        }
      }
      return true;
    }
    function areSimilarTypedArrays(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
    }
    function areEqualArrayBuffers(buf1, buf2) {
      return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
    }
    function isEqualBoxedPrimitive(val1, val2) {
      if (isNumberObject(val1)) {
        return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
      }
      if (isStringObject(val1)) {
        return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
      }
      if (isBooleanObject(val1)) {
        return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
      }
      if (isBigIntObject(val1)) {
        return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
      }
      return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
    }
    function innerDeepEqual(val1, val2, strict, memos) {
      if (val1 === val2) {
        if (val1 !== 0)
          return true;
        return strict ? objectIs(val1, val2) : true;
      }
      if (strict) {
        if (_typeof(val1) !== "object") {
          return typeof val1 === "number" && numberIsNaN(val1) && numberIsNaN(val2);
        }
        if (_typeof(val2) !== "object" || val1 === null || val2 === null) {
          return false;
        }
        if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
          return false;
        }
      } else {
        if (val1 === null || _typeof(val1) !== "object") {
          if (val2 === null || _typeof(val2) !== "object") {
            return val1 == val2;
          }
          return false;
        }
        if (val2 === null || _typeof(val2) !== "object") {
          return false;
        }
      }
      var val1Tag = objectToString(val1);
      var val2Tag = objectToString(val2);
      if (val1Tag !== val2Tag) {
        return false;
      }
      if (Array.isArray(val1)) {
        if (val1.length !== val2.length) {
          return false;
        }
        var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (keys1.length !== keys2.length) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
      }
      if (val1Tag === "[object Object]") {
        if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
          return false;
        }
      }
      if (isDate(val1)) {
        if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
          return false;
        }
      } else if (isRegExp(val1)) {
        if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
          return false;
        }
      } else if (isNativeError(val1) || val1 instanceof Error) {
        if (val1.message !== val2.message || val1.name !== val2.name) {
          return false;
        }
      } else if (isArrayBufferView(val1)) {
        if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
          if (!areSimilarFloatArrays(val1, val2)) {
            return false;
          }
        } else if (!areSimilarTypedArrays(val1, val2)) {
          return false;
        }
        var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (_keys.length !== _keys2.length) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
      } else if (isSet(val1)) {
        if (!isSet(val2) || val1.size !== val2.size) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsSet);
      } else if (isMap(val1)) {
        if (!isMap(val2) || val1.size !== val2.size) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsMap);
      } else if (isAnyArrayBuffer(val1)) {
        if (!areEqualArrayBuffers(val1, val2)) {
          return false;
        }
      } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
        return false;
      }
      return keyCheck(val1, val2, strict, memos, kNoIterator);
    }
    function getEnumerables(val, keys) {
      return keys.filter(function(k) {
        return propertyIsEnumerable(val, k);
      });
    }
    function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
      if (arguments.length === 5) {
        aKeys = Object.keys(val1);
        var bKeys = Object.keys(val2);
        if (aKeys.length !== bKeys.length) {
          return false;
        }
      }
      var i = 0;
      for (; i < aKeys.length; i++) {
        if (!hasOwnProperty(val2, aKeys[i])) {
          return false;
        }
      }
      if (strict && arguments.length === 5) {
        var symbolKeysA = objectGetOwnPropertySymbols(val1);
        if (symbolKeysA.length !== 0) {
          var count = 0;
          for (i = 0; i < symbolKeysA.length; i++) {
            var key = symbolKeysA[i];
            if (propertyIsEnumerable(val1, key)) {
              if (!propertyIsEnumerable(val2, key)) {
                return false;
              }
              aKeys.push(key);
              count++;
            } else if (propertyIsEnumerable(val2, key)) {
              return false;
            }
          }
          var symbolKeysB = objectGetOwnPropertySymbols(val2);
          if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
            return false;
          }
        } else {
          var _symbolKeysB = objectGetOwnPropertySymbols(val2);
          if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
            return false;
          }
        }
      }
      if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
        return true;
      }
      if (memos === void 0) {
        memos = {
          val1: /* @__PURE__ */ new Map(),
          val2: /* @__PURE__ */ new Map(),
          position: 0
        };
      } else {
        var val2MemoA = memos.val1.get(val1);
        if (val2MemoA !== void 0) {
          var val2MemoB = memos.val2.get(val2);
          if (val2MemoB !== void 0) {
            return val2MemoA === val2MemoB;
          }
        }
        memos.position++;
      }
      memos.val1.set(val1, memos.position);
      memos.val2.set(val2, memos.position);
      var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
      memos.val1.delete(val1);
      memos.val2.delete(val2);
      return areEq;
    }
    function setHasEqualElement(set, val1, strict, memo) {
      var setValues = arrayFromSet(set);
      for (var i = 0; i < setValues.length; i++) {
        var val2 = setValues[i];
        if (innerDeepEqual(val1, val2, strict, memo)) {
          set.delete(val2);
          return true;
        }
      }
      return false;
    }
    function findLooseMatchingPrimitives(prim) {
      switch (_typeof(prim)) {
        case "undefined":
          return null;
        case "object":
          return void 0;
        case "symbol":
          return false;
        case "string":
          prim = +prim;
        case "number":
          if (numberIsNaN(prim)) {
            return false;
          }
      }
      return true;
    }
    function setMightHaveLoosePrim(a, b, prim) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null)
        return altValue;
      return b.has(altValue) && !a.has(altValue);
    }
    function mapMightHaveLoosePrim(a, b, prim, item, memo) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }
      var curB = b.get(altValue);
      if (curB === void 0 && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
        return false;
      }
      return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
    }
    function setEquiv(a, b, strict, memo) {
      var set = null;
      var aValues = arrayFromSet(a);
      for (var i = 0; i < aValues.length; i++) {
        var val = aValues[i];
        if (_typeof(val) === "object" && val !== null) {
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(val);
        } else if (!b.has(val)) {
          if (strict)
            return false;
          if (!setMightHaveLoosePrim(a, b, val)) {
            return false;
          }
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(val);
        }
      }
      if (set !== null) {
        var bValues = arrayFromSet(b);
        for (var _i = 0; _i < bValues.length; _i++) {
          var _val = bValues[_i];
          if (_typeof(_val) === "object" && _val !== null) {
            if (!setHasEqualElement(set, _val, strict, memo))
              return false;
          } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
            return false;
          }
        }
        return set.size === 0;
      }
      return true;
    }
    function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
      var setValues = arrayFromSet(set);
      for (var i = 0; i < setValues.length; i++) {
        var key2 = setValues[i];
        if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
          set.delete(key2);
          return true;
        }
      }
      return false;
    }
    function mapEquiv(a, b, strict, memo) {
      var set = null;
      var aEntries = arrayFromMap(a);
      for (var i = 0; i < aEntries.length; i++) {
        var _aEntries$i = _slicedToArray(aEntries[i], 2), key = _aEntries$i[0], item1 = _aEntries$i[1];
        if (_typeof(key) === "object" && key !== null) {
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(key);
        } else {
          var item2 = b.get(key);
          if (item2 === void 0 && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
            if (strict)
              return false;
            if (!mapMightHaveLoosePrim(a, b, key, item1, memo))
              return false;
            if (set === null) {
              set = /* @__PURE__ */ new Set();
            }
            set.add(key);
          }
        }
      }
      if (set !== null) {
        var bEntries = arrayFromMap(b);
        for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
          var _bEntries$_i = _slicedToArray(bEntries[_i2], 2), key = _bEntries$_i[0], item = _bEntries$_i[1];
          if (_typeof(key) === "object" && key !== null) {
            if (!mapHasEqualEntry(set, a, key, item, strict, memo))
              return false;
          } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
            return false;
          }
        }
        return set.size === 0;
      }
      return true;
    }
    function objEquiv(a, b, strict, keys, memos, iterationType) {
      var i = 0;
      if (iterationType === kIsSet) {
        if (!setEquiv(a, b, strict, memos)) {
          return false;
        }
      } else if (iterationType === kIsMap) {
        if (!mapEquiv(a, b, strict, memos)) {
          return false;
        }
      } else if (iterationType === kIsArray) {
        for (; i < a.length; i++) {
          if (hasOwnProperty(a, i)) {
            if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
              return false;
            }
          } else if (hasOwnProperty(b, i)) {
            return false;
          } else {
            var keysA = Object.keys(a);
            for (; i < keysA.length; i++) {
              var key = keysA[i];
              if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
                return false;
              }
            }
            if (keysA.length !== Object.keys(b).length) {
              return false;
            }
            return true;
          }
        }
      }
      for (i = 0; i < keys.length; i++) {
        var _key = keys[i];
        if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
          return false;
        }
      }
      return true;
    }
    function isDeepEqual(val1, val2) {
      return innerDeepEqual(val1, val2, kLoose);
    }
    function isDeepStrictEqual(val1, val2) {
      return innerDeepEqual(val1, val2, kStrict);
    }
    module.exports = {
      isDeepEqual,
      isDeepStrictEqual
    };
  }
});

// node_modules/assert/build/assert.js
var require_assert = __commonJS({
  "node_modules/assert/build/assert.js"(exports, module) {
    "use strict";
    init_shim();
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var _require = require_errors();
    var _require$codes = _require.codes;
    var ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE;
    var ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var AssertionError = require_assertion_error();
    var _require2 = require_util();
    var inspect = _require2.inspect;
    var _require$types = require_util().types;
    var isPromise = _require$types.isPromise;
    var isRegExp = _require$types.isRegExp;
    var objectAssign = Object.assign ? Object.assign : require_es6_object_assign().assign;
    var objectIs = Object.is ? Object.is : require_object_is();
    var isDeepEqual;
    var isDeepStrictEqual;
    function lazyLoadComparison() {
      var comparison = require_comparisons();
      isDeepEqual = comparison.isDeepEqual;
      isDeepStrictEqual = comparison.isDeepStrictEqual;
    }
    var warned = false;
    var assert = module.exports = ok;
    var NO_EXCEPTION_SENTINEL = {};
    function innerFail(obj) {
      if (obj.message instanceof Error)
        throw obj.message;
      throw new AssertionError(obj);
    }
    function fail(actual, expected, message, operator, stackStartFn) {
      var argsLen = arguments.length;
      var internalMessage;
      if (argsLen === 0) {
        internalMessage = "Failed";
      } else if (argsLen === 1) {
        message = actual;
        actual = void 0;
      } else {
        if (warned === false) {
          warned = true;
          var warn = import_process.default.emitWarning ? import_process.default.emitWarning : console.warn.bind(console);
          warn("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094");
        }
        if (argsLen === 2)
          operator = "!=";
      }
      if (message instanceof Error)
        throw message;
      var errArgs = {
        actual,
        expected,
        operator: operator === void 0 ? "fail" : operator,
        stackStartFn: stackStartFn || fail
      };
      if (message !== void 0) {
        errArgs.message = message;
      }
      var err = new AssertionError(errArgs);
      if (internalMessage) {
        err.message = internalMessage;
        err.generatedMessage = true;
      }
      throw err;
    }
    assert.fail = fail;
    assert.AssertionError = AssertionError;
    function innerOk(fn, argLen, value, message) {
      if (!value) {
        var generatedMessage = false;
        if (argLen === 0) {
          generatedMessage = true;
          message = "No value argument passed to `assert.ok()`";
        } else if (message instanceof Error) {
          throw message;
        }
        var err = new AssertionError({
          actual: value,
          expected: true,
          message,
          operator: "==",
          stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
      }
    }
    function ok() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      innerOk.apply(void 0, [ok, args.length].concat(args));
    }
    assert.ok = ok;
    assert.equal = function equal(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (actual != expected) {
        innerFail({
          actual,
          expected,
          message,
          operator: "==",
          stackStartFn: equal
        });
      }
    };
    assert.notEqual = function notEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (actual == expected) {
        innerFail({
          actual,
          expected,
          message,
          operator: "!=",
          stackStartFn: notEqual
        });
      }
    };
    assert.deepEqual = function deepEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0)
        lazyLoadComparison();
      if (!isDeepEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "deepEqual",
          stackStartFn: deepEqual
        });
      }
    };
    assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0)
        lazyLoadComparison();
      if (isDeepEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notDeepEqual",
          stackStartFn: notDeepEqual
        });
      }
    };
    assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0)
        lazyLoadComparison();
      if (!isDeepStrictEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "deepStrictEqual",
          stackStartFn: deepStrictEqual
        });
      }
    };
    assert.notDeepStrictEqual = notDeepStrictEqual;
    function notDeepStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0)
        lazyLoadComparison();
      if (isDeepStrictEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notDeepStrictEqual",
          stackStartFn: notDeepStrictEqual
        });
      }
    }
    assert.strictEqual = function strictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (!objectIs(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "strictEqual",
          stackStartFn: strictEqual
        });
      }
    };
    assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (objectIs(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notStrictEqual",
          stackStartFn: notStrictEqual
        });
      }
    };
    var Comparison = function Comparison2(obj, keys, actual) {
      var _this = this;
      _classCallCheck(this, Comparison2);
      keys.forEach(function(key) {
        if (key in obj) {
          if (actual !== void 0 && typeof actual[key] === "string" && isRegExp(obj[key]) && obj[key].test(actual[key])) {
            _this[key] = actual[key];
          } else {
            _this[key] = obj[key];
          }
        }
      });
    };
    function compareExceptionKey(actual, expected, key, message, keys, fn) {
      if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
        if (!message) {
          var a = new Comparison(actual, keys);
          var b = new Comparison(expected, keys, actual);
          var err = new AssertionError({
            actual: a,
            expected: b,
            operator: "deepStrictEqual",
            stackStartFn: fn
          });
          err.actual = actual;
          err.expected = expected;
          err.operator = fn.name;
          throw err;
        }
        innerFail({
          actual,
          expected,
          message,
          operator: fn.name,
          stackStartFn: fn
        });
      }
    }
    function expectedException(actual, expected, msg, fn) {
      if (typeof expected !== "function") {
        if (isRegExp(expected))
          return expected.test(actual);
        if (arguments.length === 2) {
          throw new ERR_INVALID_ARG_TYPE("expected", ["Function", "RegExp"], expected);
        }
        if (_typeof(actual) !== "object" || actual === null) {
          var err = new AssertionError({
            actual,
            expected,
            message: msg,
            operator: "deepStrictEqual",
            stackStartFn: fn
          });
          err.operator = fn.name;
          throw err;
        }
        var keys = Object.keys(expected);
        if (expected instanceof Error) {
          keys.push("name", "message");
        } else if (keys.length === 0) {
          throw new ERR_INVALID_ARG_VALUE("error", expected, "may not be an empty object");
        }
        if (isDeepEqual === void 0)
          lazyLoadComparison();
        keys.forEach(function(key) {
          if (typeof actual[key] === "string" && isRegExp(expected[key]) && expected[key].test(actual[key])) {
            return;
          }
          compareExceptionKey(actual, expected, key, msg, keys, fn);
        });
        return true;
      }
      if (expected.prototype !== void 0 && actual instanceof expected) {
        return true;
      }
      if (Error.isPrototypeOf(expected)) {
        return false;
      }
      return expected.call({}, actual) === true;
    }
    function getActual(fn) {
      if (typeof fn !== "function") {
        throw new ERR_INVALID_ARG_TYPE("fn", "Function", fn);
      }
      try {
        fn();
      } catch (e) {
        return e;
      }
      return NO_EXCEPTION_SENTINEL;
    }
    function checkIsPromise(obj) {
      return isPromise(obj) || obj !== null && _typeof(obj) === "object" && typeof obj.then === "function" && typeof obj.catch === "function";
    }
    function waitForActual(promiseFn) {
      return Promise.resolve().then(function() {
        var resultPromise;
        if (typeof promiseFn === "function") {
          resultPromise = promiseFn();
          if (!checkIsPromise(resultPromise)) {
            throw new ERR_INVALID_RETURN_VALUE("instance of Promise", "promiseFn", resultPromise);
          }
        } else if (checkIsPromise(promiseFn)) {
          resultPromise = promiseFn;
        } else {
          throw new ERR_INVALID_ARG_TYPE("promiseFn", ["Function", "Promise"], promiseFn);
        }
        return Promise.resolve().then(function() {
          return resultPromise;
        }).then(function() {
          return NO_EXCEPTION_SENTINEL;
        }).catch(function(e) {
          return e;
        });
      });
    }
    function expectsError(stackStartFn, actual, error, message) {
      if (typeof error === "string") {
        if (arguments.length === 4) {
          throw new ERR_INVALID_ARG_TYPE("error", ["Object", "Error", "Function", "RegExp"], error);
        }
        if (_typeof(actual) === "object" && actual !== null) {
          if (actual.message === error) {
            throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error message "'.concat(actual.message, '" is identical to the message.'));
          }
        } else if (actual === error) {
          throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error "'.concat(actual, '" is identical to the message.'));
        }
        message = error;
        error = void 0;
      } else if (error != null && _typeof(error) !== "object" && typeof error !== "function") {
        throw new ERR_INVALID_ARG_TYPE("error", ["Object", "Error", "Function", "RegExp"], error);
      }
      if (actual === NO_EXCEPTION_SENTINEL) {
        var details = "";
        if (error && error.name) {
          details += " (".concat(error.name, ")");
        }
        details += message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "rejects" ? "rejection" : "exception";
        innerFail({
          actual: void 0,
          expected: error,
          operator: stackStartFn.name,
          message: "Missing expected ".concat(fnType).concat(details),
          stackStartFn
        });
      }
      if (error && !expectedException(actual, error, message, stackStartFn)) {
        throw actual;
      }
    }
    function expectsNoError(stackStartFn, actual, error, message) {
      if (actual === NO_EXCEPTION_SENTINEL)
        return;
      if (typeof error === "string") {
        message = error;
        error = void 0;
      }
      if (!error || expectedException(actual, error)) {
        var details = message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "doesNotReject" ? "rejection" : "exception";
        innerFail({
          actual,
          expected: error,
          operator: stackStartFn.name,
          message: "Got unwanted ".concat(fnType).concat(details, "\n") + 'Actual message: "'.concat(actual && actual.message, '"'),
          stackStartFn
        });
      }
      throw actual;
    }
    assert.throws = function throws(promiseFn) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
    };
    assert.rejects = function rejects(promiseFn) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      return waitForActual(promiseFn).then(function(result) {
        return expectsError.apply(void 0, [rejects, result].concat(args));
      });
    };
    assert.doesNotThrow = function doesNotThrow(fn) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
    };
    assert.doesNotReject = function doesNotReject(fn) {
      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }
      return waitForActual(fn).then(function(result) {
        return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
      });
    };
    assert.ifError = function ifError(err) {
      if (err !== null && err !== void 0) {
        var message = "ifError got unwanted exception: ";
        if (_typeof(err) === "object" && typeof err.message === "string") {
          if (err.message.length === 0 && err.constructor) {
            message += err.constructor.name;
          } else {
            message += err.message;
          }
        } else {
          message += inspect(err);
        }
        var newErr = new AssertionError({
          actual: err,
          expected: null,
          operator: "ifError",
          message,
          stackStartFn: ifError
        });
        var origStack = err.stack;
        if (typeof origStack === "string") {
          var tmp2 = origStack.split("\n");
          tmp2.shift();
          var tmp1 = newErr.stack.split("\n");
          for (var i = 0; i < tmp2.length; i++) {
            var pos = tmp1.indexOf(tmp2[i]);
            if (pos !== -1) {
              tmp1 = tmp1.slice(0, pos);
              break;
            }
          }
          newErr.stack = "".concat(tmp1.join("\n"), "\n").concat(tmp2.join("\n"));
        }
        throw newErr;
      }
    };
    function strict() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      innerOk.apply(void 0, [strict, args.length].concat(args));
    }
    assert.strict = objectAssign(strict, assert, {
      equal: assert.strictEqual,
      deepEqual: assert.deepStrictEqual,
      notEqual: assert.notStrictEqual,
      notDeepEqual: assert.notDeepStrictEqual
    });
    assert.strict.strict = assert.strict;
  }
});

// node_modules/secp256k1/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/secp256k1/lib/index.js"(exports, module) {
    init_shim();
    var errors = {
      IMPOSSIBLE_CASE: "Impossible case. Please create issue.",
      TWEAK_ADD: "The tweak was out of range or the resulted private key is invalid",
      TWEAK_MUL: "The tweak was out of range or equal to zero",
      CONTEXT_RANDOMIZE_UNKNOW: "Unknow error on context randomization",
      SECKEY_INVALID: "Private Key is invalid",
      PUBKEY_PARSE: "Public Key could not be parsed",
      PUBKEY_SERIALIZE: "Public Key serialization error",
      PUBKEY_COMBINE: "The sum of the public keys is not valid",
      SIG_PARSE: "Signature could not be parsed",
      SIGN: "The nonce generation function failed, or the private key was invalid",
      RECOVER: "Public key could not be recover",
      ECDH: "Scalar was invalid (zero or overflow)"
    };
    function assert(cond, msg) {
      if (!cond)
        throw new Error(msg);
    }
    function isUint8Array(name, value, length) {
      assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`);
      if (length !== void 0) {
        if (Array.isArray(length)) {
          const numbers = length.join(", ");
          const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`;
          assert(length.includes(value.length), msg);
        } else {
          const msg = `Expected ${name} to be an Uint8Array with length ${length}`;
          assert(value.length === length, msg);
        }
      }
    }
    function isCompressed(value) {
      assert(toTypeString(value) === "Boolean", "Expected compressed to be a Boolean");
    }
    function getAssertedOutput(output = (len) => new Uint8Array(len), length) {
      if (typeof output === "function")
        output = output(length);
      isUint8Array("output", output, length);
      return output;
    }
    function toTypeString(value) {
      return Object.prototype.toString.call(value).slice(8, -1);
    }
    module.exports = (secp256k1) => {
      return {
        contextRandomize(seed) {
          assert(
            seed === null || seed instanceof Uint8Array,
            "Expected seed to be an Uint8Array or null"
          );
          if (seed !== null)
            isUint8Array("seed", seed, 32);
          switch (secp256k1.contextRandomize(seed)) {
            case 1:
              throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW);
          }
        },
        privateKeyVerify(seckey) {
          isUint8Array("private key", seckey, 32);
          return secp256k1.privateKeyVerify(seckey) === 0;
        },
        privateKeyNegate(seckey) {
          isUint8Array("private key", seckey, 32);
          switch (secp256k1.privateKeyNegate(seckey)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        privateKeyTweakAdd(seckey, tweak) {
          isUint8Array("private key", seckey, 32);
          isUint8Array("tweak", tweak, 32);
          switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.TWEAK_ADD);
          }
        },
        privateKeyTweakMul(seckey, tweak) {
          isUint8Array("private key", seckey, 32);
          isUint8Array("tweak", tweak, 32);
          switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.TWEAK_MUL);
          }
        },
        publicKeyVerify(pubkey) {
          isUint8Array("public key", pubkey, [33, 65]);
          return secp256k1.publicKeyVerify(pubkey) === 0;
        },
        publicKeyCreate(seckey, compressed = true, output) {
          isUint8Array("private key", seckey, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyCreate(output, seckey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SECKEY_INVALID);
            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyConvert(pubkey, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyConvert(output, pubkey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyNegate(pubkey, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyNegate(output, pubkey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyCombine(pubkeys, compressed = true, output) {
          assert(Array.isArray(pubkeys), "Expected public keys to be an Array");
          assert(pubkeys.length > 0, "Expected public keys array will have more than zero items");
          for (const pubkey of pubkeys) {
            isUint8Array("public key", pubkey, [33, 65]);
          }
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyCombine(output, pubkeys)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_COMBINE);
            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyTweakAdd(pubkey, tweak, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("tweak", tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.TWEAK_ADD);
          }
        },
        publicKeyTweakMul(pubkey, tweak, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("tweak", tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.TWEAK_MUL);
          }
        },
        signatureNormalize(sig) {
          isUint8Array("signature", sig, 64);
          switch (secp256k1.signatureNormalize(sig)) {
            case 0:
              return sig;
            case 1:
              throw new Error(errors.SIG_PARSE);
          }
        },
        signatureExport(sig, output) {
          isUint8Array("signature", sig, 64);
          output = getAssertedOutput(output, 72);
          const obj = { output, outputlen: 72 };
          switch (secp256k1.signatureExport(obj, sig)) {
            case 0:
              return output.slice(0, obj.outputlen);
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        signatureImport(sig, output) {
          isUint8Array("signature", sig);
          output = getAssertedOutput(output, 64);
          switch (secp256k1.signatureImport(output, sig)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdsaSign(msg32, seckey, options = {}, output) {
          isUint8Array("message", msg32, 32);
          isUint8Array("private key", seckey, 32);
          assert(toTypeString(options) === "Object", "Expected options to be an Object");
          if (options.data !== void 0)
            isUint8Array("options.data", options.data);
          if (options.noncefn !== void 0)
            assert(toTypeString(options.noncefn) === "Function", "Expected options.noncefn to be a Function");
          output = getAssertedOutput(output, 64);
          const obj = { signature: output, recid: null };
          switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
            case 0:
              return obj;
            case 1:
              throw new Error(errors.SIGN);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdsaVerify(sig, msg32, pubkey) {
          isUint8Array("signature", sig, 64);
          isUint8Array("message", msg32, 32);
          isUint8Array("public key", pubkey, [33, 65]);
          switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
            case 0:
              return true;
            case 3:
              return false;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_PARSE);
          }
        },
        ecdsaRecover(sig, recid, msg32, compressed = true, output) {
          isUint8Array("signature", sig, 64);
          assert(
            toTypeString(recid) === "Number" && recid >= 0 && recid <= 3,
            "Expected recovery id to be a Number within interval [0, 3]"
          );
          isUint8Array("message", msg32, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.RECOVER);
            case 3:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdh(pubkey, seckey, options = {}, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("private key", seckey, 32);
          assert(toTypeString(options) === "Object", "Expected options to be an Object");
          if (options.data !== void 0)
            isUint8Array("options.data", options.data);
          if (options.hashfn !== void 0) {
            assert(toTypeString(options.hashfn) === "Function", "Expected options.hashfn to be a Function");
            if (options.xbuf !== void 0)
              isUint8Array("options.xbuf", options.xbuf, 32);
            if (options.ybuf !== void 0)
              isUint8Array("options.ybuf", options.ybuf, 32);
            isUint8Array("output", output);
          } else {
            output = getAssertedOutput(output, 32);
          }
          switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.ECDH);
          }
        }
      };
    };
  }
});

// node_modules/secp256k1/lib/elliptic.js
var require_elliptic2 = __commonJS({
  "node_modules/secp256k1/lib/elliptic.js"(exports, module) {
    init_shim();
    var EC = require_elliptic().ec;
    var ec = new EC("secp256k1");
    var ecparams = ec.curve;
    var BN = ecparams.n.constructor;
    function loadCompressedPublicKey(first, xbuf) {
      let x = new BN(xbuf);
      if (x.cmp(ecparams.p) >= 0)
        return null;
      x = x.toRed(ecparams.red);
      let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
      if (first === 3 !== y.isOdd())
        y = y.redNeg();
      return ec.keyPair({ pub: { x, y } });
    }
    function loadUncompressedPublicKey(first, xbuf, ybuf) {
      let x = new BN(xbuf);
      let y = new BN(ybuf);
      if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0)
        return null;
      x = x.toRed(ecparams.red);
      y = y.toRed(ecparams.red);
      if ((first === 6 || first === 7) && y.isOdd() !== (first === 7))
        return null;
      const x3 = x.redSqr().redIMul(x);
      if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero())
        return null;
      return ec.keyPair({ pub: { x, y } });
    }
    function loadPublicKey(pubkey) {
      const first = pubkey[0];
      switch (first) {
        case 2:
        case 3:
          if (pubkey.length !== 33)
            return null;
          return loadCompressedPublicKey(first, pubkey.subarray(1, 33));
        case 4:
        case 6:
        case 7:
          if (pubkey.length !== 65)
            return null;
          return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));
        default:
          return null;
      }
    }
    function savePublicKey(output, point) {
      const pubkey = point.encode(null, output.length === 33);
      for (let i = 0; i < output.length; ++i)
        output[i] = pubkey[i];
    }
    module.exports = {
      contextRandomize() {
        return 0;
      },
      privateKeyVerify(seckey) {
        const bn = new BN(seckey);
        return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1;
      },
      privateKeyNegate(seckey) {
        const bn = new BN(seckey);
        const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, "be", 32);
        seckey.set(negate);
        return 0;
      },
      privateKeyTweakAdd(seckey, tweak) {
        const bn = new BN(tweak);
        if (bn.cmp(ecparams.n) >= 0)
          return 1;
        bn.iadd(new BN(seckey));
        if (bn.cmp(ecparams.n) >= 0)
          bn.isub(ecparams.n);
        if (bn.isZero())
          return 1;
        const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
        seckey.set(tweaked);
        return 0;
      },
      privateKeyTweakMul(seckey, tweak) {
        let bn = new BN(tweak);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero())
          return 1;
        bn.imul(new BN(seckey));
        if (bn.cmp(ecparams.n) >= 0)
          bn = bn.umod(ecparams.n);
        const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
        seckey.set(tweaked);
        return 0;
      },
      publicKeyVerify(pubkey) {
        const pair = loadPublicKey(pubkey);
        return pair === null ? 1 : 0;
      },
      publicKeyCreate(output, seckey) {
        const bn = new BN(seckey);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero())
          return 1;
        const point = ec.keyFromPrivate(seckey).getPublic();
        savePublicKey(output, point);
        return 0;
      },
      publicKeyConvert(output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 1;
        const point = pair.getPublic();
        savePublicKey(output, point);
        return 0;
      },
      publicKeyNegate(output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 1;
        const point = pair.getPublic();
        point.y = point.y.redNeg();
        savePublicKey(output, point);
        return 0;
      },
      publicKeyCombine(output, pubkeys) {
        const pairs = new Array(pubkeys.length);
        for (let i = 0; i < pubkeys.length; ++i) {
          pairs[i] = loadPublicKey(pubkeys[i]);
          if (pairs[i] === null)
            return 1;
        }
        let point = pairs[0].getPublic();
        for (let i = 1; i < pairs.length; ++i)
          point = point.add(pairs[i].pub);
        if (point.isInfinity())
          return 2;
        savePublicKey(output, point);
        return 0;
      },
      publicKeyTweakAdd(output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 1;
        tweak = new BN(tweak);
        if (tweak.cmp(ecparams.n) >= 0)
          return 2;
        const point = pair.getPublic().add(ecparams.g.mul(tweak));
        if (point.isInfinity())
          return 2;
        savePublicKey(output, point);
        return 0;
      },
      publicKeyTweakMul(output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 1;
        tweak = new BN(tweak);
        if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero())
          return 2;
        const point = pair.getPublic().mul(tweak);
        savePublicKey(output, point);
        return 0;
      },
      signatureNormalize(sig) {
        const r = new BN(sig.subarray(0, 32));
        const s = new BN(sig.subarray(32, 64));
        if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0)
          return 1;
        if (s.cmp(ec.nh) === 1) {
          sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, "be", 32), 32);
        }
        return 0;
      },
      signatureExport(obj, sig) {
        const sigR = sig.subarray(0, 32);
        const sigS = sig.subarray(32, 64);
        if (new BN(sigR).cmp(ecparams.n) >= 0)
          return 1;
        if (new BN(sigS).cmp(ecparams.n) >= 0)
          return 1;
        const { output } = obj;
        let r = output.subarray(4, 4 + 33);
        r[0] = 0;
        r.set(sigR, 1);
        let lenR = 33;
        let posR = 0;
        for (; lenR > 1 && r[posR] === 0 && !(r[posR + 1] & 128); --lenR, ++posR)
          ;
        r = r.subarray(posR);
        if (r[0] & 128)
          return 1;
        if (lenR > 1 && r[0] === 0 && !(r[1] & 128))
          return 1;
        let s = output.subarray(6 + 33, 6 + 33 + 33);
        s[0] = 0;
        s.set(sigS, 1);
        let lenS = 33;
        let posS = 0;
        for (; lenS > 1 && s[posS] === 0 && !(s[posS + 1] & 128); --lenS, ++posS)
          ;
        s = s.subarray(posS);
        if (s[0] & 128)
          return 1;
        if (lenS > 1 && s[0] === 0 && !(s[1] & 128))
          return 1;
        obj.outputlen = 6 + lenR + lenS;
        output[0] = 48;
        output[1] = obj.outputlen - 2;
        output[2] = 2;
        output[3] = r.length;
        output.set(r, 4);
        output[4 + lenR] = 2;
        output[5 + lenR] = s.length;
        output.set(s, 6 + lenR);
        return 0;
      },
      signatureImport(output, sig) {
        if (sig.length < 8)
          return 1;
        if (sig.length > 72)
          return 1;
        if (sig[0] !== 48)
          return 1;
        if (sig[1] !== sig.length - 2)
          return 1;
        if (sig[2] !== 2)
          return 1;
        const lenR = sig[3];
        if (lenR === 0)
          return 1;
        if (5 + lenR >= sig.length)
          return 1;
        if (sig[4 + lenR] !== 2)
          return 1;
        const lenS = sig[5 + lenR];
        if (lenS === 0)
          return 1;
        if (6 + lenR + lenS !== sig.length)
          return 1;
        if (sig[4] & 128)
          return 1;
        if (lenR > 1 && sig[4] === 0 && !(sig[5] & 128))
          return 1;
        if (sig[lenR + 6] & 128)
          return 1;
        if (lenS > 1 && sig[lenR + 6] === 0 && !(sig[lenR + 7] & 128))
          return 1;
        let sigR = sig.subarray(4, 4 + lenR);
        if (sigR.length === 33 && sigR[0] === 0)
          sigR = sigR.subarray(1);
        if (sigR.length > 32)
          return 1;
        let sigS = sig.subarray(6 + lenR);
        if (sigS.length === 33 && sigS[0] === 0)
          sigS = sigS.slice(1);
        if (sigS.length > 32)
          throw new Error("S length is too long");
        let r = new BN(sigR);
        if (r.cmp(ecparams.n) >= 0)
          r = new BN(0);
        let s = new BN(sig.subarray(6 + lenR));
        if (s.cmp(ecparams.n) >= 0)
          s = new BN(0);
        output.set(r.toArrayLike(Uint8Array, "be", 32), 0);
        output.set(s.toArrayLike(Uint8Array, "be", 32), 32);
        return 0;
      },
      ecdsaSign(obj, message, seckey, data, noncefn) {
        if (noncefn) {
          const _noncefn = noncefn;
          noncefn = (counter) => {
            const nonce = _noncefn(message, seckey, null, data, counter);
            const isValid = nonce instanceof Uint8Array && nonce.length === 32;
            if (!isValid)
              throw new Error("This is the way");
            return new BN(nonce);
          };
        }
        const d = new BN(seckey);
        if (d.cmp(ecparams.n) >= 0 || d.isZero())
          return 1;
        let sig;
        try {
          sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data });
        } catch (err) {
          return 1;
        }
        obj.signature.set(sig.r.toArrayLike(Uint8Array, "be", 32), 0);
        obj.signature.set(sig.s.toArrayLike(Uint8Array, "be", 32), 32);
        obj.recid = sig.recoveryParam;
        return 0;
      },
      ecdsaVerify(sig, msg32, pubkey) {
        const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) };
        const sigr = new BN(sigObj.r);
        const sigs = new BN(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0)
          return 1;
        if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero())
          return 3;
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 2;
        const point = pair.getPublic();
        const isValid = ec.verify(msg32, sigObj, point);
        return isValid ? 0 : 3;
      },
      ecdsaRecover(output, sig, recid, msg32) {
        const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) };
        const sigr = new BN(sigObj.r);
        const sigs = new BN(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0)
          return 1;
        if (sigr.isZero() || sigs.isZero())
          return 2;
        let point;
        try {
          point = ec.recoverPubKey(msg32, sigObj, recid);
        } catch (err) {
          return 2;
        }
        savePublicKey(output, point);
        return 0;
      },
      ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 1;
        const scalar = new BN(seckey);
        if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero())
          return 2;
        const point = pair.getPublic().mul(scalar);
        if (hashfn === void 0) {
          const data2 = point.encode(null, true);
          const sha256 = ec.hash().update(data2).digest();
          for (let i = 0; i < 32; ++i)
            output[i] = sha256[i];
        } else {
          if (!xbuf)
            xbuf = new Uint8Array(32);
          const x = point.getX().toArray("be", 32);
          for (let i = 0; i < 32; ++i)
            xbuf[i] = x[i];
          if (!ybuf)
            ybuf = new Uint8Array(32);
          const y = point.getY().toArray("be", 32);
          for (let i = 0; i < 32; ++i)
            ybuf[i] = y[i];
          const hash = hashfn(xbuf, ybuf, data);
          const isValid = hash instanceof Uint8Array && hash.length === output.length;
          if (!isValid)
            return 2;
          output.set(hash);
        }
        return 0;
      }
    };
  }
});

// node_modules/secp256k1/elliptic.js
var require_elliptic3 = __commonJS({
  "node_modules/secp256k1/elliptic.js"(exports, module) {
    init_shim();
    module.exports = require_lib2()(require_elliptic2());
  }
});

// node_modules/ethereum-cryptography/random.js
var require_random = __commonJS({
  "node_modules/ethereum-cryptography/random.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var randombytes = require_browser();
    function getRandomBytes(bytes) {
      return new Promise(function(resolve, reject) {
        randombytes(bytes, function(err, resp) {
          if (err) {
            reject(err);
            return;
          }
          resolve(resp);
        });
      });
    }
    exports.getRandomBytes = getRandomBytes;
    function getRandomBytesSync(bytes) {
      return randombytes(bytes);
    }
    exports.getRandomBytesSync = getRandomBytesSync;
  }
});

// node_modules/ethereum-cryptography/secp256k1.js
var require_secp256k1 = __commonJS({
  "node_modules/ethereum-cryptography/secp256k1.js"(exports) {
    "use strict";
    init_shim();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    function __export(m) {
      for (var p in m)
        if (!exports.hasOwnProperty(p))
          exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    var secp256k1_1 = require_elliptic3();
    var random_1 = require_random();
    var SECP256K1_PRIVATE_KEY_SIZE = 32;
    function createPrivateKey() {
      return __awaiter(this, void 0, void 0, function() {
        var pk;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (false)
                return [3, 2];
              return [4, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
            case 1:
              pk = _a.sent();
              if (secp256k1_1.privateKeyVerify(pk)) {
                return [2, pk];
              }
              return [3, 0];
            case 2:
              return [2];
          }
        });
      });
    }
    exports.createPrivateKey = createPrivateKey;
    function createPrivateKeySync() {
      while (true) {
        var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
        if (secp256k1_1.privateKeyVerify(pk)) {
          return pk;
        }
      }
    }
    exports.createPrivateKeySync = createPrivateKeySync;
    __export(require_elliptic3());
  }
});

// node_modules/ethereumjs-util/dist.browser/internal.js
var require_internal = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/internal.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
    function isHexPrefixed(str) {
      if (typeof str !== "string") {
        throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat(typeof str));
      }
      return str[0] === "0" && str[1] === "x";
    }
    exports.isHexPrefixed = isHexPrefixed;
    var stripHexPrefix = function(str) {
      if (typeof str !== "string")
        throw new Error("[stripHexPrefix] input must be type 'string', received ".concat(typeof str));
      return isHexPrefixed(str) ? str.slice(2) : str;
    };
    exports.stripHexPrefix = stripHexPrefix;
    function padToEven(value) {
      var a = value;
      if (typeof a !== "string") {
        throw new Error("[padToEven] value must be type 'string', received ".concat(typeof a));
      }
      if (a.length % 2)
        a = "0".concat(a);
      return a;
    }
    exports.padToEven = padToEven;
    function getBinarySize(str) {
      if (typeof str !== "string") {
        throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat(typeof str));
      }
      return import_buffer.Buffer.byteLength(str, "utf8");
    }
    exports.getBinarySize = getBinarySize;
    function arrayContainsArray(superset, subset, some) {
      if (Array.isArray(superset) !== true) {
        throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(typeof superset, "'"));
      }
      if (Array.isArray(subset) !== true) {
        throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(typeof subset, "'"));
      }
      return subset[some ? "some" : "every"](function(value) {
        return superset.indexOf(value) >= 0;
      });
    }
    exports.arrayContainsArray = arrayContainsArray;
    function toAscii(hex) {
      var str = "";
      var i = 0;
      var l = hex.length;
      if (hex.substring(0, 2) === "0x")
        i = 2;
      for (; i < l; i += 2) {
        var code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
      }
      return str;
    }
    exports.toAscii = toAscii;
    function fromUtf8(stringValue) {
      var str = import_buffer.Buffer.from(stringValue, "utf8");
      return "0x".concat(padToEven(str.toString("hex")).replace(/^0+|0+$/g, ""));
    }
    exports.fromUtf8 = fromUtf8;
    function fromAscii(stringValue) {
      var hex = "";
      for (var i = 0; i < stringValue.length; i++) {
        var code = stringValue.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? "0".concat(n) : n;
      }
      return "0x".concat(hex);
    }
    exports.fromAscii = fromAscii;
    function getKeys(params, key, allowEmpty) {
      if (!Array.isArray(params)) {
        throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat(typeof params));
      }
      if (typeof key !== "string") {
        throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(typeof params));
      }
      var result = [];
      for (var i = 0; i < params.length; i++) {
        var value = params[i][key];
        if (allowEmpty && !value) {
          value = "";
        } else if (typeof value !== "string") {
          throw new Error("invalid abi - expected type 'string', received ".concat(typeof value));
        }
        result.push(value);
      }
      return result;
    }
    exports.getKeys = getKeys;
    function isHexString(value, length) {
      if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/))
        return false;
      if (length && value.length !== 2 + 2 * length)
        return false;
      return true;
    }
    exports.isHexString = isHexString;
  }
});

// node_modules/ethereumjs-util/dist.browser/helpers.js
var require_helpers = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/helpers.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;
    var internal_1 = require_internal();
    var assertIsHexString = function(input) {
      if (!(0, internal_1.isHexString)(input)) {
        var msg = "This method only supports 0x-prefixed hex strings but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports.assertIsHexString = assertIsHexString;
    var assertIsBuffer = function(input) {
      if (!import_buffer.Buffer.isBuffer(input)) {
        var msg = "This method only supports Buffer but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports.assertIsBuffer = assertIsBuffer;
    var assertIsArray = function(input) {
      if (!Array.isArray(input)) {
        var msg = "This method only supports number arrays but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports.assertIsArray = assertIsArray;
    var assertIsString = function(input) {
      if (typeof input !== "string") {
        var msg = "This method only supports strings but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports.assertIsString = assertIsString;
  }
});

// node_modules/ethereumjs-util/dist.browser/bytes.js
var require_bytes = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/bytes.js"(exports) {
    "use strict";
    init_shim();
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;
    var externals_1 = require_externals();
    var internal_1 = require_internal();
    var helpers_1 = require_helpers();
    var intToHex = function(i) {
      if (!Number.isSafeInteger(i) || i < 0) {
        throw new Error("Received an invalid integer type: ".concat(i));
      }
      return "0x".concat(i.toString(16));
    };
    exports.intToHex = intToHex;
    var intToBuffer = function(i) {
      var hex = (0, exports.intToHex)(i);
      return import_buffer.Buffer.from((0, internal_1.padToEven)(hex.slice(2)), "hex");
    };
    exports.intToBuffer = intToBuffer;
    var zeros = function(bytes) {
      return import_buffer.Buffer.allocUnsafe(bytes).fill(0);
    };
    exports.zeros = zeros;
    var setLength = function(msg, length, right) {
      var buf = (0, exports.zeros)(length);
      if (right) {
        if (msg.length < length) {
          msg.copy(buf);
          return buf;
        }
        return msg.slice(0, length);
      } else {
        if (msg.length < length) {
          msg.copy(buf, length - msg.length);
          return buf;
        }
        return msg.slice(-length);
      }
    };
    var setLengthLeft = function(msg, length) {
      (0, helpers_1.assertIsBuffer)(msg);
      return setLength(msg, length, false);
    };
    exports.setLengthLeft = setLengthLeft;
    var setLengthRight = function(msg, length) {
      (0, helpers_1.assertIsBuffer)(msg);
      return setLength(msg, length, true);
    };
    exports.setLengthRight = setLengthRight;
    var stripZeros = function(a) {
      var first = a[0];
      while (a.length > 0 && first.toString() === "0") {
        a = a.slice(1);
        first = a[0];
      }
      return a;
    };
    var unpadBuffer = function(a) {
      (0, helpers_1.assertIsBuffer)(a);
      return stripZeros(a);
    };
    exports.unpadBuffer = unpadBuffer;
    var unpadArray = function(a) {
      (0, helpers_1.assertIsArray)(a);
      return stripZeros(a);
    };
    exports.unpadArray = unpadArray;
    var unpadHexString = function(a) {
      (0, helpers_1.assertIsHexString)(a);
      a = (0, internal_1.stripHexPrefix)(a);
      return stripZeros(a);
    };
    exports.unpadHexString = unpadHexString;
    var toBuffer = function(v) {
      if (v === null || v === void 0) {
        return import_buffer.Buffer.allocUnsafe(0);
      }
      if (import_buffer.Buffer.isBuffer(v)) {
        return import_buffer.Buffer.from(v);
      }
      if (Array.isArray(v) || v instanceof Uint8Array) {
        return import_buffer.Buffer.from(v);
      }
      if (typeof v === "string") {
        if (!(0, internal_1.isHexString)(v)) {
          throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(v));
        }
        return import_buffer.Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), "hex");
      }
      if (typeof v === "number") {
        return (0, exports.intToBuffer)(v);
      }
      if (externals_1.BN.isBN(v)) {
        if (v.isNeg()) {
          throw new Error("Cannot convert negative BN to buffer. Given: ".concat(v));
        }
        return v.toArrayLike(import_buffer.Buffer);
      }
      if (v.toArray) {
        return import_buffer.Buffer.from(v.toArray());
      }
      if (v.toBuffer) {
        return import_buffer.Buffer.from(v.toBuffer());
      }
      throw new Error("invalid type");
    };
    exports.toBuffer = toBuffer;
    var bufferToInt = function(buf) {
      return new externals_1.BN((0, exports.toBuffer)(buf)).toNumber();
    };
    exports.bufferToInt = bufferToInt;
    var bufferToHex = function(buf) {
      buf = (0, exports.toBuffer)(buf);
      return "0x" + buf.toString("hex");
    };
    exports.bufferToHex = bufferToHex;
    var fromSigned = function(num) {
      return new externals_1.BN(num).fromTwos(256);
    };
    exports.fromSigned = fromSigned;
    var toUnsigned = function(num) {
      return import_buffer.Buffer.from(num.toTwos(256).toArray());
    };
    exports.toUnsigned = toUnsigned;
    var addHexPrefix = function(str) {
      if (typeof str !== "string") {
        return str;
      }
      return (0, internal_1.isHexPrefixed)(str) ? str : "0x" + str;
    };
    exports.addHexPrefix = addHexPrefix;
    var toUtf8 = function(hex) {
      var zerosRegexp = /^(00)+|(00)+$/g;
      hex = (0, internal_1.stripHexPrefix)(hex);
      if (hex.length % 2 !== 0) {
        throw new Error("Invalid non-even hex string input for toUtf8() provided");
      }
      var bufferVal = import_buffer.Buffer.from(hex.replace(zerosRegexp, ""), "hex");
      return bufferVal.toString("utf8");
    };
    exports.toUtf8 = toUtf8;
    var baToJSON = function(ba) {
      if (import_buffer.Buffer.isBuffer(ba)) {
        return "0x".concat(ba.toString("hex"));
      } else if (ba instanceof Array) {
        var array = [];
        for (var i = 0; i < ba.length; i++) {
          array.push((0, exports.baToJSON)(ba[i]));
        }
        return array;
      }
    };
    exports.baToJSON = baToJSON;
    var validateNoLeadingZeroes = function(values) {
      var e_1, _a;
      try {
        for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var _d = __read(_c.value, 2), k = _d[0], v = _d[1];
          if (v !== void 0 && v.length > 0 && v[0] === 0) {
            throw new Error("".concat(k, " cannot have leading zeroes, received: ").concat(v.toString("hex")));
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    };
    exports.validateNoLeadingZeroes = validateNoLeadingZeroes;
    function arrToBufArr(arr) {
      if (!Array.isArray(arr)) {
        return import_buffer.Buffer.from(arr);
      }
      return arr.map(function(a) {
        return arrToBufArr(a);
      });
    }
    exports.arrToBufArr = arrToBufArr;
    function bufArrToArr(arr) {
      if (!Array.isArray(arr)) {
        return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);
      }
      return arr.map(function(a) {
        return bufArrToArr(a);
      });
    }
    exports.bufArrToArr = bufArrToArr;
  }
});

// node_modules/ethereum-cryptography/hash-utils.js
var require_hash_utils = __commonJS({
  "node_modules/ethereum-cryptography/hash-utils.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    function createHashFunction(hashConstructor) {
      return function(msg) {
        var hash = hashConstructor();
        hash.update(msg);
        return import_buffer.Buffer.from(hash.digest());
      };
    }
    exports.createHashFunction = createHashFunction;
  }
});

// node_modules/ethereum-cryptography/keccak.js
var require_keccak = __commonJS({
  "node_modules/ethereum-cryptography/keccak.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var hash_utils_1 = require_hash_utils();
    var createKeccakHash = require_js();
    exports.keccak224 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak224");
    });
    exports.keccak256 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak256");
    });
    exports.keccak384 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak384");
    });
    exports.keccak512 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak512");
    });
  }
});

// node_modules/ethereumjs-util/dist.browser/hash.js
var require_hash = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/hash.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;
    var keccak_1 = require_keccak();
    var createHash = require_browser2();
    var externals_1 = require_externals();
    var bytes_1 = require_bytes();
    var helpers_1 = require_helpers();
    var keccak = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsBuffer)(a);
      switch (bits) {
        case 224: {
          return (0, keccak_1.keccak224)(a);
        }
        case 256: {
          return (0, keccak_1.keccak256)(a);
        }
        case 384: {
          return (0, keccak_1.keccak384)(a);
        }
        case 512: {
          return (0, keccak_1.keccak512)(a);
        }
        default: {
          throw new Error("Invald algorithm: keccak".concat(bits));
        }
      }
    };
    exports.keccak = keccak;
    var keccak256 = function(a) {
      return (0, exports.keccak)(a);
    };
    exports.keccak256 = keccak256;
    var keccakFromString = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsString)(a);
      var buf = import_buffer.Buffer.from(a, "utf8");
      return (0, exports.keccak)(buf, bits);
    };
    exports.keccakFromString = keccakFromString;
    var keccakFromHexString = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsHexString)(a);
      return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
    };
    exports.keccakFromHexString = keccakFromHexString;
    var keccakFromArray = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsArray)(a);
      return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
    };
    exports.keccakFromArray = keccakFromArray;
    var _sha256 = function(a) {
      a = (0, bytes_1.toBuffer)(a);
      return createHash("sha256").update(a).digest();
    };
    var sha256 = function(a) {
      (0, helpers_1.assertIsBuffer)(a);
      return _sha256(a);
    };
    exports.sha256 = sha256;
    var sha256FromString = function(a) {
      (0, helpers_1.assertIsString)(a);
      return _sha256(a);
    };
    exports.sha256FromString = sha256FromString;
    var sha256FromArray = function(a) {
      (0, helpers_1.assertIsArray)(a);
      return _sha256(a);
    };
    exports.sha256FromArray = sha256FromArray;
    var _ripemd160 = function(a, padded) {
      a = (0, bytes_1.toBuffer)(a);
      var hash = createHash("rmd160").update(a).digest();
      if (padded === true) {
        return (0, bytes_1.setLengthLeft)(hash, 32);
      } else {
        return hash;
      }
    };
    var ripemd160 = function(a, padded) {
      (0, helpers_1.assertIsBuffer)(a);
      return _ripemd160(a, padded);
    };
    exports.ripemd160 = ripemd160;
    var ripemd160FromString = function(a, padded) {
      (0, helpers_1.assertIsString)(a);
      return _ripemd160(a, padded);
    };
    exports.ripemd160FromString = ripemd160FromString;
    var ripemd160FromArray = function(a, padded) {
      (0, helpers_1.assertIsArray)(a);
      return _ripemd160(a, padded);
    };
    exports.ripemd160FromArray = ripemd160FromArray;
    var rlphash = function(a) {
      return (0, exports.keccak)(externals_1.rlp.encode(a));
    };
    exports.rlphash = rlphash;
  }
});

// node_modules/ethereumjs-util/dist.browser/types.js
var require_types3 = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/types.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;
    var externals_1 = require_externals();
    var internal_1 = require_internal();
    var bytes_1 = require_bytes();
    function bnToHex(value) {
      return "0x".concat(value.toString(16));
    }
    exports.bnToHex = bnToHex;
    function bnToUnpaddedBuffer(value) {
      return (0, bytes_1.unpadBuffer)(value.toArrayLike(import_buffer.Buffer));
    }
    exports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;
    function bnToRlp(value) {
      return bnToUnpaddedBuffer(value);
    }
    exports.bnToRlp = bnToRlp;
    var TypeOutput;
    (function(TypeOutput2) {
      TypeOutput2[TypeOutput2["Number"] = 0] = "Number";
      TypeOutput2[TypeOutput2["BN"] = 1] = "BN";
      TypeOutput2[TypeOutput2["Buffer"] = 2] = "Buffer";
      TypeOutput2[TypeOutput2["PrefixedHexString"] = 3] = "PrefixedHexString";
    })(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));
    function toType(input, outputType) {
      if (input === null) {
        return null;
      }
      if (input === void 0) {
        return void 0;
      }
      if (typeof input === "string" && !(0, internal_1.isHexString)(input)) {
        throw new Error("A string must be provided with a 0x-prefix, given: ".concat(input));
      } else if (typeof input === "number" && !Number.isSafeInteger(input)) {
        throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
      }
      var output = (0, bytes_1.toBuffer)(input);
      if (outputType === TypeOutput.Buffer) {
        return output;
      } else if (outputType === TypeOutput.BN) {
        return new externals_1.BN(output);
      } else if (outputType === TypeOutput.Number) {
        var bn = new externals_1.BN(output);
        var max = new externals_1.BN(Number.MAX_SAFE_INTEGER.toString());
        if (bn.gt(max)) {
          throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
        }
        return bn.toNumber();
      } else {
        return "0x".concat(output.toString("hex"));
      }
    }
    exports.toType = toType;
  }
});

// node_modules/ethereumjs-util/dist.browser/account.js
var require_account = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/account.js"(exports) {
    "use strict";
    init_shim();
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;
    var assert_1 = __importDefault(require_assert());
    var externals_1 = require_externals();
    var secp256k1_1 = require_secp256k1();
    var internal_1 = require_internal();
    var constants_1 = require_constants();
    var bytes_1 = require_bytes();
    var hash_1 = require_hash();
    var helpers_1 = require_helpers();
    var types_1 = require_types3();
    var Account = function() {
      function Account2(nonce, balance, stateRoot, codeHash) {
        if (nonce === void 0) {
          nonce = new externals_1.BN(0);
        }
        if (balance === void 0) {
          balance = new externals_1.BN(0);
        }
        if (stateRoot === void 0) {
          stateRoot = constants_1.KECCAK256_RLP;
        }
        if (codeHash === void 0) {
          codeHash = constants_1.KECCAK256_NULL;
        }
        this.nonce = nonce;
        this.balance = balance;
        this.stateRoot = stateRoot;
        this.codeHash = codeHash;
        this._validate();
      }
      Account2.fromAccountData = function(accountData) {
        var nonce = accountData.nonce, balance = accountData.balance, stateRoot = accountData.stateRoot, codeHash = accountData.codeHash;
        return new Account2(nonce ? new externals_1.BN((0, bytes_1.toBuffer)(nonce)) : void 0, balance ? new externals_1.BN((0, bytes_1.toBuffer)(balance)) : void 0, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : void 0, codeHash ? (0, bytes_1.toBuffer)(codeHash) : void 0);
      };
      Account2.fromRlpSerializedAccount = function(serialized) {
        var values = externals_1.rlp.decode(serialized);
        if (!Array.isArray(values)) {
          throw new Error("Invalid serialized account input. Must be array");
        }
        return this.fromValuesArray(values);
      };
      Account2.fromValuesArray = function(values) {
        var _a = __read(values, 4), nonce = _a[0], balance = _a[1], stateRoot = _a[2], codeHash = _a[3];
        return new Account2(new externals_1.BN(nonce), new externals_1.BN(balance), stateRoot, codeHash);
      };
      Account2.prototype._validate = function() {
        if (this.nonce.lt(new externals_1.BN(0))) {
          throw new Error("nonce must be greater than zero");
        }
        if (this.balance.lt(new externals_1.BN(0))) {
          throw new Error("balance must be greater than zero");
        }
        if (this.stateRoot.length !== 32) {
          throw new Error("stateRoot must have a length of 32");
        }
        if (this.codeHash.length !== 32) {
          throw new Error("codeHash must have a length of 32");
        }
      };
      Account2.prototype.raw = function() {
        return [
          (0, types_1.bnToUnpaddedBuffer)(this.nonce),
          (0, types_1.bnToUnpaddedBuffer)(this.balance),
          this.stateRoot,
          this.codeHash
        ];
      };
      Account2.prototype.serialize = function() {
        return externals_1.rlp.encode(this.raw());
      };
      Account2.prototype.isContract = function() {
        return !this.codeHash.equals(constants_1.KECCAK256_NULL);
      };
      Account2.prototype.isEmpty = function() {
        return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);
      };
      return Account2;
    }();
    exports.Account = Account;
    var isValidAddress = function(hexAddress) {
      try {
        (0, helpers_1.assertIsString)(hexAddress);
      } catch (e) {
        return false;
      }
      return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
    };
    exports.isValidAddress = isValidAddress;
    var toChecksumAddress = function(hexAddress, eip1191ChainId) {
      (0, helpers_1.assertIsHexString)(hexAddress);
      var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();
      var prefix = "";
      if (eip1191ChainId) {
        var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);
        prefix = chainId.toString() + "0x";
      }
      var hash = (0, hash_1.keccakFromString)(prefix + address).toString("hex");
      var ret = "0x";
      for (var i = 0; i < address.length; i++) {
        if (parseInt(hash[i], 16) >= 8) {
          ret += address[i].toUpperCase();
        } else {
          ret += address[i];
        }
      }
      return ret;
    };
    exports.toChecksumAddress = toChecksumAddress;
    var isValidChecksumAddress = function(hexAddress, eip1191ChainId) {
      return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;
    };
    exports.isValidChecksumAddress = isValidChecksumAddress;
    var generateAddress = function(from, nonce) {
      (0, helpers_1.assertIsBuffer)(from);
      (0, helpers_1.assertIsBuffer)(nonce);
      var nonceBN = new externals_1.BN(nonce);
      if (nonceBN.isZero()) {
        return (0, hash_1.rlphash)([from, null]).slice(-20);
      }
      return (0, hash_1.rlphash)([from, import_buffer.Buffer.from(nonceBN.toArray())]).slice(-20);
    };
    exports.generateAddress = generateAddress;
    var generateAddress2 = function(from, salt, initCode) {
      (0, helpers_1.assertIsBuffer)(from);
      (0, helpers_1.assertIsBuffer)(salt);
      (0, helpers_1.assertIsBuffer)(initCode);
      (0, assert_1.default)(from.length === 20);
      (0, assert_1.default)(salt.length === 32);
      var address = (0, hash_1.keccak256)(import_buffer.Buffer.concat([import_buffer.Buffer.from("ff", "hex"), from, salt, (0, hash_1.keccak256)(initCode)]));
      return address.slice(-20);
    };
    exports.generateAddress2 = generateAddress2;
    var isValidPrivate = function(privateKey) {
      return (0, secp256k1_1.privateKeyVerify)(privateKey);
    };
    exports.isValidPrivate = isValidPrivate;
    var isValidPublic = function(publicKey, sanitize) {
      if (sanitize === void 0) {
        sanitize = false;
      }
      (0, helpers_1.assertIsBuffer)(publicKey);
      if (publicKey.length === 64) {
        return (0, secp256k1_1.publicKeyVerify)(import_buffer.Buffer.concat([import_buffer.Buffer.from([4]), publicKey]));
      }
      if (!sanitize) {
        return false;
      }
      return (0, secp256k1_1.publicKeyVerify)(publicKey);
    };
    exports.isValidPublic = isValidPublic;
    var pubToAddress = function(pubKey, sanitize) {
      if (sanitize === void 0) {
        sanitize = false;
      }
      (0, helpers_1.assertIsBuffer)(pubKey);
      if (sanitize && pubKey.length !== 64) {
        pubKey = import_buffer.Buffer.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));
      }
      (0, assert_1.default)(pubKey.length === 64);
      return (0, hash_1.keccak)(pubKey).slice(-20);
    };
    exports.pubToAddress = pubToAddress;
    exports.publicToAddress = exports.pubToAddress;
    var privateToPublic = function(privateKey) {
      (0, helpers_1.assertIsBuffer)(privateKey);
      return import_buffer.Buffer.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);
    };
    exports.privateToPublic = privateToPublic;
    var privateToAddress = function(privateKey) {
      return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));
    };
    exports.privateToAddress = privateToAddress;
    var importPublic = function(publicKey) {
      (0, helpers_1.assertIsBuffer)(publicKey);
      if (publicKey.length !== 64) {
        publicKey = import_buffer.Buffer.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));
      }
      return publicKey;
    };
    exports.importPublic = importPublic;
    var zeroAddress = function() {
      var addressLength = 20;
      var addr = (0, bytes_1.zeros)(addressLength);
      return (0, bytes_1.bufferToHex)(addr);
    };
    exports.zeroAddress = zeroAddress;
    var isZeroAddress = function(hexAddress) {
      try {
        (0, helpers_1.assertIsString)(hexAddress);
      } catch (e) {
        return false;
      }
      var zeroAddr = (0, exports.zeroAddress)();
      return zeroAddr === hexAddress;
    };
    exports.isZeroAddress = isZeroAddress;
  }
});

// node_modules/ethereumjs-util/dist.browser/address.js
var require_address = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/address.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Address = void 0;
    var assert_1 = __importDefault(require_assert());
    var externals_1 = require_externals();
    var bytes_1 = require_bytes();
    var account_1 = require_account();
    var Address = function() {
      function Address2(buf) {
        (0, assert_1.default)(buf.length === 20, "Invalid address length");
        this.buf = buf;
      }
      Address2.zero = function() {
        return new Address2((0, bytes_1.zeros)(20));
      };
      Address2.fromString = function(str) {
        (0, assert_1.default)((0, account_1.isValidAddress)(str), "Invalid address");
        return new Address2((0, bytes_1.toBuffer)(str));
      };
      Address2.fromPublicKey = function(pubKey) {
        (0, assert_1.default)(import_buffer.Buffer.isBuffer(pubKey), "Public key should be Buffer");
        var buf = (0, account_1.pubToAddress)(pubKey);
        return new Address2(buf);
      };
      Address2.fromPrivateKey = function(privateKey) {
        (0, assert_1.default)(import_buffer.Buffer.isBuffer(privateKey), "Private key should be Buffer");
        var buf = (0, account_1.privateToAddress)(privateKey);
        return new Address2(buf);
      };
      Address2.generate = function(from, nonce) {
        (0, assert_1.default)(externals_1.BN.isBN(nonce));
        return new Address2((0, account_1.generateAddress)(from.buf, nonce.toArrayLike(import_buffer.Buffer)));
      };
      Address2.generate2 = function(from, salt, initCode) {
        (0, assert_1.default)(import_buffer.Buffer.isBuffer(salt));
        (0, assert_1.default)(import_buffer.Buffer.isBuffer(initCode));
        return new Address2((0, account_1.generateAddress2)(from.buf, salt, initCode));
      };
      Address2.prototype.equals = function(address) {
        return this.buf.equals(address.buf);
      };
      Address2.prototype.isZero = function() {
        return this.equals(Address2.zero());
      };
      Address2.prototype.isPrecompileOrSystemAddress = function() {
        var addressBN = new externals_1.BN(this.buf);
        var rangeMin = new externals_1.BN(0);
        var rangeMax = new externals_1.BN("ffff", "hex");
        return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);
      };
      Address2.prototype.toString = function() {
        return "0x" + this.buf.toString("hex");
      };
      Address2.prototype.toBuffer = function() {
        return import_buffer.Buffer.from(this.buf);
      };
      return Address2;
    }();
    exports.Address = Address;
  }
});

// node_modules/ethereumjs-util/dist.browser/signature.js
var require_signature = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/signature.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;
    var secp256k1_1 = require_secp256k1();
    var externals_1 = require_externals();
    var bytes_1 = require_bytes();
    var hash_1 = require_hash();
    var helpers_1 = require_helpers();
    var types_1 = require_types3();
    function ecsign(msgHash, privateKey, chainId) {
      var _a = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey), signature = _a.signature, recovery = _a.recid;
      var r = import_buffer.Buffer.from(signature.slice(0, 32));
      var s = import_buffer.Buffer.from(signature.slice(32, 64));
      if (!chainId || typeof chainId === "number") {
        if (chainId && !Number.isSafeInteger(chainId)) {
          throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
        }
        var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;
        return { r, s, v: v_1 };
      }
      var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
      var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(import_buffer.Buffer);
      return { r, s, v };
    }
    exports.ecsign = ecsign;
    function calculateSigRecovery(v, chainId) {
      var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);
      if (vBN.eqn(0) || vBN.eqn(1))
        return (0, types_1.toType)(v, types_1.TypeOutput.BN);
      if (!chainId) {
        return vBN.subn(27);
      }
      var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
      return vBN.sub(chainIdBN.muln(2).addn(35));
    }
    function isValidSigRecovery(recovery) {
      var rec = new externals_1.BN(recovery);
      return rec.eqn(0) || rec.eqn(1);
    }
    var ecrecover = function(msgHash, v, r, s, chainId) {
      var signature = import_buffer.Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);
      return import_buffer.Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));
    };
    exports.ecrecover = ecrecover;
    var toRpcSig = function(v, r, s, chainId) {
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      return (0, bytes_1.bufferToHex)(import_buffer.Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));
    };
    exports.toRpcSig = toRpcSig;
    var toCompactSig = function(v, r, s, chainId) {
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);
      var ss = s;
      if (vn > 28 && vn % 2 === 1 || vn === 1 || vn === 28) {
        ss = import_buffer.Buffer.from(s);
        ss[0] |= 128;
      }
      return (0, bytes_1.bufferToHex)(import_buffer.Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));
    };
    exports.toCompactSig = toCompactSig;
    var fromRpcSig = function(sig) {
      var buf = (0, bytes_1.toBuffer)(sig);
      var r;
      var s;
      var v;
      if (buf.length >= 65) {
        r = buf.slice(0, 32);
        s = buf.slice(32, 64);
        v = (0, bytes_1.bufferToInt)(buf.slice(64));
      } else if (buf.length === 64) {
        r = buf.slice(0, 32);
        s = buf.slice(32, 64);
        v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;
        s[0] &= 127;
      } else {
        throw new Error("Invalid signature length");
      }
      if (v < 27) {
        v += 27;
      }
      return {
        v,
        r,
        s
      };
    };
    exports.fromRpcSig = fromRpcSig;
    var isValidSignature = function(v, r, s, homesteadOrLater, chainId) {
      if (homesteadOrLater === void 0) {
        homesteadOrLater = true;
      }
      var SECP256K1_N_DIV_2 = new externals_1.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16);
      var SECP256K1_N = new externals_1.BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", 16);
      if (r.length !== 32 || s.length !== 32) {
        return false;
      }
      if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
        return false;
      }
      var rBN = new externals_1.BN(r);
      var sBN = new externals_1.BN(s);
      if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
        return false;
      }
      if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
        return false;
      }
      return true;
    };
    exports.isValidSignature = isValidSignature;
    var hashPersonalMessage = function(message) {
      (0, helpers_1.assertIsBuffer)(message);
      var prefix = import_buffer.Buffer.from("Ethereum Signed Message:\n".concat(message.length), "utf-8");
      return (0, hash_1.keccak)(import_buffer.Buffer.concat([prefix, message]));
    };
    exports.hashPersonalMessage = hashPersonalMessage;
  }
});

// node_modules/ethereumjs-util/dist.browser/object.js
var require_object = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/object.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defineProperties = void 0;
    var assert_1 = __importDefault(require_assert());
    var internal_1 = require_internal();
    var externals_1 = require_externals();
    var bytes_1 = require_bytes();
    var defineProperties = function(self, fields, data) {
      self.raw = [];
      self._fields = [];
      self.toJSON = function(label) {
        if (label === void 0) {
          label = false;
        }
        if (label) {
          var obj_1 = {};
          self._fields.forEach(function(field) {
            obj_1[field] = "0x".concat(self[field].toString("hex"));
          });
          return obj_1;
        }
        return (0, bytes_1.baToJSON)(self.raw);
      };
      self.serialize = function serialize() {
        return externals_1.rlp.encode(self.raw);
      };
      fields.forEach(function(field, i) {
        self._fields.push(field.name);
        function getter() {
          return self.raw[i];
        }
        function setter(v) {
          v = (0, bytes_1.toBuffer)(v);
          if (v.toString("hex") === "00" && !field.allowZero) {
            v = import_buffer.Buffer.allocUnsafe(0);
          }
          if (field.allowLess && field.length) {
            v = (0, bytes_1.unpadBuffer)(v);
            (0, assert_1.default)(field.length >= v.length, "The field ".concat(field.name, " must not have more ").concat(field.length, " bytes"));
          } else if (!(field.allowZero && v.length === 0) && field.length) {
            (0, assert_1.default)(field.length === v.length, "The field ".concat(field.name, " must have byte length of ").concat(field.length));
          }
          self.raw[i] = v;
        }
        Object.defineProperty(self, field.name, {
          enumerable: true,
          configurable: true,
          get: getter,
          set: setter
        });
        if (field.default) {
          self[field.name] = field.default;
        }
        if (field.alias) {
          Object.defineProperty(self, field.alias, {
            enumerable: false,
            configurable: true,
            set: setter,
            get: getter
          });
        }
      });
      if (data) {
        if (typeof data === "string") {
          data = import_buffer.Buffer.from((0, internal_1.stripHexPrefix)(data), "hex");
        }
        if (import_buffer.Buffer.isBuffer(data)) {
          data = externals_1.rlp.decode(data);
        }
        if (Array.isArray(data)) {
          if (data.length > self._fields.length) {
            throw new Error("wrong number of fields in data");
          }
          data.forEach(function(d, i) {
            self[self._fields[i]] = (0, bytes_1.toBuffer)(d);
          });
        } else if (typeof data === "object") {
          var keys_1 = Object.keys(data);
          fields.forEach(function(field) {
            if (keys_1.indexOf(field.name) !== -1)
              self[field.name] = data[field.name];
            if (keys_1.indexOf(field.alias) !== -1)
              self[field.alias] = data[field.alias];
          });
        } else {
          throw new Error("invalid data");
        }
      }
    };
    exports.defineProperties = defineProperties;
  }
});

// node_modules/ethereumjs-util/dist.browser/index.js
var require_dist3 = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/index.js"(exports) {
    "use strict";
    init_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
    __exportStar(require_constants(), exports);
    __exportStar(require_account(), exports);
    __exportStar(require_address(), exports);
    __exportStar(require_hash(), exports);
    __exportStar(require_signature(), exports);
    __exportStar(require_bytes(), exports);
    __exportStar(require_object(), exports);
    __exportStar(require_externals(), exports);
    __exportStar(require_types3(), exports);
    var internal_1 = require_internal();
    Object.defineProperty(exports, "isHexPrefixed", { enumerable: true, get: function() {
      return internal_1.isHexPrefixed;
    } });
    Object.defineProperty(exports, "stripHexPrefix", { enumerable: true, get: function() {
      return internal_1.stripHexPrefix;
    } });
    Object.defineProperty(exports, "padToEven", { enumerable: true, get: function() {
      return internal_1.padToEven;
    } });
    Object.defineProperty(exports, "getBinarySize", { enumerable: true, get: function() {
      return internal_1.getBinarySize;
    } });
    Object.defineProperty(exports, "arrayContainsArray", { enumerable: true, get: function() {
      return internal_1.arrayContainsArray;
    } });
    Object.defineProperty(exports, "toAscii", { enumerable: true, get: function() {
      return internal_1.toAscii;
    } });
    Object.defineProperty(exports, "fromUtf8", { enumerable: true, get: function() {
      return internal_1.fromUtf8;
    } });
    Object.defineProperty(exports, "fromAscii", { enumerable: true, get: function() {
      return internal_1.fromAscii;
    } });
    Object.defineProperty(exports, "getKeys", { enumerable: true, get: function() {
      return internal_1.getKeys;
    } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function() {
      return internal_1.isHexString;
    } });
  }
});

// node_modules/ethereum-bloom-filters/dist/utils.js
var require_utils4 = __commonJS({
  "node_modules/ethereum-bloom-filters/dist/utils.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var sha3 = require_sha3();
    function keccak256(data) {
      return "0x" + sha3.keccak_256(toByteArray(data));
    }
    exports.keccak256 = keccak256;
    exports.padLeft = (value, chars) => {
      const hasPrefix = /^0x/i.test(value) || typeof value === "number";
      value = value.toString().replace(/^0x/i, "");
      const padding = chars - value.length + 1 >= 0 ? chars - value.length + 1 : 0;
      return (hasPrefix ? "0x" : "") + new Array(padding).join("0") + value;
    };
    function bytesToHex(bytes) {
      const hex = [];
      for (let i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 15).toString(16));
      }
      return `0x${hex.join("").replace(/^0+/, "")}`;
    }
    exports.bytesToHex = bytesToHex;
    function toByteArray(value) {
      if (value == null) {
        throw new Error("cannot convert null value to array");
      }
      if (typeof value === "string") {
        const match = value.match(/^(0x)?[0-9a-fA-F]*$/);
        if (!match) {
          throw new Error("invalid hexidecimal string");
        }
        if (match[1] !== "0x") {
          throw new Error("hex string must have 0x prefix");
        }
        value = value.substring(2);
        if (value.length % 2) {
          value = "0" + value;
        }
        const result = [];
        for (let i = 0; i < value.length; i += 2) {
          result.push(parseInt(value.substr(i, 2), 16));
        }
        return addSlice(new Uint8Array(result));
      }
      if (isByteArray(value)) {
        return addSlice(new Uint8Array(value));
      }
      throw new Error("invalid arrayify value");
    }
    exports.toByteArray = toByteArray;
    function isByteArray(value) {
      if (!value || parseInt(String(value.length)) != value.length || typeof value === "string") {
        return false;
      }
      for (let i = 0; i < value.length; i++) {
        const v = value[i];
        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {
          return false;
        }
      }
      return true;
    }
    function addSlice(array) {
      if (array.slice !== void 0) {
        return array;
      }
      array.slice = () => {
        const args = Array.prototype.slice.call(arguments);
        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
      };
      return array;
    }
  }
});

// node_modules/ethereum-bloom-filters/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/ethereum-bloom-filters/dist/index.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils4();
    function isBloom(bloom) {
      if (typeof bloom !== "string") {
        return false;
      }
      if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
        return false;
      }
      if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
        return true;
      }
      return false;
    }
    exports.isBloom = isBloom;
    function isInBloom(bloom, value) {
      if (typeof value === "object" && value.constructor === Uint8Array) {
        value = utils_1.bytesToHex(value);
      }
      const hash = utils_1.keccak256(value).replace("0x", "");
      for (let i = 0; i < 12; i += 4) {
        const bitpos = (parseInt(hash.substr(i, 2), 16) << 8) + parseInt(hash.substr(i + 2, 2), 16) & 2047;
        const code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));
        const offset = 1 << bitpos % 4;
        if ((code & offset) !== offset) {
          return false;
        }
      }
      return true;
    }
    exports.isInBloom = isInBloom;
    function codePointToInt(codePoint) {
      if (codePoint >= 48 && codePoint <= 57) {
        return codePoint - 48;
      }
      if (codePoint >= 65 && codePoint <= 70) {
        return codePoint - 55;
      }
      if (codePoint >= 97 && codePoint <= 102) {
        return codePoint - 87;
      }
      throw new Error("invalid bloom");
    }
    function isUserEthereumAddressInBloom(bloom, ethereumAddress) {
      if (!isBloom(bloom)) {
        throw new Error("Invalid bloom given");
      }
      if (!isAddress(ethereumAddress)) {
        throw new Error(`Invalid ethereum address given: "${ethereumAddress}"`);
      }
      const address = utils_1.padLeft(ethereumAddress, 64);
      return isInBloom(bloom, address);
    }
    exports.isUserEthereumAddressInBloom = isUserEthereumAddressInBloom;
    function isContractAddressInBloom(bloom, contractAddress) {
      if (!isBloom(bloom)) {
        throw new Error("Invalid bloom given");
      }
      if (!isAddress(contractAddress)) {
        throw new Error(`Invalid contract address given: "${contractAddress}"`);
      }
      return isInBloom(bloom, contractAddress);
    }
    exports.isContractAddressInBloom = isContractAddressInBloom;
    function isTopicInBloom(bloom, topic) {
      if (!isBloom(bloom)) {
        throw new Error("Invalid bloom given");
      }
      if (!isTopic(topic)) {
        throw new Error("Invalid topic");
      }
      return isInBloom(bloom, topic);
    }
    exports.isTopicInBloom = isTopicInBloom;
    function isTopic(topic) {
      if (typeof topic !== "string") {
        return false;
      }
      if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
        return false;
      } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
        return true;
      }
      return false;
    }
    exports.isTopic = isTopic;
    function isAddress(address) {
      if (typeof address !== "string") {
        return false;
      }
      if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
        return true;
      }
      if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
        return true;
      }
      return false;
    }
    exports.isAddress = isAddress;
  }
});

// node_modules/web3-utils/lib/utils.js
var require_utils5 = __commonJS({
  "node_modules/web3-utils/lib/utils.js"(exports, module) {
    init_shim();
    var BN = require_bn();
    var numberToBN = require_src5();
    var utf8 = require_utf8();
    var ethereumjsUtil = require_dist3();
    var ethereumBloomFilters = require_dist4();
    var isBN = function(object) {
      return BN.isBN(object);
    };
    var isBigNumber = function(object) {
      return object && object.constructor && object.constructor.name === "BigNumber";
    };
    var toBN = function(number) {
      try {
        return numberToBN.apply(null, arguments);
      } catch (e) {
        throw new Error(e + ' Given value: "' + number + '"');
      }
    };
    var toTwosComplement = function(number) {
      return "0x" + toBN(number).toTwos(256).toString(16, 64);
    };
    var isAddress = function(address) {
      if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
        return false;
      } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {
        return true;
      } else {
        return checkAddressChecksum(address);
      }
    };
    var checkAddressChecksum = function(address) {
      address = address.replace(/^0x/i, "");
      var addressHash = sha3(address.toLowerCase()).replace(/^0x/i, "");
      for (var i = 0; i < 40; i++) {
        if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {
          return false;
        }
      }
      return true;
    };
    var leftPad = function(string, chars, sign) {
      var hasPrefix = /^0x/i.test(string) || typeof string === "number";
      string = string.toString(16).replace(/^0x/i, "");
      var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;
      return (hasPrefix ? "0x" : "") + new Array(padding).join(sign ? sign : "0") + string;
    };
    var rightPad = function(string, chars, sign) {
      var hasPrefix = /^0x/i.test(string) || typeof string === "number";
      string = string.toString(16).replace(/^0x/i, "");
      var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;
      return (hasPrefix ? "0x" : "") + string + new Array(padding).join(sign ? sign : "0");
    };
    var utf8ToHex = function(str) {
      str = utf8.encode(str);
      var hex = "";
      str = str.replace(/^(?:\u0000)*/, "");
      str = str.split("").reverse().join("");
      str = str.replace(/^(?:\u0000)*/, "");
      str = str.split("").reverse().join("");
      for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? "0" + n : n;
      }
      return "0x" + hex;
    };
    var hexToUtf8 = function(hex) {
      if (!isHexStrict(hex))
        throw new Error('The parameter "' + hex + '" must be a valid HEX string.');
      var str = "";
      var code = 0;
      hex = hex.replace(/^0x/i, "");
      hex = hex.replace(/^(?:00)*/, "");
      hex = hex.split("").reverse().join("");
      hex = hex.replace(/^(?:00)*/, "");
      hex = hex.split("").reverse().join("");
      var l = hex.length;
      for (var i = 0; i < l; i += 2) {
        code = parseInt(hex.slice(i, i + 2), 16);
        str += String.fromCharCode(code);
      }
      return utf8.decode(str);
    };
    var hexToNumber = function(value, bigIntOnOverflow = false) {
      if (!value) {
        return value;
      }
      if (typeof value === "string" && !isHexStrict(value)) {
        throw new Error('Given value "' + value + '" is not a valid hex string.');
      }
      const n = toBN(value);
      if (bigIntOnOverflow && (n > Number.MAX_SAFE_INTEGER || n < Number.MIN_SAFE_INTEGER)) {
        return BigInt(n);
      }
      return n.toNumber();
    };
    var hexToNumberString = function(value) {
      if (!value)
        return value;
      if (typeof value === "string" && !isHexStrict(value)) {
        throw new Error('Given value "' + value + '" is not a valid hex string.');
      }
      return toBN(value).toString(10);
    };
    var numberToHex = function(value) {
      if (value === null || value === void 0) {
        return value;
      }
      if (!isFinite(value) && !isHexStrict(value)) {
        throw new Error('Given input "' + value + '" is not a number.');
      }
      var number = toBN(value);
      var result = number.toString(16);
      return number.lt(new BN(0)) ? "-0x" + result.slice(1) : "0x" + result;
    };
    var bytesToHex = function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 15).toString(16));
      }
      return "0x" + hex.join("");
    };
    var hexToBytes = function(hex) {
      hex = hex.toString(16);
      if (!isHexStrict(hex)) {
        throw new Error('Given value "' + hex + '" is not a valid hex string.');
      }
      hex = hex.replace(/^0x/i, "");
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.slice(c, c + 2), 16));
      return bytes;
    };
    var toHex = function(value, returnType) {
      if (isAddress(value)) {
        return returnType ? "address" : "0x" + value.toLowerCase().replace(/^0x/i, "");
      }
      if (typeof value === "boolean") {
        return returnType ? "bool" : value ? "0x01" : "0x00";
      }
      if (import_buffer.Buffer.isBuffer(value)) {
        return "0x" + value.toString("hex");
      }
      if (typeof value === "object" && !!value && !isBigNumber(value) && !isBN(value)) {
        return returnType ? "string" : utf8ToHex(JSON.stringify(value));
      }
      if (typeof value === "string") {
        if (value.indexOf("-0x") === 0 || value.indexOf("-0X") === 0) {
          return returnType ? "int256" : numberToHex(value);
        } else if (value.indexOf("0x") === 0 || value.indexOf("0X") === 0) {
          return returnType ? "bytes" : value;
        } else if (!isFinite(value)) {
          return returnType ? "string" : utf8ToHex(value);
        }
      }
      return returnType ? value < 0 ? "int256" : "uint256" : numberToHex(value);
    };
    var isHexStrict = function(hex) {
      return (typeof hex === "string" || typeof hex === "number") && /^(-)?0x[0-9a-f]*$/i.test(hex);
    };
    var isHex = function(hex) {
      return (typeof hex === "string" || typeof hex === "number") && /^(-0x|0x)?[0-9a-f]*$/i.test(hex);
    };
    var stripHexPrefix = function(str) {
      if (str !== 0 && isHex(str))
        return str.replace(/^(-)?0x/i, "$1");
      return str;
    };
    var isBloom = function(bloom) {
      return ethereumBloomFilters.isBloom(bloom);
    };
    var isUserEthereumAddressInBloom = function(bloom, ethereumAddress) {
      return ethereumBloomFilters.isUserEthereumAddressInBloom(bloom, ethereumAddress);
    };
    var isContractAddressInBloom = function(bloom, contractAddress) {
      return ethereumBloomFilters.isContractAddressInBloom(bloom, contractAddress);
    };
    var isTopic = function(topic) {
      return ethereumBloomFilters.isTopic(topic);
    };
    var isTopicInBloom = function(bloom, topic) {
      return ethereumBloomFilters.isTopicInBloom(bloom, topic);
    };
    var isInBloom = function(bloom, topic) {
      return ethereumBloomFilters.isInBloom(bloom, topic);
    };
    var SHA3_NULL_S = "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    var sha3 = function(value) {
      if (isBN(value)) {
        value = value.toString();
      }
      if (isHexStrict(value) && /^0x/i.test(value.toString())) {
        value = ethereumjsUtil.toBuffer(value);
      } else if (typeof value === "string") {
        value = import_buffer.Buffer.from(value, "utf-8");
      }
      var returnValue = ethereumjsUtil.bufferToHex(ethereumjsUtil.keccak256(value));
      if (returnValue === SHA3_NULL_S) {
        return null;
      } else {
        return returnValue;
      }
    };
    sha3._Hash = ethereumjsUtil.keccak256;
    var sha3Raw = function(value) {
      value = sha3(value);
      if (value === null) {
        return SHA3_NULL_S;
      }
      return value;
    };
    var toNumber = function(value, bigIntOnOverflow = false) {
      return typeof value === "number" ? value : hexToNumber(toHex(value), bigIntOnOverflow);
    };
    var BNwrapped = function(value) {
      if (typeof value == "string" && value.includes("0x")) {
        const [negative, hexValue] = value.toLocaleLowerCase().startsWith("-") ? ["-", value.slice(3)] : ["", value.slice(2)];
        return new BN(negative + hexValue, 16);
      } else {
        return new BN(value);
      }
    };
    Object.setPrototypeOf(BNwrapped, BN);
    Object.setPrototypeOf(BNwrapped.prototype, BN.prototype);
    module.exports = {
      BN: BNwrapped,
      isBN,
      isBigNumber,
      toBN,
      isAddress,
      isBloom,
      isUserEthereumAddressInBloom,
      isContractAddressInBloom,
      isTopic,
      isTopicInBloom,
      isInBloom,
      checkAddressChecksum,
      utf8ToHex,
      hexToUtf8,
      hexToNumber,
      hexToNumberString,
      numberToHex,
      toHex,
      hexToBytes,
      bytesToHex,
      isHex,
      isHexStrict,
      stripHexPrefix,
      leftPad,
      rightPad,
      toTwosComplement,
      sha3,
      sha3Raw,
      toNumber
    };
  }
});

// node_modules/web3-utils/lib/soliditySha3.js
var require_soliditySha3 = __commonJS({
  "node_modules/web3-utils/lib/soliditySha3.js"(exports, module) {
    init_shim();
    var BN = require_bn();
    var utils = require_utils5();
    var _elementaryName = function(name) {
      if (name.startsWith("int[")) {
        return "int256" + name.slice(3);
      } else if (name === "int") {
        return "int256";
      } else if (name.startsWith("uint[")) {
        return "uint256" + name.slice(4);
      } else if (name === "uint") {
        return "uint256";
      } else if (name.startsWith("fixed[")) {
        return "fixed128x128" + name.slice(5);
      } else if (name === "fixed") {
        return "fixed128x128";
      } else if (name.startsWith("ufixed[")) {
        return "ufixed128x128" + name.slice(6);
      } else if (name === "ufixed") {
        return "ufixed128x128";
      }
      return name;
    };
    var _parseTypeN = function(type) {
      var typesize = /^\D+(\d+).*$/.exec(type);
      return typesize ? parseInt(typesize[1], 10) : null;
    };
    var _parseTypeNArray = function(type) {
      var arraySize = /^\D+\d*\[(\d+)\]$/.exec(type);
      return arraySize ? parseInt(arraySize[1], 10) : null;
    };
    var _parseNumber = function(arg) {
      var type = typeof arg;
      if (type === "string") {
        if (utils.isHexStrict(arg)) {
          return new BN(arg.replace(/0x/i, ""), 16);
        } else {
          return new BN(arg, 10);
        }
      } else if (type === "number") {
        return new BN(arg);
      } else if (utils.isBigNumber(arg)) {
        return new BN(arg.toString(10));
      } else if (utils.isBN(arg)) {
        return arg;
      } else {
        throw new Error(arg + " is not a number");
      }
    };
    var _solidityPack = function(type, value, arraySize) {
      var size, num;
      type = _elementaryName(type);
      if (type === "bytes") {
        if (value.replace(/^0x/i, "").length % 2 !== 0) {
          throw new Error("Invalid bytes characters " + value.length);
        }
        return value;
      } else if (type === "string") {
        return utils.utf8ToHex(value);
      } else if (type === "bool") {
        return value ? "01" : "00";
      } else if (type.startsWith("address")) {
        if (arraySize) {
          size = 64;
        } else {
          size = 40;
        }
        if (!utils.isAddress(value)) {
          throw new Error(value + " is not a valid address, or the checksum is invalid.");
        }
        return utils.leftPad(value.toLowerCase(), size);
      }
      size = _parseTypeN(type);
      if (type.startsWith("bytes")) {
        if (!size) {
          throw new Error("bytes[] not yet supported in solidity");
        }
        if (arraySize) {
          size = 32;
        }
        if (size < 1 || size > 32 || size < value.replace(/^0x/i, "").length / 2) {
          throw new Error("Invalid bytes" + size + " for " + value);
        }
        return utils.rightPad(value, size * 2);
      } else if (type.startsWith("uint")) {
        if (size % 8 || size < 8 || size > 256) {
          throw new Error("Invalid uint" + size + " size");
        }
        num = _parseNumber(value);
        if (num.bitLength() > size) {
          throw new Error("Supplied uint exceeds width: " + size + " vs " + num.bitLength());
        }
        if (num.lt(new BN(0))) {
          throw new Error("Supplied uint " + num.toString() + " is negative");
        }
        return size ? utils.leftPad(num.toString("hex"), size / 8 * 2) : num;
      } else if (type.startsWith("int")) {
        if (size % 8 || size < 8 || size > 256) {
          throw new Error("Invalid int" + size + " size");
        }
        num = _parseNumber(value);
        if (num.bitLength() > size) {
          throw new Error("Supplied int exceeds width: " + size + " vs " + num.bitLength());
        }
        if (num.lt(new BN(0))) {
          return num.toTwos(size).toString("hex");
        } else {
          return size ? utils.leftPad(num.toString("hex"), size / 8 * 2) : num;
        }
      } else {
        throw new Error("Unsupported or invalid type: " + type);
      }
    };
    var _processSolidityEncodePackedArgs = function(arg) {
      if (Array.isArray(arg)) {
        throw new Error("Autodetection of array types is not supported.");
      }
      var type, value = "";
      var hexArg, arraySize;
      if (!!arg && typeof arg === "object" && (arg.hasOwnProperty("v") || arg.hasOwnProperty("t") || arg.hasOwnProperty("value") || arg.hasOwnProperty("type"))) {
        type = arg.hasOwnProperty("t") ? arg.t : arg.type;
        value = arg.hasOwnProperty("v") ? arg.v : arg.value;
      } else {
        type = utils.toHex(arg, true);
        value = utils.toHex(arg);
        if (!type.startsWith("int") && !type.startsWith("uint")) {
          type = "bytes";
        }
      }
      if ((type.startsWith("int") || type.startsWith("uint")) && typeof value === "string" && !/^(-)?0x/i.test(value)) {
        value = new BN(value);
      }
      if (Array.isArray(value)) {
        arraySize = _parseTypeNArray(type);
        if (arraySize && value.length !== arraySize) {
          throw new Error(type + " is not matching the given array " + JSON.stringify(value));
        } else {
          arraySize = value.length;
        }
      }
      if (Array.isArray(value)) {
        hexArg = value.map(function(val) {
          return _solidityPack(type, val, arraySize).toString("hex").replace("0x", "");
        });
        return hexArg.join("");
      } else {
        hexArg = _solidityPack(type, value, arraySize);
        return hexArg.toString("hex").replace("0x", "");
      }
    };
    var soliditySha3 = function() {
      var args = Array.prototype.slice.call(arguments);
      var hexArgs = args.map(_processSolidityEncodePackedArgs);
      return utils.sha3("0x" + hexArgs.join(""));
    };
    var soliditySha3Raw = function() {
      return utils.sha3Raw("0x" + Array.prototype.slice.call(arguments).map(_processSolidityEncodePackedArgs).join(""));
    };
    var encodePacked = function() {
      var args = Array.prototype.slice.call(arguments);
      var hexArgs = args.map(_processSolidityEncodePackedArgs);
      return "0x" + hexArgs.join("").toLowerCase();
    };
    module.exports = {
      soliditySha3,
      soliditySha3Raw,
      encodePacked
    };
  }
});

// node_modules/web3-utils/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/web3-utils/lib/index.js"(exports, module) {
    init_shim();
    var ethjsUnit = require_lib();
    var utils = require_utils5();
    var soliditySha3 = require_soliditySha3();
    var randombytes = require_browser();
    var BN = require_bn();
    var _fireError = function(error, emitter, reject, callback, optionalData) {
      if (!!error && typeof error === "object" && !(error instanceof Error) && error.data) {
        if (!!error.data && typeof error.data === "object" || Array.isArray(error.data)) {
          error.data = JSON.stringify(error.data, null, 2);
        }
        error = error.message + "\n" + error.data;
      }
      if (typeof error === "string") {
        error = new Error(error);
      }
      if (typeof callback === "function") {
        callback(error, optionalData);
      }
      if (typeof reject === "function") {
        if (emitter && (typeof emitter.listeners === "function" && emitter.listeners("error").length) || typeof callback === "function") {
          emitter.catch(function() {
          });
        }
        setTimeout(function() {
          reject(error);
        }, 1);
      }
      if (emitter && typeof emitter.emit === "function") {
        setTimeout(function() {
          emitter.emit("error", error, optionalData);
          emitter.removeAllListeners();
        }, 1);
      }
      return emitter;
    };
    var _jsonInterfaceMethodToString = function(json) {
      if (!!json && typeof json === "object" && json.name && json.name.indexOf("(") !== -1) {
        return json.name;
      }
      return json.name + "(" + _flattenTypes(false, json.inputs).join(",") + ")";
    };
    var _flattenTypes = function(includeTuple, puts) {
      var types = [];
      puts.forEach(function(param) {
        if (typeof param.components === "object") {
          if (param.type.substring(0, 5) !== "tuple") {
            throw new Error("components found but type is not tuple; report on GitHub");
          }
          var suffix = "";
          var arrayBracket = param.type.indexOf("[");
          if (arrayBracket >= 0) {
            suffix = param.type.substring(arrayBracket);
          }
          var result = _flattenTypes(includeTuple, param.components);
          if (Array.isArray(result) && includeTuple) {
            types.push("tuple(" + result.join(",") + ")" + suffix);
          } else if (!includeTuple) {
            types.push("(" + result.join(",") + ")" + suffix);
          } else {
            types.push("(" + result + ")");
          }
        } else {
          types.push(param.type);
        }
      });
      return types;
    };
    var randomHex = function(size) {
      return "0x" + randombytes(size).toString("hex");
    };
    var hexToAscii = function(hex) {
      if (!utils.isHexStrict(hex))
        throw new Error("The parameter must be a valid HEX string.");
      var str = "";
      var i = 0, l = hex.length;
      if (hex.substring(0, 2) === "0x") {
        i = 2;
      }
      for (; i < l; i += 2) {
        var code = parseInt(hex.slice(i, i + 2), 16);
        str += String.fromCharCode(code);
      }
      return str;
    };
    var asciiToHex = function(str) {
      if (!str)
        return "0x00";
      var hex = "";
      for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? "0" + n : n;
      }
      return "0x" + hex;
    };
    var getUnitValue = function(unit) {
      unit = unit ? unit.toLowerCase() : "ether";
      if (!ethjsUnit.unitMap[unit]) {
        throw new Error('This unit "' + unit + `" doesn't exist, please use the one of the following units` + JSON.stringify(ethjsUnit.unitMap, null, 2));
      }
      return unit;
    };
    var fromWei = function(number, unit) {
      unit = getUnitValue(unit);
      if (!utils.isBN(number) && !(typeof number === "string")) {
        throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
      }
      return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);
    };
    var toWei = function(number, unit) {
      unit = getUnitValue(unit);
      if (!utils.isBN(number) && !(typeof number === "string")) {
        throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
      }
      return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);
    };
    var toChecksumAddress = function(address) {
      if (typeof address === "undefined")
        return "";
      if (!/^(0x)?[0-9a-f]{40}$/i.test(address))
        throw new Error('Given address "' + address + '" is not a valid Ethereum address.');
      address = address.toLowerCase().replace(/^0x/i, "");
      var addressHash = utils.sha3(address).replace(/^0x/i, "");
      var checksumAddress = "0x";
      for (var i = 0; i < address.length; i++) {
        if (parseInt(addressHash[i], 16) > 7) {
          checksumAddress += address[i].toUpperCase();
        } else {
          checksumAddress += address[i];
        }
      }
      return checksumAddress;
    };
    var compareBlockNumbers = function(a, b) {
      if (a === b) {
        return 0;
      } else if (("genesis" === a || "earliest" === a || 0 === a) && ("genesis" === b || "earliest" === b || 0 === b)) {
        return 0;
      } else if ("genesis" === a || "earliest" === a || a === 0) {
        return -1;
      } else if ("genesis" === b || "earliest" === b || b === 0) {
        return 1;
      } else if (a === "latest" || a === "finalized") {
        if (b === "pending") {
          return -1;
        } else {
          return 1;
        }
      } else if (b === "latest" || b === "finalized") {
        if (a === "pending") {
          return 1;
        } else {
          return -1;
        }
      } else if (a === "pending") {
        return 1;
      } else if (b === "pending") {
        return -1;
      } else if (a === "safe" || b === "safe") {
        return void 0;
      } else {
        let bnA = new BN(a);
        let bnB = new BN(b);
        if (bnA.lt(bnB)) {
          return -1;
        } else if (bnA.eq(bnB)) {
          return 0;
        } else {
          return 1;
        }
      }
    };
    module.exports = {
      _fireError,
      _jsonInterfaceMethodToString,
      _flattenTypes,
      randomHex,
      BN: utils.BN,
      isBN: utils.isBN,
      isBigNumber: utils.isBigNumber,
      isHex: utils.isHex,
      isHexStrict: utils.isHexStrict,
      sha3: utils.sha3,
      sha3Raw: utils.sha3Raw,
      keccak256: utils.sha3,
      soliditySha3: soliditySha3.soliditySha3,
      soliditySha3Raw: soliditySha3.soliditySha3Raw,
      encodePacked: soliditySha3.encodePacked,
      isAddress: utils.isAddress,
      checkAddressChecksum: utils.checkAddressChecksum,
      toChecksumAddress,
      toHex: utils.toHex,
      toBN: utils.toBN,
      bytesToHex: utils.bytesToHex,
      hexToBytes: utils.hexToBytes,
      hexToNumberString: utils.hexToNumberString,
      hexToNumber: utils.hexToNumber,
      toDecimal: utils.hexToNumber,
      numberToHex: utils.numberToHex,
      fromDecimal: utils.numberToHex,
      hexToUtf8: utils.hexToUtf8,
      hexToString: utils.hexToUtf8,
      toUtf8: utils.hexToUtf8,
      stripHexPrefix: utils.stripHexPrefix,
      utf8ToHex: utils.utf8ToHex,
      stringToHex: utils.utf8ToHex,
      fromUtf8: utils.utf8ToHex,
      hexToAscii,
      toAscii: hexToAscii,
      asciiToHex,
      fromAscii: asciiToHex,
      unitMap: ethjsUnit.unitMap,
      toWei,
      fromWei,
      padLeft: utils.leftPad,
      leftPad: utils.leftPad,
      padRight: utils.rightPad,
      rightPad: utils.rightPad,
      toTwosComplement: utils.toTwosComplement,
      isBloom: utils.isBloom,
      isUserEthereumAddressInBloom: utils.isUserEthereumAddressInBloom,
      isContractAddressInBloom: utils.isContractAddressInBloom,
      isTopic: utils.isTopic,
      isTopicInBloom: utils.isTopicInBloom,
      isInBloom: utils.isInBloom,
      compareBlockNumbers,
      toNumber: utils.toNumber
    };
  }
});

// node_modules/@safe-global/safe-core-sdk-utils/dist/src/eip-3770/config.js
var require_config2 = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-utils/dist/src/eip-3770/config.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.networks = void 0;
    exports.networks = [
      { chainId: 1, shortName: "eth" },
      { chainId: 3, shortName: "rop" },
      { chainId: 4, shortName: "rin" },
      { chainId: 5, shortName: "gor" },
      { chainId: 10, shortName: "oeth" },
      { chainId: 11, shortName: "meta" },
      { chainId: 12, shortName: "kal" },
      { chainId: 18, shortName: "tst" },
      { chainId: 25, shortName: "cro" },
      { chainId: 28, shortName: "bobarinkeby" },
      { chainId: 39, shortName: "u2u" },
      { chainId: 40, shortName: "telosevm" },
      { chainId: 41, shortName: "telosevmtestnet" },
      { chainId: 42, shortName: "kov" },
      { chainId: 50, shortName: "xdc" },
      { chainId: 51, shortName: "txdc" },
      { chainId: 56, shortName: "bnb" },
      { chainId: 61, shortName: "etc" },
      { chainId: 63, shortName: "metc" },
      { chainId: 69, shortName: "okov" },
      { chainId: 82, shortName: "meter" },
      { chainId: 83, shortName: "meter-test" },
      { chainId: 97, shortName: "bnbt" },
      { chainId: 100, shortName: "gno" },
      { chainId: 106, shortName: "vlx" },
      { chainId: 108, shortName: "tt" },
      { chainId: 111, shortName: "etl" },
      { chainId: 122, shortName: "fuse" },
      { chainId: 123, shortName: "spark" },
      { chainId: 137, shortName: "matic" },
      { chainId: 246, shortName: "ewt" },
      { chainId: 250, shortName: "ftm" },
      { chainId: 288, shortName: "boba" },
      { chainId: 300, shortName: "ogn" },
      { chainId: 321, shortName: "kcs" },
      { chainId: 322, shortName: "kcst" },
      { chainId: 336, shortName: "sdn" },
      { chainId: 338, shortName: "tcro" },
      { chainId: 420, shortName: "ogor" },
      { chainId: 588, shortName: "metis-stardust" },
      { chainId: 592, shortName: "astr" },
      { chainId: 595, shortName: "maca" },
      { chainId: 599, shortName: "metis-goerli" },
      { chainId: 686, shortName: "kar" },
      { chainId: 787, shortName: "aca" },
      { chainId: 1001, shortName: "baobab" },
      { chainId: 1008, shortName: "eun" },
      { chainId: 1088, shortName: "metis-andromeda" },
      { chainId: 1101, shortName: "zkevm" },
      { chainId: 1111, shortName: "wemix" },
      { chainId: 1112, shortName: "twemix" },
      { chainId: 1115, shortName: "tcore" },
      { chainId: 1116, shortName: "core" },
      { chainId: 1284, shortName: "mbeam" },
      { chainId: 1285, shortName: "mriver" },
      { chainId: 1287, shortName: "mbase" },
      { chainId: 1294, shortName: "bobabeam" },
      { chainId: 1807, shortName: "rana" },
      { chainId: 1984, shortName: "euntest" },
      { chainId: 2001, shortName: "milkada" },
      { chainId: 2002, shortName: "milkalgo" },
      { chainId: 2008, shortName: "cloudwalk_testnet" },
      { chainId: 2019, shortName: "pmint_test" },
      { chainId: 2020, shortName: "pmint" },
      { chainId: 2221, shortName: "tkava" },
      { chainId: 2222, shortName: "kava" },
      { chainId: 3737, shortName: "csb" },
      { chainId: 4002, shortName: "tftm" },
      { chainId: 4689, shortName: "iotex-mainnet" },
      { chainId: 4918, shortName: "txvm" },
      { chainId: 4919, shortName: "xvm" },
      { chainId: 7341, shortName: "shyft" },
      { chainId: 7700, shortName: "canto" },
      { chainId: 8217, shortName: "cypress" },
      { chainId: 9e3, shortName: "evmos-testnet" },
      { chainId: 9001, shortName: "evmos" },
      { chainId: 9728, shortName: "boba-testnet" },
      { chainId: 1e4, shortName: "smartbch" },
      { chainId: 10001, shortName: "smartbchtest" },
      { chainId: 10200, shortName: "chi" },
      { chainId: 11235, shortName: "islm" },
      { chainId: 11437, shortName: "shyftt" },
      { chainId: 12357, shortName: "rei-testnet" },
      { chainId: 23294, shortName: "sapphire" },
      { chainId: 42161, shortName: "arb1" },
      { chainId: 42170, shortName: "arb-nova" },
      { chainId: 42220, shortName: "celo" },
      { chainId: 43113, shortName: "fuji" },
      { chainId: 43114, shortName: "avax" },
      { chainId: 43288, shortName: "boba-avax" },
      { chainId: 44787, shortName: "alfa" },
      { chainId: 45e3, shortName: "autobahnnetwork" },
      { chainId: 47805, shortName: "rei" },
      { chainId: 54211, shortName: "islmt" },
      { chainId: 56288, shortName: "boba-bnb" },
      { chainId: 71401, shortName: "gw-testnet-v1" },
      { chainId: 71402, shortName: "gw-mainnet-v1" },
      { chainId: 73799, shortName: "vt" },
      { chainId: 80001, shortName: "maticmum" },
      { chainId: 84531, shortName: "base-gor" },
      { chainId: 200101, shortName: "milktada" },
      { chainId: 200202, shortName: "milktalgo" },
      { chainId: 333999, shortName: "olympus" },
      { chainId: 421611, shortName: "arb-rinkeby" },
      { chainId: 421613, shortName: "arb-goerli" },
      { chainId: 534353, shortName: "scr-alpha" },
      { chainId: 11155111, shortName: "sep" },
      { chainId: 245022926, shortName: "neonevm-devnet" },
      { chainId: 1313161554, shortName: "aurora" },
      { chainId: 1313161555, shortName: "aurora-testnet" },
      { chainId: 16666e5, shortName: "hmy-s0" },
      { chainId: 16667e5, shortName: "hmy-b-s0" },
      { chainId: 11297108099, shortName: "tpalm" },
      { chainId: 11297108109, shortName: "palm" }
    ];
    if (import_process.default.env.TEST_NETWORK === "hardhat") {
      exports.networks.push({ shortName: "local", chainId: 31337 });
    } else if (import_process.default.env.TEST_NETWORK === "ganache") {
      exports.networks.push({ shortName: "local", chainId: 1337 });
    }
  }
});

// node_modules/@safe-global/safe-core-sdk-utils/dist/src/eip-3770/index.js
var require_eip_3770 = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-utils/dist/src/eip-3770/index.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateEip3770Address = exports.validateEthereumAddress = exports.validateEip3770NetworkPrefix = exports.isValidEip3770NetworkPrefix = exports.getEip3770NetworkPrefixFromChainId = exports.parseEip3770Address = void 0;
    var web3_utils_1 = require_lib3();
    var config_1 = require_config2();
    function parseEip3770Address(fullAddress) {
      const parts = fullAddress.split(":");
      const address = parts.length > 1 ? parts[1] : parts[0];
      const prefix = parts.length > 1 ? parts[0] : "";
      return { prefix, address };
    }
    exports.parseEip3770Address = parseEip3770Address;
    function getEip3770NetworkPrefixFromChainId(chainId) {
      const network = config_1.networks.find((network2) => chainId === network2.chainId);
      if (!network) {
        throw new Error("No network prefix supported for the current chainId");
      }
      return network.shortName;
    }
    exports.getEip3770NetworkPrefixFromChainId = getEip3770NetworkPrefixFromChainId;
    function isValidEip3770NetworkPrefix(prefix) {
      return config_1.networks.some(({ shortName }) => shortName === prefix);
    }
    exports.isValidEip3770NetworkPrefix = isValidEip3770NetworkPrefix;
    function validateEip3770NetworkPrefix(prefix, currentChainId) {
      const isCurrentNetworkPrefix = prefix === getEip3770NetworkPrefixFromChainId(currentChainId);
      if (!isValidEip3770NetworkPrefix(prefix) || !isCurrentNetworkPrefix) {
        throw new Error("The network prefix must match the current network");
      }
    }
    exports.validateEip3770NetworkPrefix = validateEip3770NetworkPrefix;
    function validateEthereumAddress(address) {
      const isValidAddress = (0, web3_utils_1.isHexStrict)(address) && (0, web3_utils_1.isAddress)(address);
      if (!isValidAddress) {
        throw new Error(`Invalid Ethereum address ${address}`);
      }
    }
    exports.validateEthereumAddress = validateEthereumAddress;
    function validateEip3770Address(fullAddress, currentChainId) {
      const { address, prefix } = parseEip3770Address(fullAddress);
      validateEthereumAddress(address);
      if (prefix) {
        validateEip3770NetworkPrefix(prefix, currentChainId);
      }
      return { address, prefix };
    }
    exports.validateEip3770Address = validateEip3770Address;
  }
});

// node_modules/@safe-global/safe-core-sdk-utils/dist/src/eip-712/index.js
var require_eip_712 = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-utils/dist/src/eip-712/index.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateTypedData = exports.getEip712MessageTypes = exports.EIP712_DOMAIN = exports.EIP712_DOMAIN_BEFORE_V130 = void 0;
    var satisfies_1 = __importDefault(require_satisfies());
    var EQ_OR_GT_1_3_0 = ">=1.3.0";
    exports.EIP712_DOMAIN_BEFORE_V130 = [
      {
        type: "address",
        name: "verifyingContract"
      }
    ];
    exports.EIP712_DOMAIN = [
      {
        type: "uint256",
        name: "chainId"
      },
      {
        type: "address",
        name: "verifyingContract"
      }
    ];
    function getEip712MessageTypes(safeVersion) {
      const eip712WithChainId = (0, satisfies_1.default)(safeVersion, EQ_OR_GT_1_3_0);
      return {
        EIP712Domain: eip712WithChainId ? exports.EIP712_DOMAIN : exports.EIP712_DOMAIN_BEFORE_V130,
        SafeTx: [
          { type: "address", name: "to" },
          { type: "uint256", name: "value" },
          { type: "bytes", name: "data" },
          { type: "uint8", name: "operation" },
          { type: "uint256", name: "safeTxGas" },
          { type: "uint256", name: "baseGas" },
          { type: "uint256", name: "gasPrice" },
          { type: "address", name: "gasToken" },
          { type: "address", name: "refundReceiver" },
          { type: "uint256", name: "nonce" }
        ]
      };
    }
    exports.getEip712MessageTypes = getEip712MessageTypes;
    function generateTypedData({ safeAddress, safeVersion, chainId, safeTransactionData }) {
      const eip712WithChainId = (0, satisfies_1.default)(safeVersion, EQ_OR_GT_1_3_0);
      const typedData = {
        types: getEip712MessageTypes(safeVersion),
        domain: {
          verifyingContract: safeAddress
        },
        primaryType: "SafeTx",
        message: {
          ...safeTransactionData,
          value: safeTransactionData.value,
          safeTxGas: safeTransactionData.safeTxGas,
          baseGas: safeTransactionData.baseGas,
          gasPrice: safeTransactionData.gasPrice,
          nonce: safeTransactionData.nonce
        }
      };
      if (eip712WithChainId) {
        typedData.domain.chainId = chainId;
      }
      return typedData;
    }
    exports.generateTypedData = generateTypedData;
  }
});

// node_modules/@safe-global/safe-core-sdk-utils/dist/src/safeVersions.js
var require_safeVersions = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-utils/dist/src/safeVersions.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hasSafeFeature = exports.SAFE_FEATURES = void 0;
    var satisfies_1 = __importDefault(require_satisfies());
    var SAFE_FEATURES;
    (function(SAFE_FEATURES2) {
      SAFE_FEATURES2["SAFE_TX_GAS_OPTIONAL"] = "SAFE_TX_GAS_OPTIONAL";
      SAFE_FEATURES2["SAFE_TX_GUARDS"] = "SAFE_TX_GUARDS";
      SAFE_FEATURES2["SAFE_FALLBACK_HANDLER"] = "SAFE_FALLBACK_HANDLER";
      SAFE_FEATURES2["ETH_SIGN"] = "ETH_SIGN";
    })(SAFE_FEATURES = exports.SAFE_FEATURES || (exports.SAFE_FEATURES = {}));
    var SAFE_FEATURES_BY_VERSION = {
      [SAFE_FEATURES.SAFE_TX_GAS_OPTIONAL]: ">=1.3.0",
      [SAFE_FEATURES.SAFE_TX_GUARDS]: ">=1.3.0",
      [SAFE_FEATURES.SAFE_FALLBACK_HANDLER]: ">=1.1.1",
      [SAFE_FEATURES.ETH_SIGN]: ">=1.1.0"
    };
    var hasSafeFeature = (feature, version) => {
      if (!(feature in SAFE_FEATURES_BY_VERSION)) {
        return false;
      }
      return (0, satisfies_1.default)(version, SAFE_FEATURES_BY_VERSION[feature]);
    };
    exports.hasSafeFeature = hasSafeFeature;
  }
});

// node_modules/@safe-global/safe-core-sdk-utils/dist/src/index.js
var require_src6 = __commonJS({
  "node_modules/@safe-global/safe-core-sdk-utils/dist/src/index.js"(exports) {
    "use strict";
    init_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_eip_3770(), exports);
    __exportStar(require_eip_712(), exports);
    __exportStar(require_safeVersions(), exports);
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/utils/constants.js
var require_constants2 = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/utils/constants.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SENTINEL_ADDRESS = exports.EMPTY_DATA = exports.ZERO_ADDRESS = void 0;
    exports.ZERO_ADDRESS = `0x${"0".repeat(40)}`;
    exports.EMPTY_DATA = "0x";
    exports.SENTINEL_ADDRESS = "0x0000000000000000000000000000000000000001";
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/utils/index.js
var require_utils6 = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/utils/index.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSafeMultisigTransactionResponse = exports.isMetaTransactionArray = exports.isRestrictedAddress = exports.isZeroAddress = exports.sameString = void 0;
    var constants_1 = require_constants2();
    function sameString(str1, str2) {
      return str1.toLowerCase() === str2.toLowerCase();
    }
    exports.sameString = sameString;
    function isZeroAddress(address) {
      return sameString(address, constants_1.ZERO_ADDRESS);
    }
    exports.isZeroAddress = isZeroAddress;
    function isSentinelAddress(address) {
      return sameString(address, constants_1.SENTINEL_ADDRESS);
    }
    function isRestrictedAddress(address) {
      return isZeroAddress(address) || isSentinelAddress(address);
    }
    exports.isRestrictedAddress = isRestrictedAddress;
    function isMetaTransactionArray(safeTransactions) {
      return (safeTransactions === null || safeTransactions === void 0 ? void 0 : safeTransactions.length) !== void 0;
    }
    exports.isMetaTransactionArray = isMetaTransactionArray;
    function isSafeMultisigTransactionResponse(safeTransaction) {
      return safeTransaction.isExecuted !== void 0;
    }
    exports.isSafeMultisigTransactionResponse = isSafeMultisigTransactionResponse;
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/managers/fallbackHandlerManager.js
var require_fallbackHandlerManager = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/managers/fallbackHandlerManager.js"(exports) {
    "use strict";
    init_shim();
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _FallbackHandlerManager_ethAdapter;
    var _FallbackHandlerManager_safeContract;
    var _FallbackHandlerManager_slot;
    Object.defineProperty(exports, "__esModule", { value: true });
    var safe_core_sdk_utils_1 = require_src6();
    var utils_1 = require_utils6();
    var constants_1 = require_constants2();
    var FallbackHandlerManager = class {
      constructor(ethAdapter, safeContract) {
        _FallbackHandlerManager_ethAdapter.set(this, void 0);
        _FallbackHandlerManager_safeContract.set(this, void 0);
        _FallbackHandlerManager_slot.set(this, "0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5");
        __classPrivateFieldSet(this, _FallbackHandlerManager_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _FallbackHandlerManager_safeContract, safeContract, "f");
      }
      validateFallbackHandlerAddress(fallbackHandlerAddress) {
        const isValidAddress = __classPrivateFieldGet(this, _FallbackHandlerManager_ethAdapter, "f").isAddress(fallbackHandlerAddress);
        if (!isValidAddress || (0, utils_1.isZeroAddress)(fallbackHandlerAddress)) {
          throw new Error("Invalid fallback handler address provided");
        }
      }
      validateFallbackHandlerIsNotEnabled(currentFallbackHandler, newFallbackHandlerAddress) {
        if ((0, utils_1.sameString)(currentFallbackHandler, newFallbackHandlerAddress)) {
          throw new Error("Fallback handler provided is already enabled");
        }
      }
      validateFallbackHandlerIsEnabled(fallbackHandlerAddress) {
        if ((0, utils_1.isZeroAddress)(fallbackHandlerAddress)) {
          throw new Error("There is no fallback handler enabled yet");
        }
      }
      async getFallbackHandler() {
        const safeVersion = await __classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, "f").getVersion();
        if ((0, safe_core_sdk_utils_1.hasSafeFeature)(safe_core_sdk_utils_1.SAFE_FEATURES.SAFE_FALLBACK_HANDLER, safeVersion)) {
          return __classPrivateFieldGet(this, _FallbackHandlerManager_ethAdapter, "f").getStorageAt(__classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, "f").getAddress(), __classPrivateFieldGet(this, _FallbackHandlerManager_slot, "f"));
        } else {
          throw new Error("Current version of the Safe does not support the fallback handler functionality");
        }
      }
      async encodeEnableFallbackHandlerData(fallbackHandlerAddress) {
        this.validateFallbackHandlerAddress(fallbackHandlerAddress);
        const currentFallbackHandler = await this.getFallbackHandler();
        this.validateFallbackHandlerIsNotEnabled(currentFallbackHandler, fallbackHandlerAddress);
        return __classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, "f").encode("setFallbackHandler", [fallbackHandlerAddress]);
      }
      async encodeDisableFallbackHandlerData() {
        const currentFallbackHandler = await this.getFallbackHandler();
        this.validateFallbackHandlerIsEnabled(currentFallbackHandler);
        return __classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, "f").encode("setFallbackHandler", [constants_1.ZERO_ADDRESS]);
      }
    };
    _FallbackHandlerManager_ethAdapter = /* @__PURE__ */ new WeakMap(), _FallbackHandlerManager_safeContract = /* @__PURE__ */ new WeakMap(), _FallbackHandlerManager_slot = /* @__PURE__ */ new WeakMap();
    exports.default = FallbackHandlerManager;
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/managers/guardManager.js
var require_guardManager = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/managers/guardManager.js"(exports) {
    "use strict";
    init_shim();
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _GuardManager_ethAdapter;
    var _GuardManager_safeContract;
    var _GuardManager_slot;
    Object.defineProperty(exports, "__esModule", { value: true });
    var safe_core_sdk_utils_1 = require_src6();
    var utils_1 = require_utils6();
    var constants_1 = require_constants2();
    var GuardManager = class {
      constructor(ethAdapter, safeContract) {
        _GuardManager_ethAdapter.set(this, void 0);
        _GuardManager_safeContract.set(this, void 0);
        _GuardManager_slot.set(this, "0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8");
        __classPrivateFieldSet(this, _GuardManager_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _GuardManager_safeContract, safeContract, "f");
      }
      validateGuardAddress(guardAddress) {
        const isValidAddress = __classPrivateFieldGet(this, _GuardManager_ethAdapter, "f").isAddress(guardAddress);
        if (!isValidAddress || (0, utils_1.isZeroAddress)(guardAddress)) {
          throw new Error("Invalid guard address provided");
        }
      }
      validateGuardIsNotEnabled(currentGuard, newGuardAddress) {
        if ((0, utils_1.sameString)(currentGuard, newGuardAddress)) {
          throw new Error("Guard provided is already enabled");
        }
      }
      validateGuardIsEnabled(guardAddress) {
        if ((0, utils_1.isZeroAddress)(guardAddress)) {
          throw new Error("There is no guard enabled yet");
        }
      }
      async getGuard() {
        const safeVersion = await __classPrivateFieldGet(this, _GuardManager_safeContract, "f").getVersion();
        if ((0, safe_core_sdk_utils_1.hasSafeFeature)(safe_core_sdk_utils_1.SAFE_FEATURES.SAFE_TX_GUARDS, safeVersion)) {
          return __classPrivateFieldGet(this, _GuardManager_ethAdapter, "f").getStorageAt(__classPrivateFieldGet(this, _GuardManager_safeContract, "f").getAddress(), __classPrivateFieldGet(this, _GuardManager_slot, "f"));
        } else {
          throw new Error("Current version of the Safe does not support Safe transaction guards functionality");
        }
      }
      async encodeEnableGuardData(guardAddress) {
        this.validateGuardAddress(guardAddress);
        const currentGuard = await this.getGuard();
        this.validateGuardIsNotEnabled(currentGuard, guardAddress);
        return __classPrivateFieldGet(this, _GuardManager_safeContract, "f").encode("setGuard", [guardAddress]);
      }
      async encodeDisableGuardData() {
        const currentGuard = await this.getGuard();
        this.validateGuardIsEnabled(currentGuard);
        return __classPrivateFieldGet(this, _GuardManager_safeContract, "f").encode("setGuard", [constants_1.ZERO_ADDRESS]);
      }
    };
    _GuardManager_ethAdapter = /* @__PURE__ */ new WeakMap(), _GuardManager_safeContract = /* @__PURE__ */ new WeakMap(), _GuardManager_slot = /* @__PURE__ */ new WeakMap();
    exports.default = GuardManager;
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/managers/moduleManager.js
var require_moduleManager = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/managers/moduleManager.js"(exports) {
    "use strict";
    init_shim();
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _ModuleManager_ethAdapter;
    var _ModuleManager_safeContract;
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils6();
    var constants_1 = require_constants2();
    var ModuleManager = class {
      constructor(ethAdapter, safeContract) {
        _ModuleManager_ethAdapter.set(this, void 0);
        _ModuleManager_safeContract.set(this, void 0);
        __classPrivateFieldSet(this, _ModuleManager_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _ModuleManager_safeContract, safeContract, "f");
      }
      validateModuleAddress(moduleAddress) {
        const isValidAddress = __classPrivateFieldGet(this, _ModuleManager_ethAdapter, "f").isAddress(moduleAddress);
        if (!isValidAddress || (0, utils_1.isRestrictedAddress)(moduleAddress)) {
          throw new Error("Invalid module address provided");
        }
      }
      validateModuleIsNotEnabled(moduleAddress, modules) {
        const moduleIndex = modules.findIndex((module2) => (0, utils_1.sameString)(module2, moduleAddress));
        const isEnabled = moduleIndex >= 0;
        if (isEnabled) {
          throw new Error("Module provided is already enabled");
        }
      }
      validateModuleIsEnabled(moduleAddress, modules) {
        const moduleIndex = modules.findIndex((module2) => (0, utils_1.sameString)(module2, moduleAddress));
        const isEnabled = moduleIndex >= 0;
        if (!isEnabled) {
          throw new Error("Module provided is not enabled yet");
        }
        return moduleIndex;
      }
      async getModules() {
        return __classPrivateFieldGet(this, _ModuleManager_safeContract, "f").getModules();
      }
      async isModuleEnabled(moduleAddress) {
        return __classPrivateFieldGet(this, _ModuleManager_safeContract, "f").isModuleEnabled(moduleAddress);
      }
      async encodeEnableModuleData(moduleAddress) {
        this.validateModuleAddress(moduleAddress);
        const modules = await this.getModules();
        this.validateModuleIsNotEnabled(moduleAddress, modules);
        return __classPrivateFieldGet(this, _ModuleManager_safeContract, "f").encode("enableModule", [moduleAddress]);
      }
      async encodeDisableModuleData(moduleAddress) {
        this.validateModuleAddress(moduleAddress);
        const modules = await this.getModules();
        const moduleIndex = this.validateModuleIsEnabled(moduleAddress, modules);
        const prevModuleAddress = moduleIndex === 0 ? constants_1.SENTINEL_ADDRESS : modules[moduleIndex - 1];
        return __classPrivateFieldGet(this, _ModuleManager_safeContract, "f").encode("disableModule", [prevModuleAddress, moduleAddress]);
      }
    };
    _ModuleManager_ethAdapter = /* @__PURE__ */ new WeakMap(), _ModuleManager_safeContract = /* @__PURE__ */ new WeakMap();
    exports.default = ModuleManager;
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/managers/ownerManager.js
var require_ownerManager = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/managers/ownerManager.js"(exports) {
    "use strict";
    init_shim();
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _OwnerManager_ethAdapter;
    var _OwnerManager_safeContract;
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils6();
    var constants_1 = require_constants2();
    var OwnerManager = class {
      constructor(ethAdapter, safeContract) {
        _OwnerManager_ethAdapter.set(this, void 0);
        _OwnerManager_safeContract.set(this, void 0);
        __classPrivateFieldSet(this, _OwnerManager_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _OwnerManager_safeContract, safeContract, "f");
      }
      validateOwnerAddress(ownerAddress, errorMessage) {
        const isValidAddress = __classPrivateFieldGet(this, _OwnerManager_ethAdapter, "f").isAddress(ownerAddress);
        if (!isValidAddress || (0, utils_1.isRestrictedAddress)(ownerAddress)) {
          throw new Error(errorMessage || "Invalid owner address provided");
        }
      }
      validateThreshold(threshold, numOwners) {
        if (threshold <= 0) {
          throw new Error("Threshold needs to be greater than 0");
        }
        if (threshold > numOwners) {
          throw new Error("Threshold cannot exceed owner count");
        }
      }
      validateAddressIsNotOwner(ownerAddress, owners, errorMessage) {
        const ownerIndex = owners.findIndex((owner) => (0, utils_1.sameString)(owner, ownerAddress));
        const isOwner = ownerIndex >= 0;
        if (isOwner) {
          throw new Error(errorMessage || "Address provided is already an owner");
        }
      }
      validateAddressIsOwner(ownerAddress, owners, errorMessage) {
        const ownerIndex = owners.findIndex((owner) => (0, utils_1.sameString)(owner, ownerAddress));
        const isOwner = ownerIndex >= 0;
        if (!isOwner) {
          throw new Error(errorMessage || "Address provided is not an owner");
        }
        return ownerIndex;
      }
      async getOwners() {
        const owners = await __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").getOwners();
        return [...owners];
      }
      async getThreshold() {
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").getThreshold();
      }
      async isOwner(ownerAddress) {
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").isOwner(ownerAddress);
      }
      async encodeAddOwnerWithThresholdData(ownerAddress, threshold) {
        this.validateOwnerAddress(ownerAddress);
        const owners = await this.getOwners();
        this.validateAddressIsNotOwner(ownerAddress, owners);
        const newThreshold = threshold !== null && threshold !== void 0 ? threshold : await this.getThreshold();
        this.validateThreshold(newThreshold, owners.length + 1);
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").encode("addOwnerWithThreshold", [ownerAddress, newThreshold]);
      }
      async encodeRemoveOwnerData(ownerAddress, threshold) {
        this.validateOwnerAddress(ownerAddress);
        const owners = await this.getOwners();
        const ownerIndex = this.validateAddressIsOwner(ownerAddress, owners);
        const newThreshold = threshold !== null && threshold !== void 0 ? threshold : await this.getThreshold() - 1;
        this.validateThreshold(newThreshold, owners.length - 1);
        const prevOwnerAddress = ownerIndex === 0 ? constants_1.SENTINEL_ADDRESS : owners[ownerIndex - 1];
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").encode("removeOwner", [prevOwnerAddress, ownerAddress, newThreshold]);
      }
      async encodeSwapOwnerData(oldOwnerAddress, newOwnerAddress) {
        this.validateOwnerAddress(newOwnerAddress, "Invalid new owner address provided");
        this.validateOwnerAddress(oldOwnerAddress, "Invalid old owner address provided");
        const owners = await this.getOwners();
        this.validateAddressIsNotOwner(newOwnerAddress, owners, "New address provided is already an owner");
        const oldOwnerIndex = this.validateAddressIsOwner(oldOwnerAddress, owners, "Old address provided is not an owner");
        const prevOwnerAddress = oldOwnerIndex === 0 ? constants_1.SENTINEL_ADDRESS : owners[oldOwnerIndex - 1];
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").encode("swapOwner", [
          prevOwnerAddress,
          oldOwnerAddress,
          newOwnerAddress
        ]);
      }
      async encodeChangeThresholdData(threshold) {
        const owners = await this.getOwners();
        this.validateThreshold(threshold, owners.length);
        return __classPrivateFieldGet(this, _OwnerManager_safeContract, "f").encode("changeThreshold", [threshold]);
      }
    };
    _OwnerManager_ethAdapter = /* @__PURE__ */ new WeakMap(), _OwnerManager_safeContract = /* @__PURE__ */ new WeakMap();
    exports.default = OwnerManager;
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/SafeSignature.js
var require_SafeSignature = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/SafeSignature.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var EthSignSignature = class {
      constructor(signer, signature) {
        this.signer = signer;
        this.data = signature;
      }
      staticPart() {
        return this.data;
      }
      dynamicPart() {
        return "";
      }
    };
    exports.default = EthSignSignature;
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/index.js
var require_signatures = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/index.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateEIP712Signature = exports.generateSignature = exports.adjustVInSignature = exports.isTxHashSignedWithPrefix = exports.generatePreValidatedSignature = void 0;
    var ethereumjs_util_1 = require_dist3();
    var utils_1 = require_utils6();
    var SafeSignature_1 = __importDefault(require_SafeSignature());
    function generatePreValidatedSignature(ownerAddress) {
      const signature = "0x000000000000000000000000" + ownerAddress.slice(2) + "000000000000000000000000000000000000000000000000000000000000000001";
      return new SafeSignature_1.default(ownerAddress, signature);
    }
    exports.generatePreValidatedSignature = generatePreValidatedSignature;
    function isTxHashSignedWithPrefix(txHash, signature, ownerAddress) {
      let hasPrefix;
      try {
        const rsvSig = {
          r: import_buffer.Buffer.from(signature.slice(2, 66), "hex"),
          s: import_buffer.Buffer.from(signature.slice(66, 130), "hex"),
          v: parseInt(signature.slice(130, 132), 16)
        };
        const recoveredData = (0, ethereumjs_util_1.ecrecover)(import_buffer.Buffer.from(txHash.slice(2), "hex"), rsvSig.v, rsvSig.r, rsvSig.s);
        const recoveredAddress = (0, ethereumjs_util_1.bufferToHex)((0, ethereumjs_util_1.pubToAddress)(recoveredData));
        hasPrefix = !(0, utils_1.sameString)(recoveredAddress, ownerAddress);
      } catch (e) {
        hasPrefix = true;
      }
      return hasPrefix;
    }
    exports.isTxHashSignedWithPrefix = isTxHashSignedWithPrefix;
    var adjustVInSignature = (signingMethod, signature, safeTxHash, signerAddress) => {
      const ETHEREUM_V_VALUES = [0, 1, 27, 28];
      const MIN_VALID_V_VALUE_FOR_SAFE_ECDSA = 27;
      let signatureV = parseInt(signature.slice(-2), 16);
      if (!ETHEREUM_V_VALUES.includes(signatureV)) {
        throw new Error("Invalid signature");
      }
      if (signingMethod === "eth_sign") {
        if (signatureV < MIN_VALID_V_VALUE_FOR_SAFE_ECDSA) {
          signatureV += MIN_VALID_V_VALUE_FOR_SAFE_ECDSA;
        }
        const adjustedSignature = signature.slice(0, -2) + signatureV.toString(16);
        const signatureHasPrefix = isTxHashSignedWithPrefix(safeTxHash, adjustedSignature, signerAddress);
        if (signatureHasPrefix) {
          signatureV += 4;
        }
      }
      if (signingMethod === "eth_signTypedData") {
        if (signatureV < MIN_VALID_V_VALUE_FOR_SAFE_ECDSA) {
          signatureV += MIN_VALID_V_VALUE_FOR_SAFE_ECDSA;
        }
      }
      signature = signature.slice(0, -2) + signatureV.toString(16);
      return signature;
    };
    exports.adjustVInSignature = adjustVInSignature;
    async function generateSignature(ethAdapter, hash) {
      const signerAddress = await ethAdapter.getSignerAddress();
      if (!signerAddress) {
        throw new Error("EthAdapter must be initialized with a signer to use this method");
      }
      let signature = await ethAdapter.signMessage(hash);
      signature = (0, exports.adjustVInSignature)("eth_sign", signature, hash, signerAddress);
      return new SafeSignature_1.default(signerAddress, signature);
    }
    exports.generateSignature = generateSignature;
    async function generateEIP712Signature(ethAdapter, safeTransactionEIP712Args, methodVersion) {
      const signerAddress = await ethAdapter.getSignerAddress();
      if (!signerAddress) {
        throw new Error("EthAdapter must be initialized with a signer to use this method");
      }
      let signature = await ethAdapter.signTypedData(safeTransactionEIP712Args, methodVersion);
      signature = (0, exports.adjustVInSignature)("eth_signTypedData", signature);
      return new SafeSignature_1.default(signerAddress, signature);
    }
    exports.generateEIP712Signature = generateEIP712Signature;
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/SafeTransaction.js
var require_SafeTransaction = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/SafeTransaction.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var EthSafeTransaction = class {
      constructor(data) {
        this.signatures = /* @__PURE__ */ new Map();
        this.data = data;
      }
      addSignature(signature) {
        this.signatures.set(signature.signer.toLowerCase(), signature);
      }
      encodedSignatures() {
        const signers = Array.from(this.signatures.keys()).sort();
        const baseOffset = signers.length * 65;
        let staticParts = "";
        let dynamicParts = "";
        signers.forEach((signerAddress) => {
          const signature = this.signatures.get(signerAddress);
          staticParts += signature === null || signature === void 0 ? void 0 : signature.staticPart().slice(2);
          dynamicParts += signature === null || signature === void 0 ? void 0 : signature.dynamicPart();
        });
        return "0x" + staticParts + dynamicParts;
      }
    };
    exports.default = EthSafeTransaction;
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/gas.js
var require_gas = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/gas.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.estimateTxGas = void 0;
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var safe_core_sdk_types_1 = require_src();
    function estimateDataGasCosts(data) {
      const reducer = (accumulator, currentValue) => {
        if (currentValue === "0x") {
          return accumulator + 0;
        }
        if (currentValue === "00") {
          return accumulator + 4;
        }
        return accumulator + 16;
      };
      return data.match(/.{2}/g).reduce(reducer, 0);
    }
    async function estimateTxGas(safeContract, ethAdapter, to, valueInWei, data, operation) {
      let txGasEstimation = 0;
      const safeAddress = safeContract.getAddress();
      const estimateData = safeContract.encode("requiredTxGas", [
        to,
        valueInWei,
        data,
        operation
      ]);
      try {
        const estimateResponse = (await ethAdapter.estimateGas({
          to: safeAddress,
          from: safeAddress,
          data: estimateData
        })).toString();
        txGasEstimation = bignumber_1.BigNumber.from("0x" + estimateResponse.substring(138)).toNumber() + 1e4;
      } catch (error) {
      }
      if (txGasEstimation > 0) {
        const dataGasEstimation = estimateDataGasCosts(estimateData);
        let additionalGas = 1e4;
        for (let i = 0; i < 10; i++) {
          try {
            const estimateResponse = await ethAdapter.call({
              to: safeAddress,
              from: safeAddress,
              data: estimateData,
              gasPrice: 0,
              gasLimit: txGasEstimation + dataGasEstimation + additionalGas
            });
            if (estimateResponse !== "0x") {
              break;
            }
          } catch (error) {
          }
          txGasEstimation += additionalGas;
          additionalGas *= 2;
        }
        return txGasEstimation + additionalGas;
      }
      try {
        const estimateGas = await ethAdapter.estimateGas({
          to,
          from: safeAddress,
          value: valueInWei,
          data
        });
        return estimateGas;
      } catch (error) {
        if (operation === safe_core_sdk_types_1.OperationType.DelegateCall) {
          return 0;
        }
        return Promise.reject(error);
      }
    }
    exports.estimateTxGas = estimateTxGas;
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/utils.js
var require_utils7 = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/utils.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeMultiSendData = exports.standardizeSafeTransactionData = exports.standardizeMetaTransactionData = void 0;
    var bytes_1 = (init_lib(), __toCommonJS(lib_exports));
    var solidity_1 = (init_lib6(), __toCommonJS(lib_exports6));
    var safe_core_sdk_types_1 = require_src();
    var safe_core_sdk_utils_1 = require_src6();
    var constants_1 = require_constants2();
    var gas_1 = require_gas();
    function standardizeMetaTransactionData(tx) {
      var _a;
      const standardizedTxs = {
        ...tx,
        operation: (_a = tx.operation) !== null && _a !== void 0 ? _a : safe_core_sdk_types_1.OperationType.Call
      };
      return standardizedTxs;
    }
    exports.standardizeMetaTransactionData = standardizeMetaTransactionData;
    async function standardizeSafeTransactionData(safeContract, ethAdapter, tx) {
      var _a, _b, _c, _d;
      const standardizedTxs = {
        to: tx.to,
        value: tx.value,
        data: tx.data,
        operation: (_a = tx.operation) !== null && _a !== void 0 ? _a : safe_core_sdk_types_1.OperationType.Call,
        baseGas: (_b = tx.baseGas) !== null && _b !== void 0 ? _b : 0,
        gasPrice: (_c = tx.gasPrice) !== null && _c !== void 0 ? _c : 0,
        gasToken: tx.gasToken || constants_1.ZERO_ADDRESS,
        refundReceiver: tx.refundReceiver || constants_1.ZERO_ADDRESS,
        nonce: (_d = tx.nonce) !== null && _d !== void 0 ? _d : await safeContract.getNonce()
      };
      let safeTxGas;
      if (typeof tx.safeTxGas !== "undefined") {
        return {
          ...standardizedTxs,
          safeTxGas: tx.safeTxGas
        };
      }
      const safeVersion = await safeContract.getVersion();
      if ((0, safe_core_sdk_utils_1.hasSafeFeature)(safe_core_sdk_utils_1.SAFE_FEATURES.SAFE_TX_GAS_OPTIONAL, safeVersion) && standardizedTxs.gasPrice === 0) {
        safeTxGas = 0;
      } else {
        safeTxGas = await (0, gas_1.estimateTxGas)(safeContract, ethAdapter, standardizedTxs.to, standardizedTxs.value, standardizedTxs.data, standardizedTxs.operation);
      }
      return {
        ...standardizedTxs,
        safeTxGas
      };
    }
    exports.standardizeSafeTransactionData = standardizeSafeTransactionData;
    function encodeMetaTransaction(tx) {
      const data = (0, bytes_1.arrayify)(tx.data);
      const encoded = (0, solidity_1.pack)(["uint8", "address", "uint256", "uint256", "bytes"], [tx.operation, tx.to, tx.value, data.length, data]);
      return encoded.slice(2);
    }
    function encodeMultiSendData(txs) {
      return "0x" + txs.map((tx) => encodeMetaTransaction(tx)).join("");
    }
    exports.encodeMultiSendData = encodeMultiSendData;
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/Safe.js
var require_Safe = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/Safe.js"(exports) {
    "use strict";
    init_shim();
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var _Safe_ethAdapter;
    var _Safe_contractManager;
    var _Safe_ownerManager;
    var _Safe_moduleManager;
    var _Safe_guardManager;
    var _Safe_fallbackHandlerManager;
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var safe_core_sdk_types_1 = require_src();
    var safe_core_sdk_utils_1 = require_src6();
    var contractManager_1 = __importDefault(require_contractManager());
    var fallbackHandlerManager_1 = __importDefault(require_fallbackHandlerManager());
    var guardManager_1 = __importDefault(require_guardManager());
    var moduleManager_1 = __importDefault(require_moduleManager());
    var ownerManager_1 = __importDefault(require_ownerManager());
    var utils_1 = require_utils6();
    var signatures_1 = require_signatures();
    var SafeSignature_1 = __importDefault(require_SafeSignature());
    var SafeTransaction_1 = __importDefault(require_SafeTransaction());
    var utils_2 = require_utils7();
    var Safe = class {
      constructor() {
        _Safe_ethAdapter.set(this, void 0);
        _Safe_contractManager.set(this, void 0);
        _Safe_ownerManager.set(this, void 0);
        _Safe_moduleManager.set(this, void 0);
        _Safe_guardManager.set(this, void 0);
        _Safe_fallbackHandlerManager.set(this, void 0);
      }
      static async create({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {
        const safeSdk = new Safe();
        await safeSdk.init({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks });
        return safeSdk;
      }
      async init({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {
        __classPrivateFieldSet(this, _Safe_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _Safe_contractManager, await contractManager_1.default.create({
          ethAdapter: __classPrivateFieldGet(this, _Safe_ethAdapter, "f"),
          safeAddress,
          isL1SafeMasterCopy,
          contractNetworks
        }), "f");
        __classPrivateFieldSet(this, _Safe_ownerManager, new ownerManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract), "f");
        __classPrivateFieldSet(this, _Safe_moduleManager, new moduleManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract), "f");
        __classPrivateFieldSet(this, _Safe_guardManager, new guardManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract), "f");
        __classPrivateFieldSet(this, _Safe_fallbackHandlerManager, new fallbackHandlerManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract), "f");
      }
      async connect({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {
        return await Safe.create({
          ethAdapter: ethAdapter || __classPrivateFieldGet(this, _Safe_ethAdapter, "f"),
          safeAddress: safeAddress || this.getAddress(),
          isL1SafeMasterCopy: isL1SafeMasterCopy || __classPrivateFieldGet(this, _Safe_contractManager, "f").isL1SafeMasterCopy,
          contractNetworks: contractNetworks || __classPrivateFieldGet(this, _Safe_contractManager, "f").contractNetworks
        });
      }
      getAddress() {
        return __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.getAddress();
      }
      getContractManager() {
        return __classPrivateFieldGet(this, _Safe_contractManager, "f");
      }
      getEthAdapter() {
        return __classPrivateFieldGet(this, _Safe_ethAdapter, "f");
      }
      getMultiSendAddress() {
        return __classPrivateFieldGet(this, _Safe_contractManager, "f").multiSendContract.getAddress();
      }
      getMultiSendCallOnlyAddress() {
        return __classPrivateFieldGet(this, _Safe_contractManager, "f").multiSendCallOnlyContract.getAddress();
      }
      async getContractVersion() {
        return __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.getVersion();
      }
      async getOwners() {
        return __classPrivateFieldGet(this, _Safe_ownerManager, "f").getOwners();
      }
      async getNonce() {
        return __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.getNonce();
      }
      async getThreshold() {
        return __classPrivateFieldGet(this, _Safe_ownerManager, "f").getThreshold();
      }
      async getChainId() {
        return __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getChainId();
      }
      async getBalance() {
        return __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getBalance(this.getAddress());
      }
      getFallbackHandler() {
        return __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, "f").getFallbackHandler();
      }
      async getGuard() {
        return __classPrivateFieldGet(this, _Safe_guardManager, "f").getGuard();
      }
      async getModules() {
        return __classPrivateFieldGet(this, _Safe_moduleManager, "f").getModules();
      }
      async isModuleEnabled(moduleAddress) {
        return __classPrivateFieldGet(this, _Safe_moduleManager, "f").isModuleEnabled(moduleAddress);
      }
      async isOwner(ownerAddress) {
        return __classPrivateFieldGet(this, _Safe_ownerManager, "f").isOwner(ownerAddress);
      }
      async createTransaction({ safeTransactionData, onlyCalls = false, options }) {
        if ((0, utils_1.isMetaTransactionArray)(safeTransactionData) && safeTransactionData.length === 0) {
          throw new Error("Invalid empty array of transactions");
        }
        let newTransaction;
        if ((0, utils_1.isMetaTransactionArray)(safeTransactionData) && safeTransactionData.length > 1) {
          const multiSendContract = onlyCalls ? __classPrivateFieldGet(this, _Safe_contractManager, "f").multiSendCallOnlyContract : __classPrivateFieldGet(this, _Safe_contractManager, "f").multiSendContract;
          const multiSendData = (0, utils_2.encodeMultiSendData)(safeTransactionData.map(utils_2.standardizeMetaTransactionData));
          const multiSendTransaction = {
            ...options,
            to: multiSendContract.getAddress(),
            value: "0",
            data: multiSendContract.encode("multiSend", [multiSendData]),
            operation: safe_core_sdk_types_1.OperationType.DelegateCall
          };
          newTransaction = multiSendTransaction;
        } else {
          newTransaction = (0, utils_1.isMetaTransactionArray)(safeTransactionData) ? { ...options, ...safeTransactionData[0] } : safeTransactionData;
        }
        const standardizedTransaction = await (0, utils_2.standardizeSafeTransactionData)(__classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract, __classPrivateFieldGet(this, _Safe_ethAdapter, "f"), newTransaction);
        return new SafeTransaction_1.default(standardizedTransaction);
      }
      async createRejectionTransaction(nonce) {
        const safeTransactionData = {
          to: this.getAddress(),
          nonce,
          value: "0",
          data: "0x",
          safeTxGas: 0
        };
        return this.createTransaction({ safeTransactionData });
      }
      async copyTransaction(safeTransaction) {
        const signedSafeTransaction = await this.createTransaction({
          safeTransactionData: safeTransaction.data
        });
        safeTransaction.signatures.forEach((signature) => {
          signedSafeTransaction.addSignature(signature);
        });
        return signedSafeTransaction;
      }
      async getTransactionHash(safeTransaction) {
        const safeTransactionData = safeTransaction.data;
        const txHash = await __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.getTransactionHash(safeTransactionData);
        return txHash;
      }
      async signTransactionHash(hash) {
        return (0, signatures_1.generateSignature)(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), hash);
      }
      async signTypedData(safeTransaction, methodVersion) {
        const safeTransactionEIP712Args = {
          safeAddress: this.getAddress(),
          safeVersion: await this.getContractVersion(),
          chainId: await this.getEthAdapter().getChainId(),
          safeTransactionData: safeTransaction.data
        };
        return (0, signatures_1.generateEIP712Signature)(__classPrivateFieldGet(this, _Safe_ethAdapter, "f"), safeTransactionEIP712Args, methodVersion);
      }
      async signTransaction(safeTransaction, signingMethod = "eth_signTypedData_v4") {
        let transaction = (0, utils_1.isSafeMultisigTransactionResponse)(safeTransaction) ? await this.toSafeTransactionType(safeTransaction) : safeTransaction;
        const owners = await this.getOwners();
        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getSignerAddress();
        if (!signerAddress) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        const addressIsOwner = owners.find((owner) => signerAddress && (0, utils_1.sameString)(owner, signerAddress));
        if (!addressIsOwner) {
          throw new Error("Transactions can only be signed by Safe owners");
        }
        let signature;
        if (signingMethod === "eth_signTypedData_v4") {
          signature = await this.signTypedData(transaction, "v4");
        } else if (signingMethod === "eth_signTypedData_v3") {
          signature = await this.signTypedData(transaction, "v3");
        } else if (signingMethod === "eth_signTypedData") {
          signature = await this.signTypedData(transaction);
        } else {
          const safeVersion = await this.getContractVersion();
          if (!(0, safe_core_sdk_utils_1.hasSafeFeature)(safe_core_sdk_utils_1.SAFE_FEATURES.ETH_SIGN, safeVersion)) {
            throw new Error("eth_sign is only supported by Safes >= v1.1.0");
          }
          const txHash = await this.getTransactionHash(transaction);
          signature = await this.signTransactionHash(txHash);
        }
        const signedSafeTransaction = await this.createTransaction({
          safeTransactionData: transaction.data
        });
        transaction.signatures.forEach((signature2) => {
          signedSafeTransaction.addSignature(signature2);
        });
        signedSafeTransaction.addSignature(signature);
        return signedSafeTransaction;
      }
      async approveTransactionHash(hash, options) {
        const owners = await this.getOwners();
        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getSignerAddress();
        if (!signerAddress) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        const addressIsOwner = owners.find((owner) => signerAddress && (0, utils_1.sameString)(owner, signerAddress));
        if (!addressIsOwner) {
          throw new Error("Transaction hashes can only be approved by Safe owners");
        }
        if ((options === null || options === void 0 ? void 0 : options.gas) && (options === null || options === void 0 ? void 0 : options.gasLimit)) {
          throw new Error("Cannot specify gas and gasLimit together in transaction options");
        }
        return __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.approveHash(hash, {
          from: signerAddress,
          ...options
        });
      }
      async getOwnersWhoApprovedTx(txHash) {
        const owners = await this.getOwners();
        let ownersWhoApproved = [];
        for (const owner of owners) {
          const approved = await __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.approvedHashes(owner, txHash);
          if (approved.gt(0)) {
            ownersWhoApproved.push(owner);
          }
        }
        return ownersWhoApproved;
      }
      async createEnableFallbackHandlerTx(fallbackHandlerAddress, options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, "f").encodeEnableFallbackHandlerData(fallbackHandlerAddress),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      async createDisableFallbackHandlerTx(options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, "f").encodeDisableFallbackHandlerData(),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      async createEnableGuardTx(guardAddress, options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_guardManager, "f").encodeEnableGuardData(guardAddress),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      async createDisableGuardTx(options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_guardManager, "f").encodeDisableGuardData(),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      async createEnableModuleTx(moduleAddress, options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_moduleManager, "f").encodeEnableModuleData(moduleAddress),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      async createDisableModuleTx(moduleAddress, options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_moduleManager, "f").encodeDisableModuleData(moduleAddress),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      async createAddOwnerTx({ ownerAddress, threshold }, options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_ownerManager, "f").encodeAddOwnerWithThresholdData(ownerAddress, threshold),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      async createRemoveOwnerTx({ ownerAddress, threshold }, options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_ownerManager, "f").encodeRemoveOwnerData(ownerAddress, threshold),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      async createSwapOwnerTx({ oldOwnerAddress, newOwnerAddress }, options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_ownerManager, "f").encodeSwapOwnerData(oldOwnerAddress, newOwnerAddress),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      async createChangeThresholdTx(threshold, options) {
        const safeTransactionData = {
          to: this.getAddress(),
          value: "0",
          data: await __classPrivateFieldGet(this, _Safe_ownerManager, "f").encodeChangeThresholdData(threshold),
          ...options
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        return safeTransaction;
      }
      async toSafeTransactionType(serviceTransactionResponse) {
        var _a;
        const safeTransactionData = {
          to: serviceTransactionResponse.to,
          value: serviceTransactionResponse.value,
          data: serviceTransactionResponse.data || "0x",
          operation: serviceTransactionResponse.operation,
          safeTxGas: serviceTransactionResponse.safeTxGas,
          baseGas: serviceTransactionResponse.baseGas,
          gasPrice: Number(serviceTransactionResponse.gasPrice),
          gasToken: serviceTransactionResponse.gasToken,
          refundReceiver: serviceTransactionResponse.refundReceiver,
          nonce: serviceTransactionResponse.nonce
        };
        const safeTransaction = await this.createTransaction({ safeTransactionData });
        (_a = serviceTransactionResponse.confirmations) === null || _a === void 0 ? void 0 : _a.map((confirmation) => {
          const signature = new SafeSignature_1.default(confirmation.owner, confirmation.signature);
          safeTransaction.addSignature(signature);
        });
        return safeTransaction;
      }
      async isValidTransaction(safeTransaction, options) {
        let transaction = (0, utils_1.isSafeMultisigTransactionResponse)(safeTransaction) ? await this.toSafeTransactionType(safeTransaction) : safeTransaction;
        const signedSafeTransaction = await this.copyTransaction(transaction);
        const txHash = await this.getTransactionHash(signedSafeTransaction);
        const ownersWhoApprovedTx = await this.getOwnersWhoApprovedTx(txHash);
        for (const owner of ownersWhoApprovedTx) {
          signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(owner));
        }
        const owners = await this.getOwners();
        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getSignerAddress();
        if (!signerAddress) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        if (owners.includes(signerAddress)) {
          signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(signerAddress));
        }
        const isTxValid = await __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.isValidTransaction(signedSafeTransaction, {
          from: signerAddress,
          ...options
        });
        return isTxValid;
      }
      async executeTransaction(safeTransaction, options) {
        let transaction = (0, utils_1.isSafeMultisigTransactionResponse)(safeTransaction) ? await this.toSafeTransactionType(safeTransaction) : safeTransaction;
        const signedSafeTransaction = await this.copyTransaction(transaction);
        const txHash = await this.getTransactionHash(signedSafeTransaction);
        const ownersWhoApprovedTx = await this.getOwnersWhoApprovedTx(txHash);
        for (const owner of ownersWhoApprovedTx) {
          signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(owner));
        }
        const owners = await this.getOwners();
        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, "f").getSignerAddress();
        if (signerAddress && owners.includes(signerAddress)) {
          signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(signerAddress));
        }
        const threshold = await this.getThreshold();
        if (threshold > signedSafeTransaction.signatures.size) {
          const signaturesMissing = threshold - signedSafeTransaction.signatures.size;
          throw new Error(`There ${signaturesMissing > 1 ? "are" : "is"} ${signaturesMissing} signature${signaturesMissing > 1 ? "s" : ""} missing`);
        }
        const value = bignumber_1.BigNumber.from(signedSafeTransaction.data.value);
        if (!value.isZero()) {
          const balance = await this.getBalance();
          if (value.gt(bignumber_1.BigNumber.from(balance))) {
            throw new Error("Not enough Ether funds");
          }
        }
        if ((options === null || options === void 0 ? void 0 : options.gas) && (options === null || options === void 0 ? void 0 : options.gasLimit)) {
          throw new Error("Cannot specify gas and gasLimit together in transaction options");
        }
        const txResponse = await __classPrivateFieldGet(this, _Safe_contractManager, "f").safeContract.execTransaction(signedSafeTransaction, {
          from: signerAddress,
          ...options
        });
        return txResponse;
      }
    };
    _Safe_ethAdapter = /* @__PURE__ */ new WeakMap(), _Safe_contractManager = /* @__PURE__ */ new WeakMap(), _Safe_ownerManager = /* @__PURE__ */ new WeakMap(), _Safe_moduleManager = /* @__PURE__ */ new WeakMap(), _Safe_guardManager = /* @__PURE__ */ new WeakMap(), _Safe_fallbackHandlerManager = /* @__PURE__ */ new WeakMap();
    exports.default = Safe;
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/safeFactory/utils.js
var require_utils8 = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/safeFactory/utils.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSafeDeploymentConfig = exports.validateSafeAccountConfig = void 0;
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var validateSafeAccountConfig = ({ owners, threshold }) => {
      if (owners.length <= 0)
        throw new Error("Owner list must have at least one owner");
      if (threshold <= 0)
        throw new Error("Threshold must be greater than or equal to 1");
      if (threshold > owners.length)
        throw new Error("Threshold must be lower than or equal to owners length");
    };
    exports.validateSafeAccountConfig = validateSafeAccountConfig;
    var validateSafeDeploymentConfig = ({ saltNonce }) => {
      if (bignumber_1.BigNumber.from(saltNonce).lt(0))
        throw new Error("saltNonce must be greater than or equal to 0");
    };
    exports.validateSafeDeploymentConfig = validateSafeDeploymentConfig;
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/safeFactory/index.js
var require_safeFactory = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/safeFactory/index.js"(exports) {
    "use strict";
    init_shim();
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var _SafeFactory_contractNetworks;
    var _SafeFactory_isL1SafeMasterCopy;
    var _SafeFactory_safeVersion;
    var _SafeFactory_ethAdapter;
    var _SafeFactory_safeProxyFactoryContract;
    var _SafeFactory_gnosisSafeContract;
    Object.defineProperty(exports, "__esModule", { value: true });
    var ethereumjs_util_1 = require_dist3();
    var satisfies_1 = __importDefault(require_satisfies());
    var config_1 = require_config();
    var safeDeploymentContracts_1 = require_safeDeploymentContracts();
    var Safe_1 = __importDefault(require_Safe());
    var constants_1 = require_constants2();
    var utils_1 = require_utils8();
    var SafeFactory = class {
      constructor() {
        _SafeFactory_contractNetworks.set(this, void 0);
        _SafeFactory_isL1SafeMasterCopy.set(this, void 0);
        _SafeFactory_safeVersion.set(this, void 0);
        _SafeFactory_ethAdapter.set(this, void 0);
        _SafeFactory_safeProxyFactoryContract.set(this, void 0);
        _SafeFactory_gnosisSafeContract.set(this, void 0);
      }
      static async create({ ethAdapter, safeVersion = config_1.SAFE_LAST_VERSION, isL1SafeMasterCopy = false, contractNetworks }) {
        const safeFactorySdk = new SafeFactory();
        await safeFactorySdk.init({ ethAdapter, safeVersion, isL1SafeMasterCopy, contractNetworks });
        return safeFactorySdk;
      }
      async init({ ethAdapter, safeVersion, isL1SafeMasterCopy, contractNetworks }) {
        __classPrivateFieldSet(this, _SafeFactory_ethAdapter, ethAdapter, "f");
        __classPrivateFieldSet(this, _SafeFactory_safeVersion, safeVersion, "f");
        __classPrivateFieldSet(this, _SafeFactory_isL1SafeMasterCopy, isL1SafeMasterCopy, "f");
        __classPrivateFieldSet(this, _SafeFactory_contractNetworks, contractNetworks, "f");
        const chainId = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").getChainId();
        const customContracts = contractNetworks === null || contractNetworks === void 0 ? void 0 : contractNetworks[chainId];
        __classPrivateFieldSet(this, _SafeFactory_safeProxyFactoryContract, await (0, safeDeploymentContracts_1.getProxyFactoryContract)({
          ethAdapter,
          safeVersion,
          chainId,
          customContracts
        }), "f");
        __classPrivateFieldSet(this, _SafeFactory_gnosisSafeContract, await (0, safeDeploymentContracts_1.getSafeContract)({
          ethAdapter,
          safeVersion,
          chainId,
          isL1SafeMasterCopy,
          customContracts
        }), "f");
      }
      getEthAdapter() {
        return __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f");
      }
      getSafeVersion() {
        return __classPrivateFieldGet(this, _SafeFactory_safeVersion, "f");
      }
      getAddress() {
        return __classPrivateFieldGet(this, _SafeFactory_safeProxyFactoryContract, "f").getAddress();
      }
      async getChainId() {
        return __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").getChainId();
      }
      async encodeSetupCallData({ owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS }) {
        var _a;
        if ((0, satisfies_1.default)(__classPrivateFieldGet(this, _SafeFactory_safeVersion, "f"), "<=1.0.0")) {
          return __classPrivateFieldGet(this, _SafeFactory_gnosisSafeContract, "f").encode("setup", [
            owners,
            threshold,
            to,
            data,
            paymentToken,
            payment,
            paymentReceiver
          ]);
        }
        let fallbackHandlerAddress;
        if (fallbackHandler) {
          fallbackHandlerAddress = fallbackHandler;
        } else {
          const chainId = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").getChainId();
          const customContracts = (_a = __classPrivateFieldGet(this, _SafeFactory_contractNetworks, "f")) === null || _a === void 0 ? void 0 : _a[chainId];
          const fallbackHandlerContract = await (0, safeDeploymentContracts_1.getCompatibilityFallbackHandlerContract)({
            ethAdapter: __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f"),
            safeVersion: __classPrivateFieldGet(this, _SafeFactory_safeVersion, "f"),
            chainId,
            customContracts
          });
          fallbackHandlerAddress = fallbackHandlerContract.getAddress();
        }
        return __classPrivateFieldGet(this, _SafeFactory_gnosisSafeContract, "f").encode("setup", [
          owners,
          threshold,
          to,
          data,
          fallbackHandlerAddress,
          paymentToken,
          payment,
          paymentReceiver
        ]);
      }
      async predictSafeAddress({ safeAccountConfig, safeDeploymentConfig }) {
        (0, utils_1.validateSafeAccountConfig)(safeAccountConfig);
        (0, utils_1.validateSafeDeploymentConfig)(safeDeploymentConfig);
        const from = __classPrivateFieldGet(this, _SafeFactory_safeProxyFactoryContract, "f").getAddress();
        const initializer = await this.encodeSetupCallData(safeAccountConfig);
        const saltNonce = safeDeploymentConfig.saltNonce;
        const encodedNonce = (0, ethereumjs_util_1.toBuffer)(__classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").encodeParameters(["uint256"], [saltNonce])).toString("hex");
        const salt = (0, ethereumjs_util_1.keccak256)((0, ethereumjs_util_1.toBuffer)("0x" + (0, ethereumjs_util_1.keccak256)((0, ethereumjs_util_1.toBuffer)(initializer)).toString("hex") + encodedNonce));
        const proxyCreationCode = await __classPrivateFieldGet(this, _SafeFactory_safeProxyFactoryContract, "f").proxyCreationCode();
        const constructorData = (0, ethereumjs_util_1.toBuffer)(__classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").encodeParameters(["address"], [__classPrivateFieldGet(this, _SafeFactory_gnosisSafeContract, "f").getAddress()])).toString("hex");
        const initCode = proxyCreationCode + constructorData;
        const proxyAddress = "0x" + (0, ethereumjs_util_1.generateAddress2)((0, ethereumjs_util_1.toBuffer)(from), (0, ethereumjs_util_1.toBuffer)(salt), (0, ethereumjs_util_1.toBuffer)(initCode)).toString("hex");
        return __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").getChecksummedAddress(proxyAddress);
      }
      async deploySafe({ safeAccountConfig, safeDeploymentConfig, options, callback }) {
        var _a;
        (0, utils_1.validateSafeAccountConfig)(safeAccountConfig);
        if (safeDeploymentConfig) {
          (0, utils_1.validateSafeDeploymentConfig)(safeDeploymentConfig);
        }
        const signerAddress = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").getSignerAddress();
        if (!signerAddress) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        const initializer = await this.encodeSetupCallData(safeAccountConfig);
        const saltNonce = (_a = safeDeploymentConfig === null || safeDeploymentConfig === void 0 ? void 0 : safeDeploymentConfig.saltNonce) !== null && _a !== void 0 ? _a : (Date.now() * 1e3 + Math.floor(Math.random() * 1e3)).toString();
        if ((options === null || options === void 0 ? void 0 : options.gas) && (options === null || options === void 0 ? void 0 : options.gasLimit)) {
          throw new Error("Cannot specify gas and gasLimit together in transaction options");
        }
        const safeAddress = await __classPrivateFieldGet(this, _SafeFactory_safeProxyFactoryContract, "f").createProxy({
          safeMasterCopyAddress: __classPrivateFieldGet(this, _SafeFactory_gnosisSafeContract, "f").getAddress(),
          initializer,
          saltNonce,
          options: {
            from: signerAddress,
            ...options
          },
          callback
        });
        const isContractDeployed = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f").isContractDeployed(safeAddress);
        if (!isContractDeployed) {
          throw new Error("SafeProxy contract is not deployed on the current network");
        }
        const safe = await Safe_1.default.create({
          ethAdapter: __classPrivateFieldGet(this, _SafeFactory_ethAdapter, "f"),
          safeAddress,
          isL1SafeMasterCopy: __classPrivateFieldGet(this, _SafeFactory_isL1SafeMasterCopy, "f"),
          contractNetworks: __classPrivateFieldGet(this, _SafeFactory_contractNetworks, "f")
        });
        return safe;
      }
    };
    _SafeFactory_contractNetworks = /* @__PURE__ */ new WeakMap(), _SafeFactory_isL1SafeMasterCopy = /* @__PURE__ */ new WeakMap(), _SafeFactory_safeVersion = /* @__PURE__ */ new WeakMap(), _SafeFactory_ethAdapter = /* @__PURE__ */ new WeakMap(), _SafeFactory_safeProxyFactoryContract = /* @__PURE__ */ new WeakMap(), _SafeFactory_gnosisSafeContract = /* @__PURE__ */ new WeakMap();
    exports.default = SafeFactory;
  }
});

// node_modules/@safe-global/safe-core-sdk/dist/src/index.js
var require_src7 = __commonJS({
  "node_modules/@safe-global/safe-core-sdk/dist/src/index.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.standardizeSafeTransactionData = exports.SafeFactory = exports.ContractManager = void 0;
    var contractManager_1 = __importDefault(require_contractManager());
    exports.ContractManager = contractManager_1.default;
    var Safe_1 = __importDefault(require_Safe());
    var safeFactory_1 = __importDefault(require_safeFactory());
    exports.SafeFactory = safeFactory_1.default;
    var utils_1 = require_utils7();
    Object.defineProperty(exports, "standardizeSafeTransactionData", { enumerable: true, get: function() {
      return utils_1.standardizeSafeTransactionData;
    } });
    exports.default = Safe_1.default;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.0.0/factories/Gnosis_safe__factory.js
var require_Gnosis_safe_factory = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.0.0/factories/Gnosis_safe__factory.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Gnosis_safe__factory = void 0;
    var ethers_1 = (init_lib7(), __toCommonJS(lib_exports7));
    var _abi = [
      {
        constant: false,
        inputs: [
          {
            name: "owner",
            type: "address"
          },
          {
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "addOwnerWithThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "DOMAIN_SEPARATOR_TYPEHASH",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "owner",
            type: "address"
          }
        ],
        name: "isOwner",
        outputs: [
          {
            name: "",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "value",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModule",
        outputs: [
          {
            name: "success",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        name: "signedMessages",
        outputs: [
          {
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "module",
            type: "address"
          }
        ],
        name: "enableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "changeThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "",
            type: "address"
          },
          {
            name: "",
            type: "bytes32"
          }
        ],
        name: "approvedHashes",
        outputs: [
          {
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "_masterCopy",
            type: "address"
          }
        ],
        name: "changeMasterCopy",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "SENTINEL_MODULES",
        outputs: [
          {
            name: "",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "SENTINEL_OWNERS",
        outputs: [
          {
            name: "",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getOwners",
        outputs: [
          {
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "NAME",
        outputs: [
          {
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "nonce",
        outputs: [
          {
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getModules",
        outputs: [
          {
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "SAFE_MSG_TYPEHASH",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "SAFE_TX_TYPEHASH",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "prevModule",
            type: "address"
          },
          {
            name: "module",
            type: "address"
          }
        ],
        name: "disableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "prevOwner",
            type: "address"
          },
          {
            name: "oldOwner",
            type: "address"
          },
          {
            name: "newOwner",
            type: "address"
          }
        ],
        name: "swapOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getThreshold",
        outputs: [
          {
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "domainSeparator",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "prevOwner",
            type: "address"
          },
          {
            name: "owner",
            type: "address"
          },
          {
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "removeOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "VERSION",
        outputs: [
          {
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        payable: true,
        stateMutability: "payable",
        type: "fallback"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "txHash",
            type: "bytes32"
          }
        ],
        name: "ExecutionFailed",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "owner",
            type: "address"
          }
        ],
        name: "AddedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "owner",
            type: "address"
          }
        ],
        name: "RemovedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "threshold",
            type: "uint256"
          }
        ],
        name: "ChangedThreshold",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "module",
            type: "address"
          }
        ],
        name: "EnabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "module",
            type: "address"
          }
        ],
        name: "DisabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "newContract",
            type: "address"
          }
        ],
        name: "ContractCreation",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          {
            name: "_owners",
            type: "address[]"
          },
          {
            name: "_threshold",
            type: "uint256"
          },
          {
            name: "to",
            type: "address"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "paymentToken",
            type: "address"
          },
          {
            name: "payment",
            type: "uint256"
          },
          {
            name: "paymentReceiver",
            type: "address"
          }
        ],
        name: "setup",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "value",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "operation",
            type: "uint8"
          },
          {
            name: "safeTxGas",
            type: "uint256"
          },
          {
            name: "baseGas",
            type: "uint256"
          },
          {
            name: "gasPrice",
            type: "uint256"
          },
          {
            name: "gasToken",
            type: "address"
          },
          {
            name: "refundReceiver",
            type: "address"
          },
          {
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "execTransaction",
        outputs: [
          {
            name: "success",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "value",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "operation",
            type: "uint8"
          }
        ],
        name: "requiredTxGas",
        outputs: [
          {
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "hashToApprove",
            type: "bytes32"
          }
        ],
        name: "approveHash",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "_data",
            type: "bytes"
          }
        ],
        name: "signMessage",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "_data",
            type: "bytes"
          },
          {
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            name: "",
            type: "bytes4"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "value",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "operation",
            type: "uint8"
          },
          {
            name: "safeTxGas",
            type: "uint256"
          },
          {
            name: "baseGas",
            type: "uint256"
          },
          {
            name: "gasPrice",
            type: "uint256"
          },
          {
            name: "gasToken",
            type: "address"
          },
          {
            name: "refundReceiver",
            type: "address"
          },
          {
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "encodeTransactionData",
        outputs: [
          {
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "value",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          },
          {
            name: "operation",
            type: "uint8"
          },
          {
            name: "safeTxGas",
            type: "uint256"
          },
          {
            name: "baseGas",
            type: "uint256"
          },
          {
            name: "gasPrice",
            type: "uint256"
          },
          {
            name: "gasToken",
            type: "address"
          },
          {
            name: "refundReceiver",
            type: "address"
          },
          {
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "getTransactionHash",
        outputs: [
          {
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    var Gnosis_safe__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Gnosis_safe__factory = Gnosis_safe__factory;
    Gnosis_safe__factory.abi = _abi;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.0.0/factories/Proxy_factory__factory.js
var require_Proxy_factory_factory = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.0.0/factories/Proxy_factory__factory.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Proxy_factory__factory = void 0;
    var ethers_1 = (init_lib7(), __toCommonJS(lib_exports7));
    var _abi = [
      {
        constant: false,
        inputs: [
          {
            name: "_mastercopy",
            type: "address"
          },
          {
            name: "initializer",
            type: "bytes"
          },
          {
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "createProxyWithNonce",
        outputs: [
          {
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "proxyCreationCode",
        outputs: [
          {
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            name: "masterCopy",
            type: "address"
          },
          {
            name: "data",
            type: "bytes"
          }
        ],
        name: "createProxy",
        outputs: [
          {
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "proxyRuntimeCode",
        outputs: [
          {
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            name: "proxy",
            type: "address"
          }
        ],
        name: "ProxyCreation",
        type: "event"
      }
    ];
    var Proxy_factory__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Proxy_factory__factory = Proxy_factory__factory;
    Proxy_factory__factory.abi = _abi;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.1.1/factories/Gnosis_safe__factory.js
var require_Gnosis_safe_factory2 = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.1.1/factories/Gnosis_safe__factory.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Gnosis_safe__factory = void 0;
    var ethers_1 = (init_lib7(), __toCommonJS(lib_exports7));
    var _abi = [
      {
        inputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "AddedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "approvedHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "ApproveHash",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "masterCopy",
            type: "address"
          }
        ],
        name: "ChangedMasterCopy",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "threshold",
            type: "uint256"
          }
        ],
        name: "ChangedThreshold",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "DisabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "EnabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "RemovedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "msgHash",
            type: "bytes32"
          }
        ],
        name: "SignMsg",
        type: "event"
      },
      {
        payable: true,
        stateMutability: "payable",
        type: "fallback"
      },
      {
        constant: true,
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "VERSION",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "addOwnerWithThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "approvedHashes",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "_masterCopy",
            type: "address"
          }
        ],
        name: "changeMasterCopy",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "changeThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "contract Module",
            name: "prevModule",
            type: "address"
          },
          {
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "disableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "domainSeparator",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "enableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModule",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModuleReturnData",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getModules",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "start",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "pageSize",
            type: "uint256"
          }
        ],
        name: "getModulesPaginated",
        outputs: [
          {
            internalType: "address[]",
            name: "array",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "next",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getOwners",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getThreshold",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "nonce",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "removeOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "handler",
            type: "address"
          }
        ],
        name: "setFallbackHandler",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "signedMessages",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "oldOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "swapOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address[]",
            name: "_owners",
            type: "address[]"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "fallbackHandler",
            type: "address"
          },
          {
            internalType: "address",
            name: "paymentToken",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          },
          {
            internalType: "address payable",
            name: "paymentReceiver",
            type: "address"
          }
        ],
        name: "setup",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address payable",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "execTransaction",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "requiredTxGas",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes32",
            name: "hashToApprove",
            type: "bytes32"
          }
        ],
        name: "approveHash",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          }
        ],
        name: "signMessage",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "encodeTransactionData",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "getTransactionHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    var Gnosis_safe__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Gnosis_safe__factory = Gnosis_safe__factory;
    Gnosis_safe__factory.abi = _abi;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.1.1/factories/Multi_send__factory.js
var require_Multi_send_factory = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.1.1/factories/Multi_send__factory.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Multi_send__factory = void 0;
    var ethers_1 = (init_lib7(), __toCommonJS(lib_exports7));
    var _abi = [
      {
        inputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes",
            name: "transactions",
            type: "bytes"
          }
        ],
        name: "multiSend",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Multi_send__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Multi_send__factory = Multi_send__factory;
    Multi_send__factory.abi = _abi;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.1.1/factories/Proxy_factory__factory.js
var require_Proxy_factory_factory2 = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.1.1/factories/Proxy_factory__factory.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Proxy_factory__factory = void 0;
    var ethers_1 = (init_lib7(), __toCommonJS(lib_exports7));
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        name: "ProxyCreation",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "masterCopy",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "createProxy",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "proxyRuntimeCode",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "proxyCreationCode",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "_mastercopy",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "createProxyWithNonce",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "_mastercopy",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          },
          {
            internalType: "contract IProxyCreationCallback",
            name: "callback",
            type: "address"
          }
        ],
        name: "createProxyWithCallback",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "_mastercopy",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "calculateCreateProxyWithNonceAddress",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Proxy_factory__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Proxy_factory__factory = Proxy_factory__factory;
    Proxy_factory__factory.abi = _abi;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.2.0/factories/Gnosis_safe__factory.js
var require_Gnosis_safe_factory3 = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.2.0/factories/Gnosis_safe__factory.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Gnosis_safe__factory = void 0;
    var ethers_1 = (init_lib7(), __toCommonJS(lib_exports7));
    var _abi = [
      {
        inputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "AddedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "approvedHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "ApproveHash",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "masterCopy",
            type: "address"
          }
        ],
        name: "ChangedMasterCopy",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "threshold",
            type: "uint256"
          }
        ],
        name: "ChangedThreshold",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "DisabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "EnabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "RemovedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "msgHash",
            type: "bytes32"
          }
        ],
        name: "SignMsg",
        type: "event"
      },
      {
        payable: true,
        stateMutability: "payable",
        type: "fallback"
      },
      {
        constant: true,
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "VERSION",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "addOwnerWithThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "approvedHashes",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "_masterCopy",
            type: "address"
          }
        ],
        name: "changeMasterCopy",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "changeThreshold",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "contract Module",
            name: "prevModule",
            type: "address"
          },
          {
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "disableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "domainSeparator",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "enableModule",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModule",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModuleReturnData",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getModules",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "start",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "pageSize",
            type: "uint256"
          }
        ],
        name: "getModulesPaginated",
        outputs: [
          {
            internalType: "address[]",
            name: "array",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "next",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getOwners",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getThreshold",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "contract Module",
            name: "module",
            type: "address"
          }
        ],
        name: "isModuleEnabled",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "nonce",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "removeOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "handler",
            type: "address"
          }
        ],
        name: "setFallbackHandler",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "signedMessages",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "oldOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "swapOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address[]",
            name: "_owners",
            type: "address[]"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "fallbackHandler",
            type: "address"
          },
          {
            internalType: "address",
            name: "paymentToken",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          },
          {
            internalType: "address payable",
            name: "paymentReceiver",
            type: "address"
          }
        ],
        name: "setup",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address payable",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "execTransaction",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "requiredTxGas",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes32",
            name: "hashToApprove",
            type: "bytes32"
          }
        ],
        name: "approveHash",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          }
        ],
        name: "signMessage",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "encodeTransactionData",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "getTransactionHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    var Gnosis_safe__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Gnosis_safe__factory = Gnosis_safe__factory;
    Gnosis_safe__factory.abi = _abi;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Compatibility_fallback_handler__factory.js
var require_Compatibility_fallback_handler_factory = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Compatibility_fallback_handler__factory.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Compatibility_fallback_handler__factory = void 0;
    var ethers_1 = (init_lib7(), __toCommonJS(lib_exports7));
    var _abi = [
      {
        inputs: [],
        name: "NAME",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "VERSION",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "contract GnosisSafe",
            name: "safe",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHashForSafe",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getModules",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "_dataHash",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "_signature",
            type: "bytes"
          }
        ],
        name: "isValidSignature",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "uint256[]",
            name: "",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "",
            type: "uint256[]"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        name: "onERC1155BatchReceived",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        name: "onERC1155Received",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        name: "onERC721Received",
        outputs: [
          {
            internalType: "bytes4",
            name: "",
            type: "bytes4"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "targetContract",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "calldataPayload",
            type: "bytes"
          }
        ],
        name: "simulate",
        outputs: [
          {
            internalType: "bytes",
            name: "response",
            type: "bytes"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes4",
            name: "interfaceId",
            type: "bytes4"
          }
        ],
        name: "supportsInterface",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        name: "tokensReceived",
        outputs: [],
        stateMutability: "pure",
        type: "function"
      }
    ];
    var Compatibility_fallback_handler__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Compatibility_fallback_handler__factory = Compatibility_fallback_handler__factory;
    Compatibility_fallback_handler__factory.abi = _abi;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Gnosis_safe__factory.js
var require_Gnosis_safe_factory4 = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Gnosis_safe__factory.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Gnosis_safe__factory = void 0;
    var ethers_1 = (init_lib7(), __toCommonJS(lib_exports7));
    var _abi = [
      {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "AddedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "approvedHash",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "ApproveHash",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "handler",
            type: "address"
          }
        ],
        name: "ChangedFallbackHandler",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "guard",
            type: "address"
          }
        ],
        name: "ChangedGuard",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "uint256",
            name: "threshold",
            type: "uint256"
          }
        ],
        name: "ChangedThreshold",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "DisabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "EnabledModule",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleFailure",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "ExecutionFromModuleSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          }
        ],
        name: "ExecutionSuccess",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "RemovedOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "sender",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "SafeReceived",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "initiator",
            type: "address"
          },
          {
            indexed: false,
            internalType: "address[]",
            name: "owners",
            type: "address[]"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "threshold",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "address",
            name: "initializer",
            type: "address"
          },
          {
            indexed: false,
            internalType: "address",
            name: "fallbackHandler",
            type: "address"
          }
        ],
        name: "SafeSetup",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "msgHash",
            type: "bytes32"
          }
        ],
        name: "SignMsg",
        type: "event"
      },
      {
        stateMutability: "nonpayable",
        type: "fallback"
      },
      {
        inputs: [],
        name: "VERSION",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "addOwnerWithThreshold",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "hashToApprove",
            type: "bytes32"
          }
        ],
        name: "approveHash",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "approvedHashes",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "changeThreshold",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "dataHash",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "requiredSignatures",
            type: "uint256"
          }
        ],
        name: "checkNSignatures",
        outputs: [],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "dataHash",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "checkSignatures",
        outputs: [],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "prevModule",
            type: "address"
          },
          {
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "disableModule",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "domainSeparator",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "enableModule",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "encodeTransactionData",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address payable",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        name: "execTransaction",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModule",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "execTransactionFromModuleReturnData",
        outputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "getChainId",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "start",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "pageSize",
            type: "uint256"
          }
        ],
        name: "getModulesPaginated",
        outputs: [
          {
            internalType: "address[]",
            name: "array",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "next",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getOwners",
        outputs: [
          {
            internalType: "address[]",
            name: "",
            type: "address[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "offset",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "length",
            type: "uint256"
          }
        ],
        name: "getStorageAt",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "getThreshold",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "safeTxGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "baseGas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "gasToken",
            type: "address"
          },
          {
            internalType: "address",
            name: "refundReceiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_nonce",
            type: "uint256"
          }
        ],
        name: "getTransactionHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "module",
            type: "address"
          }
        ],
        name: "isModuleEnabled",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "isOwner",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "nonce",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          }
        ],
        name: "removeOwner",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "enum Enum.Operation",
            name: "operation",
            type: "uint8"
          }
        ],
        name: "requiredTxGas",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "handler",
            type: "address"
          }
        ],
        name: "setFallbackHandler",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "guard",
            type: "address"
          }
        ],
        name: "setGuard",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address[]",
            name: "_owners",
            type: "address[]"
          },
          {
            internalType: "uint256",
            name: "_threshold",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "fallbackHandler",
            type: "address"
          },
          {
            internalType: "address",
            name: "paymentToken",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "payment",
            type: "uint256"
          },
          {
            internalType: "address payable",
            name: "paymentReceiver",
            type: "address"
          }
        ],
        name: "setup",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        name: "signedMessages",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "targetContract",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "calldataPayload",
            type: "bytes"
          }
        ],
        name: "simulateAndRevert",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "prevOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "oldOwner",
            type: "address"
          },
          {
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "swapOwner",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        stateMutability: "payable",
        type: "receive"
      }
    ];
    var Gnosis_safe__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Gnosis_safe__factory = Gnosis_safe__factory;
    Gnosis_safe__factory.abi = _abi;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Multi_send_call_only__factory.js
var require_Multi_send_call_only_factory = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Multi_send_call_only__factory.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Multi_send_call_only__factory = void 0;
    var ethers_1 = (init_lib7(), __toCommonJS(lib_exports7));
    var _abi = [
      {
        inputs: [
          {
            internalType: "bytes",
            name: "transactions",
            type: "bytes"
          }
        ],
        name: "multiSend",
        outputs: [],
        stateMutability: "payable",
        type: "function"
      }
    ];
    var Multi_send_call_only__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Multi_send_call_only__factory = Multi_send_call_only__factory;
    Multi_send_call_only__factory.abi = _abi;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Multi_send__factory.js
var require_Multi_send_factory2 = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Multi_send__factory.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Multi_send__factory = void 0;
    var ethers_1 = (init_lib7(), __toCommonJS(lib_exports7));
    var _abi = [
      {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "transactions",
            type: "bytes"
          }
        ],
        name: "multiSend",
        outputs: [],
        stateMutability: "payable",
        type: "function"
      }
    ];
    var Multi_send__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Multi_send__factory = Multi_send__factory;
    Multi_send__factory.abi = _abi;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Proxy_factory__factory.js
var require_Proxy_factory_factory3 = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Proxy_factory__factory.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Proxy_factory__factory = void 0;
    var ethers_1 = (init_lib7(), __toCommonJS(lib_exports7));
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          },
          {
            indexed: false,
            internalType: "address",
            name: "singleton",
            type: "address"
          }
        ],
        name: "ProxyCreation",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_singleton",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "calculateCreateProxyWithNonceAddress",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "singleton",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "createProxy",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_singleton",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          },
          {
            internalType: "contract IProxyCreationCallback",
            name: "callback",
            type: "address"
          }
        ],
        name: "createProxyWithCallback",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "_singleton",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "initializer",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "saltNonce",
            type: "uint256"
          }
        ],
        name: "createProxyWithNonce",
        outputs: [
          {
            internalType: "contract GnosisSafeProxy",
            name: "proxy",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "proxyCreationCode",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "pure",
        type: "function"
      },
      {
        inputs: [],
        name: "proxyRuntimeCode",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "pure",
        type: "function"
      }
    ];
    var Proxy_factory__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Proxy_factory__factory = Proxy_factory__factory;
    Proxy_factory__factory.abi = _abi;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Sign_message_lib__factory.js
var require_Sign_message_lib_factory = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Sign_message_lib__factory.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sign_message_lib__factory = void 0;
    var ethers_1 = (init_lib7(), __toCommonJS(lib_exports7));
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "msgHash",
            type: "bytes32"
          }
        ],
        name: "SignMsg",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        name: "getMessageHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "_data",
            type: "bytes"
          }
        ],
        name: "signMessage",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Sign_message_lib__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Sign_message_lib__factory = Sign_message_lib__factory;
    Sign_message_lib__factory.abi = _abi;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Create_call__factory.js
var require_Create_call_factory = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/typechain/src/ethers-v5/v1.3.0/factories/Create_call__factory.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Create_call__factory = void 0;
    var ethers_1 = (init_lib7(), __toCommonJS(lib_exports7));
    var _abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "newContract",
            type: "address"
          }
        ],
        name: "ContractCreation",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "deploymentData",
            type: "bytes"
          }
        ],
        name: "performCreate",
        outputs: [
          {
            internalType: "address",
            name: "newContract",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "deploymentData",
            type: "bytes"
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32"
          }
        ],
        name: "performCreate2",
        outputs: [
          {
            internalType: "address",
            name: "newContract",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var Create_call__factory = class {
      static createInterface() {
        return new ethers_1.utils.Interface(_abi);
      }
      static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
      }
    };
    exports.Create_call__factory = Create_call__factory;
    Create_call__factory.abi = _abi;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/CompatibilityFallbackHandler/CompatibilityFallbackHandlerEthersContract.js
var require_CompatibilityFallbackHandlerEthersContract = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/CompatibilityFallbackHandler/CompatibilityFallbackHandlerEthersContract.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var CompatibilityFallbackHandlerEthersContract = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      getAddress() {
        return this.contract.address;
      }
    };
    exports.default = CompatibilityFallbackHandlerEthersContract;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/CompatibilityFallbackHandler/v1.3.0/CompatibilityFallbackHandler_V1_3_0_Ethers.js
var require_CompatibilityFallbackHandler_V1_3_0_Ethers = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/CompatibilityFallbackHandler/v1.3.0/CompatibilityFallbackHandler_V1_3_0_Ethers.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var CompatibilityFallbackHandlerEthersContract_1 = __importDefault(require_CompatibilityFallbackHandlerEthersContract());
    var CompatibilityFallbackHandler_V1_3_0_Ethers = class extends CompatibilityFallbackHandlerEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = CompatibilityFallbackHandler_V1_3_0_Ethers;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/utils/index.js
var require_utils9 = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/utils/index.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isTypedDataSigner = exports.toTxResult = exports.sameString = void 0;
    function sameString(str1, str2) {
      return str1.toLowerCase() === str2.toLowerCase();
    }
    exports.sameString = sameString;
    function toTxResult(transactionResponse, options) {
      return {
        hash: transactionResponse.hash,
        options,
        transactionResponse
      };
    }
    exports.toTxResult = toTxResult;
    function isTypedDataSigner(signer) {
      return signer._signTypedData !== void 0;
    }
    exports.isTypedDataSigner = isTypedDataSigner;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/CreateCall/CreateCallEthersContract.js
var require_CreateCallEthersContract = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/CreateCall/CreateCallEthersContract.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils9();
    var CreateCallEthersContract = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      getAddress() {
        return this.contract.address;
      }
      async performCreate2(value, deploymentData, salt, options) {
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("performCreate2", [value, deploymentData, salt], {
            ...options
          });
        }
        const txResponse = await this.contract.performCreate2(value, deploymentData, salt, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async performCreate(value, deploymentData, options) {
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("performCreate", [value, deploymentData], {
            ...options
          });
        }
        const txResponse = await this.contract.performCreate(value, deploymentData, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async estimateGas(methodName, params, options) {
        return (await this.contract.estimateGas[methodName](...params, options)).toNumber();
      }
    };
    exports.default = CreateCallEthersContract;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/CreateCall/v1.3.0/CreateCallEthersContract_V1_3_0_Ethers.js
var require_CreateCallEthersContract_V1_3_0_Ethers = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/CreateCall/v1.3.0/CreateCallEthersContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var CreateCallEthersContract_1 = __importDefault(require_CreateCallEthersContract());
    var CreateCallContract_V1_3_0_Ethers = class extends CreateCallEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = CreateCallContract_V1_3_0_Ethers;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/utils/constants.js
var require_constants3 = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/utils/constants.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SENTINEL_ADDRESS = exports.EMPTY_DATA = exports.ZERO_ADDRESS = void 0;
    exports.ZERO_ADDRESS = `0x${"0".repeat(40)}`;
    exports.EMPTY_DATA = "0x";
    exports.SENTINEL_ADDRESS = "0x0000000000000000000000000000000000000001";
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/GnosisSafeContractEthers.js
var require_GnosisSafeContractEthers = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/GnosisSafeContractEthers.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils9();
    var GnosisSafeContractEthers = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      async getVersion() {
        return await this.contract.VERSION();
      }
      getAddress() {
        return this.contract.address;
      }
      async getNonce() {
        return (await this.contract.nonce()).toNumber();
      }
      async getThreshold() {
        return (await this.contract.getThreshold()).toNumber();
      }
      async getOwners() {
        return this.contract.getOwners();
      }
      async isOwner(address) {
        return this.contract.isOwner(address);
      }
      async getTransactionHash(safeTransactionData) {
        return this.contract.getTransactionHash(safeTransactionData.to, safeTransactionData.value, safeTransactionData.data, safeTransactionData.operation, safeTransactionData.safeTxGas, safeTransactionData.baseGas, safeTransactionData.gasPrice, safeTransactionData.gasToken, safeTransactionData.refundReceiver, safeTransactionData.nonce);
      }
      async approvedHashes(ownerAddress, hash) {
        return this.contract.approvedHashes(ownerAddress, hash);
      }
      async approveHash(hash, options) {
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("approveHash", [hash], { ...options });
        }
        const txResponse = await this.contract.approveHash(hash, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async isValidTransaction(safeTransaction, options) {
        let isTxValid = false;
        try {
          if (options && !options.gasLimit) {
            options.gasLimit = await this.estimateGas("execTransaction", [
              safeTransaction.data.to,
              safeTransaction.data.value,
              safeTransaction.data.data,
              safeTransaction.data.operation,
              safeTransaction.data.safeTxGas,
              safeTransaction.data.baseGas,
              safeTransaction.data.gasPrice,
              safeTransaction.data.gasToken,
              safeTransaction.data.refundReceiver,
              safeTransaction.encodedSignatures()
            ], {
              ...options
            });
          }
          isTxValid = await this.contract.callStatic.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures(), options);
        } catch {
        }
        return isTxValid;
      }
      async execTransaction(safeTransaction, options) {
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("execTransaction", [
            safeTransaction.data.to,
            safeTransaction.data.value,
            safeTransaction.data.data,
            safeTransaction.data.operation,
            safeTransaction.data.safeTxGas,
            safeTransaction.data.baseGas,
            safeTransaction.data.gasPrice,
            safeTransaction.data.gasToken,
            safeTransaction.data.refundReceiver,
            safeTransaction.encodedSignatures()
          ], {
            ...options
          });
        }
        const txResponse = await this.contract.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures(), options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async estimateGas(methodName, params, options) {
        return (await this.contract.estimateGas[methodName](...params, options)).toNumber();
      }
    };
    exports.default = GnosisSafeContractEthers;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/v1.0.0/GnosisSafeContract_V1_0_0_Ethers.js
var require_GnosisSafeContract_V1_0_0_Ethers = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/v1.0.0/GnosisSafeContract_V1_0_0_Ethers.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants3();
    var utils_1 = require_utils9();
    var GnosisSafeContractEthers_1 = __importDefault(require_GnosisSafeContractEthers());
    var GnosisSafeContract_V1_0_0_Ethers = class extends GnosisSafeContractEthers_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("setup", [owners, threshold, to, data, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = await this.contract.setup(owners, threshold, to, data, paymentToken, payment, paymentReceiver, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        return this.contract.getModules();
      }
      async isModuleEnabled(moduleAddress) {
        const modules = await this.getModules();
        const isModuleEnabled = modules.some((enabledModuleAddress) => (0, utils_1.sameString)(enabledModuleAddress, moduleAddress));
        return isModuleEnabled;
      }
    };
    exports.default = GnosisSafeContract_V1_0_0_Ethers;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/v1.1.1/GnosisSafeContract_V1_1_1_Ethers.js
var require_GnosisSafeContract_V1_1_1_Ethers = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/v1.1.1/GnosisSafeContract_V1_1_1_Ethers.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var constants_1 = require_constants3();
    var utils_1 = require_utils9();
    var GnosisSafeContractEthers_1 = __importDefault(require_GnosisSafeContractEthers());
    var GnosisSafeContract_V1_1_1_Ethers = class extends GnosisSafeContractEthers_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = await this.contract.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        return this.contract.getModules();
      }
      async isModuleEnabled(moduleAddress) {
        const modules = await this.getModules();
        const isModuleEnabled = modules.some((enabledModuleAddress) => (0, utils_1.sameString)(enabledModuleAddress, moduleAddress));
        return isModuleEnabled;
      }
    };
    exports.default = GnosisSafeContract_V1_1_1_Ethers;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/v1.2.0/GnosisSafeContract_V1_2_0_Ethers.js
var require_GnosisSafeContract_V1_2_0_Ethers = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/v1.2.0/GnosisSafeContract_V1_2_0_Ethers.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils9();
    var constants_1 = require_constants3();
    var GnosisSafeContractEthers_1 = __importDefault(require_GnosisSafeContractEthers());
    var GnosisSafeContract_V1_2_0_Ethers = class extends GnosisSafeContractEthers_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = await this.contract.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        return this.contract.getModules();
      }
      async isModuleEnabled(moduleAddress) {
        return this.contract.isModuleEnabled(moduleAddress);
      }
    };
    exports.default = GnosisSafeContract_V1_2_0_Ethers;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/v1.3.0/GnosisSafeContract_V1_3_0_Ethers.js
var require_GnosisSafeContract_V1_3_0_Ethers = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafe/v1.3.0/GnosisSafeContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils9();
    var constants_1 = require_constants3();
    var GnosisSafeContractEthers_1 = __importDefault(require_GnosisSafeContractEthers());
    var GnosisSafeContract_V1_3_0_Ethers = class extends GnosisSafeContractEthers_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
      async setup(setupConfig, options) {
        const { owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler = constants_1.ZERO_ADDRESS, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS } = setupConfig;
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("setup", [owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver], {
            ...options
          });
        }
        const txResponse = await this.contract.setup(owners, threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getModules() {
        const { array } = await this.contract.getModulesPaginated(constants_1.SENTINEL_ADDRESS, 10);
        return array;
      }
      async isModuleEnabled(moduleAddress) {
        return this.contract.isModuleEnabled(moduleAddress);
      }
    };
    exports.default = GnosisSafeContract_V1_3_0_Ethers;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafeProxyFactory/GnosisSafeProxyFactoryEthersContract.js
var require_GnosisSafeProxyFactoryEthersContract = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafeProxyFactory/GnosisSafeProxyFactoryEthersContract.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var GnosisSafeProxyFactoryEthersContract = class {
      constructor(contract) {
        this.contract = contract;
      }
      getAddress() {
        return this.contract.address;
      }
      async proxyCreationCode() {
        return this.contract.proxyCreationCode();
      }
      async createProxy({ safeMasterCopyAddress, initializer, saltNonce, options, callback }) {
        if (bignumber_1.BigNumber.from(saltNonce).lt(0))
          throw new Error("saltNonce must be greater than or equal to 0");
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("createProxyWithNonce", [safeMasterCopyAddress, initializer, saltNonce], {
            ...options
          });
        }
        const proxyAddress = this.contract.createProxyWithNonce(safeMasterCopyAddress, initializer, saltNonce, options).then(async (txResponse) => {
          var _a;
          if (callback) {
            callback(txResponse.hash);
          }
          const txReceipt = await txResponse.wait();
          const proxyCreationEvent = (_a = txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.events) === null || _a === void 0 ? void 0 : _a.find(({ event }) => event === "ProxyCreation");
          if (!proxyCreationEvent || !proxyCreationEvent.args) {
            throw new Error("SafeProxy was not deployed correctly");
          }
          const proxyAddress2 = proxyCreationEvent.args[0];
          return proxyAddress2;
        });
        return proxyAddress;
      }
      encode(methodName, params) {
        return this.contract.interface.encodeFunctionData(methodName, params);
      }
      async estimateGas(methodName, params, options) {
        return (await this.contract.estimateGas[methodName](...params, options)).toNumber();
      }
    };
    exports.default = GnosisSafeProxyFactoryEthersContract;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.0.0/GnosisSafeProxyFactoryContract_V1_0_0_Ethers.js
var require_GnosisSafeProxyFactoryContract_V1_0_0_Ethers = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.0.0/GnosisSafeProxyFactoryContract_V1_0_0_Ethers.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var GnosisSafeProxyFactoryEthersContract_1 = __importDefault(require_GnosisSafeProxyFactoryEthersContract());
    var GnosisSafeProxyFactoryContract_V1_0_0_Ethers = class extends GnosisSafeProxyFactoryEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = GnosisSafeProxyFactoryContract_V1_0_0_Ethers;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.1.1/GnosisSafeProxyFactoryContract_V1_1_1_Ethers.js
var require_GnosisSafeProxyFactoryContract_V1_1_1_Ethers = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.1.1/GnosisSafeProxyFactoryContract_V1_1_1_Ethers.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var GnosisSafeProxyFactoryEthersContract_1 = __importDefault(require_GnosisSafeProxyFactoryEthersContract());
    var GnosisSafeProxyFactoryContract_V1_1_1_Ethers = class extends GnosisSafeProxyFactoryEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = GnosisSafeProxyFactoryContract_V1_1_1_Ethers;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.3.0/GnosisSafeProxyFactoryContract_V1_3_0_Ethers.js
var require_GnosisSafeProxyFactoryContract_V1_3_0_Ethers = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/GnosisSafeProxyFactory/v1.3.0/GnosisSafeProxyFactoryContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var GnosisSafeProxyFactoryEthersContract_1 = __importDefault(require_GnosisSafeProxyFactoryEthersContract());
    var GnosisSafeProxyFactoryContract_V1_3_0_Ethers = class extends GnosisSafeProxyFactoryEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = GnosisSafeProxyFactoryContract_V1_3_0_Ethers;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSend/MultiSendEthersContract.js
var require_MultiSendEthersContract = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSend/MultiSendEthersContract.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendEthersContract = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      getAddress() {
        return this.contract.address;
      }
    };
    exports.default = MultiSendEthersContract;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSend/v1.1.1/MultiSendContract_V1_1_1_Ethers.js
var require_MultiSendContract_V1_1_1_Ethers = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSend/v1.1.1/MultiSendContract_V1_1_1_Ethers.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendEthersContract_1 = __importDefault(require_MultiSendEthersContract());
    var MultiSendContract_V1_1_1_Ethers = class extends MultiSendEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendContract_V1_1_1_Ethers;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSend/v1.3.0/MultiSendContract_V1_3_0_Ethers.js
var require_MultiSendContract_V1_3_0_Ethers = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSend/v1.3.0/MultiSendContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendEthersContract_1 = __importDefault(require_MultiSendEthersContract());
    var MultiSendContract_V1_3_0_Ethers = class extends MultiSendEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendContract_V1_3_0_Ethers;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSendCallOnly/MultiSendCallOnlyEthersContract.js
var require_MultiSendCallOnlyEthersContract = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSendCallOnly/MultiSendCallOnlyEthersContract.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendCallOnlyEthersContract = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      getAddress() {
        return this.contract.address;
      }
    };
    exports.default = MultiSendCallOnlyEthersContract;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSendCallOnly/v1.3.0/MultiSendCallOnlyContract_V1_3_0_Ethers.js
var require_MultiSendCallOnlyContract_V1_3_0_Ethers = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/MultiSendCallOnly/v1.3.0/MultiSendCallOnlyContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var MultiSendCallOnlyEthersContract_1 = __importDefault(require_MultiSendCallOnlyEthersContract());
    var MultiSendCallOnlyContract_V1_3_0_Ethers = class extends MultiSendCallOnlyEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = MultiSendCallOnlyContract_V1_3_0_Ethers;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/SignMessageLib/SignMessageLibEthersContract.js
var require_SignMessageLibEthersContract = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/SignMessageLib/SignMessageLibEthersContract.js"(exports) {
    "use strict";
    init_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils9();
    var SignMessageLibEthersContract = class {
      constructor(contract) {
        this.contract = contract;
        this.encode = (methodName, params) => {
          return this.contract.interface.encodeFunctionData(methodName, params);
        };
      }
      getAddress() {
        return this.contract.address;
      }
      async signMessage(data, options) {
        if (options && !options.gasLimit) {
          options.gasLimit = await this.estimateGas("signMessage", [data], { ...options });
        }
        const txResponse = await this.contract.signMessage(data, options);
        return (0, utils_1.toTxResult)(txResponse, options);
      }
      async getMessageHash(message) {
        return this.contract.getMessageHash(message);
      }
      async estimateGas(methodName, params, options) {
        return (await this.contract.estimateGas[methodName](...params, options)).toNumber();
      }
    };
    exports.default = SignMessageLibEthersContract;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/SignMessageLib/v1.3.0/SignMessageLibContract_V1_3_0_Ethers.js
var require_SignMessageLibContract_V1_3_0_Ethers = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/SignMessageLib/v1.3.0/SignMessageLibContract_V1_3_0_Ethers.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SignMessageLibEthersContract_1 = __importDefault(require_SignMessageLibEthersContract());
    var SignMessageLibContract_V1_3_0_Ethers = class extends SignMessageLibEthersContract_1.default {
      constructor(contract) {
        super(contract);
        this.contract = contract;
      }
    };
    exports.default = SignMessageLibContract_V1_3_0_Ethers;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/contractInstancesEthers.js
var require_contractInstancesEthers = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/contracts/contractInstancesEthers.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCreateCallContractInstance = exports.getSignMessageLibContractInstance = exports.getSafeProxyFactoryContractInstance = exports.getMultiSendCallOnlyContractInstance = exports.getMultiSendContractInstance = exports.getCompatibilityFallbackHandlerContractInstance = exports.getSafeContractInstance = void 0;
    var Gnosis_safe__factory_1 = require_Gnosis_safe_factory();
    var Proxy_factory__factory_1 = require_Proxy_factory_factory();
    var Gnosis_safe__factory_2 = require_Gnosis_safe_factory2();
    var Multi_send__factory_1 = require_Multi_send_factory();
    var Proxy_factory__factory_2 = require_Proxy_factory_factory2();
    var Gnosis_safe__factory_3 = require_Gnosis_safe_factory3();
    var Compatibility_fallback_handler__factory_1 = require_Compatibility_fallback_handler_factory();
    var Gnosis_safe__factory_4 = require_Gnosis_safe_factory4();
    var Multi_send_call_only__factory_1 = require_Multi_send_call_only_factory();
    var Multi_send__factory_2 = require_Multi_send_factory2();
    var Proxy_factory__factory_3 = require_Proxy_factory_factory3();
    var Sign_message_lib__factory_1 = require_Sign_message_lib_factory();
    var Create_call__factory_1 = require_Create_call_factory();
    var CompatibilityFallbackHandler_V1_3_0_Ethers_1 = __importDefault(require_CompatibilityFallbackHandler_V1_3_0_Ethers());
    var CreateCallEthersContract_V1_3_0_Ethers_1 = __importDefault(require_CreateCallEthersContract_V1_3_0_Ethers());
    var GnosisSafeContract_V1_0_0_Ethers_1 = __importDefault(require_GnosisSafeContract_V1_0_0_Ethers());
    var GnosisSafeContract_V1_1_1_Ethers_1 = __importDefault(require_GnosisSafeContract_V1_1_1_Ethers());
    var GnosisSafeContract_V1_2_0_Ethers_1 = __importDefault(require_GnosisSafeContract_V1_2_0_Ethers());
    var GnosisSafeContract_V1_3_0_Ethers_1 = __importDefault(require_GnosisSafeContract_V1_3_0_Ethers());
    var GnosisSafeProxyFactoryContract_V1_0_0_Ethers_1 = __importDefault(require_GnosisSafeProxyFactoryContract_V1_0_0_Ethers());
    var GnosisSafeProxyFactoryContract_V1_1_1_Ethers_1 = __importDefault(require_GnosisSafeProxyFactoryContract_V1_1_1_Ethers());
    var GnosisSafeProxyFactoryContract_V1_3_0_Ethers_1 = __importDefault(require_GnosisSafeProxyFactoryContract_V1_3_0_Ethers());
    var MultiSendContract_V1_1_1_Ethers_1 = __importDefault(require_MultiSendContract_V1_1_1_Ethers());
    var MultiSendContract_V1_3_0_Ethers_1 = __importDefault(require_MultiSendContract_V1_3_0_Ethers());
    var MultiSendCallOnlyContract_V1_3_0_Ethers_1 = __importDefault(require_MultiSendCallOnlyContract_V1_3_0_Ethers());
    var SignMessageLibContract_V1_3_0_Ethers_1 = __importDefault(require_SignMessageLibContract_V1_3_0_Ethers());
    function getSafeContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let safeContract;
      switch (safeVersion) {
        case "1.3.0":
          safeContract = Gnosis_safe__factory_4.Gnosis_safe__factory.connect(contractAddress, signerOrProvider);
          return new GnosisSafeContract_V1_3_0_Ethers_1.default(safeContract);
        case "1.2.0":
          safeContract = Gnosis_safe__factory_3.Gnosis_safe__factory.connect(contractAddress, signerOrProvider);
          return new GnosisSafeContract_V1_2_0_Ethers_1.default(safeContract);
        case "1.1.1":
          safeContract = Gnosis_safe__factory_2.Gnosis_safe__factory.connect(contractAddress, signerOrProvider);
          return new GnosisSafeContract_V1_1_1_Ethers_1.default(safeContract);
        case "1.0.0":
          safeContract = Gnosis_safe__factory_1.Gnosis_safe__factory.connect(contractAddress, signerOrProvider);
          return new GnosisSafeContract_V1_0_0_Ethers_1.default(safeContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getSafeContractInstance = getSafeContractInstance;
    function getCompatibilityFallbackHandlerContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let compatibilityFallbackHandlerContract;
      switch (safeVersion) {
        case "1.3.0":
        case "1.2.0":
        case "1.1.1":
          compatibilityFallbackHandlerContract = Compatibility_fallback_handler__factory_1.Compatibility_fallback_handler__factory.connect(contractAddress, signerOrProvider);
          return new CompatibilityFallbackHandler_V1_3_0_Ethers_1.default(compatibilityFallbackHandlerContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getCompatibilityFallbackHandlerContractInstance = getCompatibilityFallbackHandlerContractInstance;
    function getMultiSendContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let multiSendContract;
      switch (safeVersion) {
        case "1.3.0":
          multiSendContract = Multi_send__factory_2.Multi_send__factory.connect(contractAddress, signerOrProvider);
          return new MultiSendContract_V1_3_0_Ethers_1.default(multiSendContract);
        case "1.2.0":
        case "1.1.1":
        case "1.0.0":
          multiSendContract = Multi_send__factory_1.Multi_send__factory.connect(contractAddress, signerOrProvider);
          return new MultiSendContract_V1_1_1_Ethers_1.default(multiSendContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getMultiSendContractInstance = getMultiSendContractInstance;
    function getMultiSendCallOnlyContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let multiSendCallOnlyContract;
      switch (safeVersion) {
        case "1.3.0":
        case "1.2.0":
        case "1.1.1":
        case "1.0.0":
          multiSendCallOnlyContract = Multi_send_call_only__factory_1.Multi_send_call_only__factory.connect(contractAddress, signerOrProvider);
          return new MultiSendCallOnlyContract_V1_3_0_Ethers_1.default(multiSendCallOnlyContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getMultiSendCallOnlyContractInstance = getMultiSendCallOnlyContractInstance;
    function getSafeProxyFactoryContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let gnosisSafeProxyFactoryContract;
      switch (safeVersion) {
        case "1.3.0":
          gnosisSafeProxyFactoryContract = Proxy_factory__factory_3.Proxy_factory__factory.connect(contractAddress, signerOrProvider);
          return new GnosisSafeProxyFactoryContract_V1_3_0_Ethers_1.default(gnosisSafeProxyFactoryContract);
        case "1.2.0":
        case "1.1.1":
          gnosisSafeProxyFactoryContract = Proxy_factory__factory_2.Proxy_factory__factory.connect(contractAddress, signerOrProvider);
          return new GnosisSafeProxyFactoryContract_V1_1_1_Ethers_1.default(gnosisSafeProxyFactoryContract);
        case "1.0.0":
          gnosisSafeProxyFactoryContract = Proxy_factory__factory_1.Proxy_factory__factory.connect(contractAddress, signerOrProvider);
          return new GnosisSafeProxyFactoryContract_V1_0_0_Ethers_1.default(gnosisSafeProxyFactoryContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getSafeProxyFactoryContractInstance = getSafeProxyFactoryContractInstance;
    function getSignMessageLibContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let signMessageLibContract;
      switch (safeVersion) {
        case "1.3.0":
          signMessageLibContract = Sign_message_lib__factory_1.Sign_message_lib__factory.connect(contractAddress, signerOrProvider);
          return new SignMessageLibContract_V1_3_0_Ethers_1.default(signMessageLibContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getSignMessageLibContractInstance = getSignMessageLibContractInstance;
    function getCreateCallContractInstance(safeVersion, contractAddress, signerOrProvider) {
      let createCallContract;
      switch (safeVersion) {
        case "1.3.0":
        case "1.2.0":
        case "1.1.1":
        case "1.0.0":
          createCallContract = Create_call__factory_1.Create_call__factory.connect(contractAddress, signerOrProvider);
          return new CreateCallEthersContract_V1_3_0_Ethers_1.default(createCallContract);
        default:
          throw new Error("Invalid Safe version");
      }
    }
    exports.getCreateCallContractInstance = getCreateCallContractInstance;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/EthersAdapter.js
var require_EthersAdapter = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/EthersAdapter.js"(exports) {
    "use strict";
    init_shim();
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _EthersAdapter_ethers;
    var _EthersAdapter_signer;
    var _EthersAdapter_provider;
    Object.defineProperty(exports, "__esModule", { value: true });
    var abstract_signer_1 = (init_lib5(), __toCommonJS(lib_exports5));
    var bignumber_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var safe_core_sdk_utils_1 = require_src6();
    var contractInstancesEthers_1 = require_contractInstancesEthers();
    var utils_1 = require_utils9();
    var EthersAdapter = class {
      constructor({ ethers, signerOrProvider }) {
        _EthersAdapter_ethers.set(this, void 0);
        _EthersAdapter_signer.set(this, void 0);
        _EthersAdapter_provider.set(this, void 0);
        if (!ethers) {
          throw new Error("ethers property missing from options");
        }
        __classPrivateFieldSet(this, _EthersAdapter_ethers, ethers, "f");
        const isSigner = signerOrProvider instanceof abstract_signer_1.Signer;
        if (isSigner) {
          const signer = signerOrProvider;
          if (!signer.provider) {
            throw new Error("Signer must be connected to a provider");
          }
          __classPrivateFieldSet(this, _EthersAdapter_provider, signer.provider, "f");
          __classPrivateFieldSet(this, _EthersAdapter_signer, signer, "f");
        } else {
          __classPrivateFieldSet(this, _EthersAdapter_provider, signerOrProvider, "f");
        }
      }
      getProvider() {
        return __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
      }
      getSigner() {
        return __classPrivateFieldGet(this, _EthersAdapter_signer, "f");
      }
      isAddress(address) {
        return __classPrivateFieldGet(this, _EthersAdapter_ethers, "f").utils.isAddress(address);
      }
      async getEip3770Address(fullAddress) {
        const chainId = await this.getChainId();
        return (0, safe_core_sdk_utils_1.validateEip3770Address)(fullAddress, chainId);
      }
      async getBalance(address, blockTag) {
        return bignumber_1.BigNumber.from(await __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getBalance(address, blockTag));
      }
      async getNonce(address, blockTag) {
        return __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getTransactionCount(address, blockTag);
      }
      async getChainId() {
        return (await __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getNetwork()).chainId;
      }
      getChecksummedAddress(address) {
        return __classPrivateFieldGet(this, _EthersAdapter_ethers, "f").utils.getAddress(address);
      }
      getSafeContract({ safeVersion, chainId, singletonDeployment, customContractAddress }) {
        const contractAddress = customContractAddress ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid SafeProxy contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getSafeContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      getSafeProxyFactoryContract({ safeVersion, chainId, singletonDeployment, customContractAddress }) {
        const contractAddress = customContractAddress ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid SafeProxyFactory contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getSafeProxyFactoryContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      getMultiSendContract({ safeVersion, chainId, singletonDeployment, customContractAddress }) {
        const contractAddress = customContractAddress ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid MultiSend contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getMultiSendContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      getMultiSendCallOnlyContract({ safeVersion, chainId, singletonDeployment, customContractAddress }) {
        const contractAddress = customContractAddress ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid MultiSendCallOnly contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getMultiSendCallOnlyContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      getCompatibilityFallbackHandlerContract({ safeVersion, chainId, singletonDeployment, customContractAddress }) {
        const contractAddress = customContractAddress ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid CompatibilityFallbackHandler contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getCompatibilityFallbackHandlerContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      getSignMessageLibContract({ safeVersion, chainId, singletonDeployment, customContractAddress }) {
        const contractAddress = customContractAddress ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid SignMessageLib contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getSignMessageLibContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      getCreateCallContract({ safeVersion, chainId, singletonDeployment, customContractAddress }) {
        const contractAddress = customContractAddress ? customContractAddress : singletonDeployment === null || singletonDeployment === void 0 ? void 0 : singletonDeployment.networkAddresses[chainId];
        if (!contractAddress) {
          throw new Error("Invalid CreateCall contract address");
        }
        const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
        return (0, contractInstancesEthers_1.getCreateCallContractInstance)(safeVersion, contractAddress, signerOrProvider);
      }
      async getContractCode(address, blockTag) {
        return __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getCode(address, blockTag);
      }
      async isContractDeployed(address, blockTag) {
        const contractCode = await __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getCode(address, blockTag);
        return contractCode !== "0x";
      }
      async getStorageAt(address, position) {
        const content = await __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getStorageAt(address, position);
        const decodedContent = this.decodeParameters(["address"], content);
        return decodedContent[0];
      }
      async getTransaction(transactionHash) {
        return __classPrivateFieldGet(this, _EthersAdapter_provider, "f").getTransaction(transactionHash);
      }
      async getSignerAddress() {
        var _a;
        return (_a = __classPrivateFieldGet(this, _EthersAdapter_signer, "f")) === null || _a === void 0 ? void 0 : _a.getAddress();
      }
      signMessage(message) {
        if (!__classPrivateFieldGet(this, _EthersAdapter_signer, "f")) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        const messageArray = __classPrivateFieldGet(this, _EthersAdapter_ethers, "f").utils.arrayify(message);
        return __classPrivateFieldGet(this, _EthersAdapter_signer, "f").signMessage(messageArray);
      }
      async signTypedData(safeTransactionEIP712Args) {
        if (!__classPrivateFieldGet(this, _EthersAdapter_signer, "f")) {
          throw new Error("EthAdapter must be initialized with a signer to use this method");
        }
        if ((0, utils_1.isTypedDataSigner)(__classPrivateFieldGet(this, _EthersAdapter_signer, "f"))) {
          const typedData = (0, safe_core_sdk_utils_1.generateTypedData)(safeTransactionEIP712Args);
          const signature = await __classPrivateFieldGet(this, _EthersAdapter_signer, "f")._signTypedData(typedData.domain, { SafeTx: typedData.types.SafeTx }, typedData.message);
          return signature;
        }
        throw new Error("The current signer does not implement EIP-712 to sign typed data");
      }
      async estimateGas(transaction) {
        return (await __classPrivateFieldGet(this, _EthersAdapter_provider, "f").estimateGas(transaction)).toNumber();
      }
      call(transaction, blockTag) {
        return __classPrivateFieldGet(this, _EthersAdapter_provider, "f").call(transaction, blockTag);
      }
      encodeParameters(types, values) {
        return new (__classPrivateFieldGet(this, _EthersAdapter_ethers, "f")).utils.AbiCoder().encode(types, values);
      }
      decodeParameters(types, values) {
        return new (__classPrivateFieldGet(this, _EthersAdapter_ethers, "f")).utils.AbiCoder().decode(types, values);
      }
    };
    _EthersAdapter_ethers = /* @__PURE__ */ new WeakMap(), _EthersAdapter_signer = /* @__PURE__ */ new WeakMap(), _EthersAdapter_provider = /* @__PURE__ */ new WeakMap();
    exports.default = EthersAdapter;
  }
});

// node_modules/@safe-global/safe-ethers-lib/dist/src/index.js
var require_src8 = __commonJS({
  "node_modules/@safe-global/safe-ethers-lib/dist/src/index.js"(exports) {
    "use strict";
    init_shim();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var EthersAdapter_1 = __importDefault(require_EthersAdapter());
    exports.default = EthersAdapter_1.default;
  }
});

// node_modules/@thirdweb-dev/wallets/evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.browser.esm.js
init_shim();
init_lib7();
var import_safe_ethers_adapters = __toESM(require_src2());
var import_safe_core_sdk = __toESM(require_src7());
var import_safe_ethers_lib = __toESM(require_src8());
var CHAIN_ID_TO_GNOSIS_SERVER_URL = {
  1: "https://safe-transaction-mainnet.safe.global",
  43114: "https://safe-transaction-avalanche.safe.global",
  137: "https://safe-transaction-polygon.safe.global",
  5: "https://safe-transaction-goerli.safe.global",
  56: "https://safe-transaction-bsc.safe.global",
  10: "https://safe-transaction-optimism.safe.global"
};
var CHAIN_ID_TO_SIGN_MESSAGE_LIB_ADDRESS = {
  1: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  137: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  56: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  42161: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  1313161554: "0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2",
  43114: "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
  10: "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
  84531: "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
  42220: "0x98FFBBF51bb33A056B08ddf711f289936AafF717",
  5: "0x58FCe385Ed16beB4BCE49c8DF34c7d6975807520",
  100: "0x58FCe385Ed16beB4BCE49c8DF34c7d6975807520"
};
var SIGN_MESSAGE_LIB_ABI = [{
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: "bytes32",
    name: "msgHash",
    type: "bytes32"
  }],
  name: "SignMsg",
  type: "event"
}, {
  inputs: [{
    internalType: "bytes",
    name: "message",
    type: "bytes"
  }],
  name: "getMessageHash",
  outputs: [{
    internalType: "bytes32",
    name: "",
    type: "bytes32"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [{
    internalType: "bytes",
    name: "_data",
    type: "bytes"
  }],
  name: "signMessage",
  outputs: [],
  stateMutability: "nonpayable",
  type: "function"
}];
var __IS_SERVER__ = false;
var SafeSupportedChainsSet = new Set(Object.keys(CHAIN_ID_TO_GNOSIS_SERVER_URL).map(Number));
var SafeConnector = class extends Connector {
  constructor() {
    super();
    _defineProperty(this, "supportedChains", SafeConnector.supportedChains);
    _defineProperty(this, "id", "safe-wallet");
    _defineProperty(this, "ready", !__IS_SERVER__);
    _defineProperty(this, "name", "Safe Wallet");
    _defineProperty(this, "previousConnector", void 0);
    _defineProperty(this, "safeSigner", void 0);
    _defineProperty(this, "personalWallet", void 0);
    {
      this.ready = true;
    }
  }
  async connect(args) {
    if (!(args.chain.chainId in CHAIN_ID_TO_GNOSIS_SERVER_URL)) {
      throw new Error("Chain not supported by Safe");
    }
    this.safeSigner = await this.createSafeSigner(args);
    return await this.getAddress();
  }
  async createSafeSigner(params) {
    this.personalWallet = params.personalWallet;
    const signer = await params.personalWallet.getSigner();
    const safeAddress = params.safeAddress;
    const safeChainId = params.chain.chainId;
    if (!signer) {
      throw new Error("cannot create Gnosis Safe signer without a personal signer");
    }
    const signerChainId = await signer.getChainId();
    if (signerChainId !== safeChainId) {
      throw new Error("chainId of personal signer has to match safe chainId");
    }
    if (!safeAddress) {
      throw new Error("safeAddress is required");
    }
    if (!safeChainId) {
      throw new Error("safeChainId is required");
    }
    const serverUrl = CHAIN_ID_TO_GNOSIS_SERVER_URL[safeChainId];
    const signMessageLibAddress = CHAIN_ID_TO_SIGN_MESSAGE_LIB_ADDRESS[safeChainId];
    if (!serverUrl || !signMessageLibAddress) {
      throw new Error("Chain not supported");
    }
    const ethAdapter = new import_safe_ethers_lib.default({
      ethers: ethers_exports,
      signerOrProvider: signer
    });
    const safe = await import_safe_core_sdk.default.create({
      ethAdapter,
      safeAddress
    });
    const service = new import_safe_ethers_adapters.SafeService(serverUrl);
    const safeSigner = new import_safe_ethers_adapters.SafeEthersSigner(safe, service, signer.provider);
    safeSigner.signMessage = async (message) => {
      var _a;
      const contract = new ethers_exports.BaseContract(signMessageLibAddress, SIGN_MESSAGE_LIB_ABI);
      const data = contract.interface.encodeFunctionData("signMessage", [ethers_exports.utils.hashMessage(message)]);
      const to = signMessageLibAddress;
      const value = "0";
      const operation = 1;
      const safeTxGas = 5e4;
      const baseGas = 5e4;
      const gasPrice = 0;
      const gasToken = ethers_exports.constants.AddressZero;
      const refundReceiver = ethers_exports.constants.AddressZero;
      const safeTx = await safe.createTransaction({
        safeTransactionData: {
          to,
          value,
          operation,
          data,
          baseGas,
          safeTxGas,
          gasPrice,
          gasToken,
          refundReceiver
        }
      });
      const safeTxHash = await safe.getTransactionHash(safeTx);
      const safeSignature = await safe.signTransactionHash(safeTxHash);
      await service.proposeTx(safe.getAddress(), safeTxHash, safeTx, safeSignature);
      while (true) {
        try {
          const txDetails = await service.getSafeTxDetails(safeTxHash);
          if (txDetails.transactionHash) {
            await ((_a = signer.provider) == null ? void 0 : _a.waitForTransaction(txDetails.transactionHash));
            break;
          }
        } catch (e) {
        }
        await new Promise((resolve) => setTimeout(resolve, 5e3));
      }
      return "0x";
    };
    this.previousConnector = params.personalWallet;
    return safeSigner;
  }
  async disconnect() {
    this.safeSigner = void 0;
    this.previousConnector = void 0;
    return void 0;
  }
  async getAddress() {
    const signer = await this.getSigner();
    return await signer.getAddress();
  }
  async getChainId() {
    return (await this.getSigner()).getChainId();
  }
  async getProvider() {
    const provider = (await this.getSigner()).provider;
    if (!provider) {
      throw new Error("No provider available");
    }
    return provider;
  }
  async getSigner() {
    if (!this.safeSigner) {
      throw new Error("not connected - please call connect() first");
    }
    return this.safeSigner;
  }
  async isConnected() {
    try {
      const account = await this.getAddress();
      return !!account;
    } catch (e) {
      return false;
    }
  }
  onAccountsChanged(accounts) {
    if (accounts.length === 0) {
      this.emit("disconnect");
    } else {
      this.emit("change", {
        account: ethers_exports.utils.getAddress(accounts[0])
      });
    }
  }
  onDisconnect() {
    this.emit("disconnect");
  }
  switchChain() {
    throw new Error("Safe connector does not support switching chains");
  }
  updateChains() {
  }
  async setupListeners() {
  }
};
_defineProperty(SafeConnector, "supportedChains", Object.keys(CHAIN_ID_TO_GNOSIS_SERVER_URL));

export {
  require_src2 as require_src,
  require_src7 as require_src2,
  require_src8 as require_src3,
  SafeSupportedChainsSet,
  SafeConnector
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/*! https://mths.be/utf8js v3.0.0 by @mathias */
//# sourceMappingURL=chunk-RM25UG3Z.js.map
