{
  "version": 3,
  "sources": ["../../@thirdweb-dev/react/dist/magicLink-de5fe521.browser.esm.js"],
  "sourcesContent": ["import { MagicLink } from '@thirdweb-dev/wallets';\nimport { useConnect } from '@thirdweb-dev/react-core';\nimport { useRef, useEffect } from 'react';\nimport { a as Flex, b as Spinner } from './basic-72632cb3.browser.esm.js';\nimport { I as InputSelectionUI } from './InputSelectionUI-df66b9d3.browser.esm.js';\nimport { jsx } from 'react/jsx-runtime';\nimport '@emotion/react';\nimport '@emotion/styled';\nimport '@radix-ui/colors';\nimport '@radix-ui/react-icons';\n\nfunction magicLink(config) {\n  return {\n    id: MagicLink.id,\n    meta: MagicLink.meta,\n    create: options => new MagicLink({\n      ...options,\n      ...config\n    }),\n    connectUI: MagicConnectionUI,\n    selectUI(props) {\n      return /*#__PURE__*/jsx(MagicSelectionUI, {\n        ...props,\n        emailLogin: config.emailLogin !== false,\n        smsLogin: config.smsLogin !== false\n      });\n    },\n    isInstalled() {\n      return false;\n    }\n  };\n}\nconst MagicSelectionUI = props => {\n  const isEmailEnabled = props.emailLogin !== false;\n  const isSMSEnabled = props.smsLogin !== false;\n  let placeholder = \"Enter your email or phone number\";\n  let type = \"text\";\n  let emptyErrorMessage = \"email or phone number is required\";\n  if (isEmailEnabled && !isSMSEnabled) {\n    placeholder = \"Enter your email address\";\n    emptyErrorMessage = \"email address is required\";\n    type = \"email\";\n  } else if (!isEmailEnabled && isSMSEnabled) {\n    placeholder = \"Enter your phone number\";\n    emptyErrorMessage = \"phone number is required\";\n    type = \"tel\";\n  }\n  if (!isEmailEnabled && !isSMSEnabled) {\n    throw new Error('MagicLink must have either \"emailLogin\" or \"smsLogin\" enabled');\n  }\n  return /*#__PURE__*/jsx(InputSelectionUI, {\n    onSelect: props.onSelect,\n    placeholder: placeholder,\n    name: \"magic-input\",\n    type: type,\n    emptyErrorMessage: emptyErrorMessage,\n    errorMessage: input => {\n      const isEmail = input.includes(\"@\");\n      const isPhone = Number.isInteger(Number(input[input.length - 1]));\n      if (isEmail && isEmailEnabled) {\n        const emailRegex = /^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,})$/g;\n        const isValidEmail = emailRegex.test(input);\n        if (!isValidEmail) {\n          return \"Invalid email address\";\n        }\n      } else if (isPhone && isSMSEnabled) {\n        if (!input.startsWith(\"+\")) {\n          return \"Phone number must start with a country code\";\n        }\n      } else {\n        if (isEmailEnabled && isSMSEnabled) {\n          return \"Invalid email address or phone number\";\n        }\n        if (isEmailEnabled) {\n          return \"Invalid email address\";\n        }\n        if (isSMSEnabled) {\n          return \"Invalid phone number\";\n        }\n      }\n    },\n    supportedWallets: props.supportedWallets\n  });\n};\nconst MagicConnectionUI = _ref => {\n  let {\n    close,\n    walletConfig,\n    open,\n    selectionData,\n    supportedWallets\n  } = _ref;\n  const connectPrompted = useRef(false);\n  const singleWallet = supportedWallets.length === 1;\n  const connect = useConnect();\n  useEffect(() => {\n    if (connectPrompted.current) {\n      return;\n    }\n    connectPrompted.current = true;\n    const isEmail = selectionData.includes(\"@\");\n    (async () => {\n      close();\n      try {\n        await connect(walletConfig, isEmail ? {\n          email: selectionData\n        } : {\n          phoneNumber: selectionData\n        });\n      } catch (e) {\n        if (!singleWallet) {\n          open();\n        }\n        console.error(e);\n      }\n    })();\n  }, [connect, selectionData, walletConfig, close, open, singleWallet]);\n  return /*#__PURE__*/jsx(Flex, {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    style: {\n      minHeight: \"250px\"\n    },\n    children: /*#__PURE__*/jsx(Spinner, {\n      size: \"md\",\n      color: \"primary\"\n    })\n  });\n};\n\nexport { magicLink };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA,mBAAkC;AAGlC,yBAAoB;AAMpB,SAAS,UAAU,QAAQ;AACzB,SAAO;AAAA,IACL,IAAI,UAAU;AAAA,IACd,MAAM,UAAU;AAAA,IAChB,QAAQ,aAAW,IAAI,UAAU;AAAA,MAC/B,GAAG;AAAA,MACH,GAAG;AAAA,IACL,CAAC;AAAA,IACD,WAAW;AAAA,IACX,SAAS,OAAO;AACd,iBAAoB,wBAAI,kBAAkB;AAAA,QACxC,GAAG;AAAA,QACH,YAAY,OAAO,eAAe;AAAA,QAClC,UAAU,OAAO,aAAa;AAAA,MAChC,CAAC;AAAA,IACH;AAAA,IACA,cAAc;AACZ,aAAO;AAAA,IACT;AAAA,EACF;AACF;AACA,IAAM,mBAAmB,WAAS;AAChC,QAAM,iBAAiB,MAAM,eAAe;AAC5C,QAAM,eAAe,MAAM,aAAa;AACxC,MAAI,cAAc;AAClB,MAAI,OAAO;AACX,MAAI,oBAAoB;AACxB,MAAI,kBAAkB,CAAC,cAAc;AACnC,kBAAc;AACd,wBAAoB;AACpB,WAAO;AAAA,EACT,WAAW,CAAC,kBAAkB,cAAc;AAC1C,kBAAc;AACd,wBAAoB;AACpB,WAAO;AAAA,EACT;AACA,MAAI,CAAC,kBAAkB,CAAC,cAAc;AACpC,UAAM,IAAI,MAAM,+DAA+D;AAAA,EACjF;AACA,aAAoB,wBAAI,kBAAkB;AAAA,IACxC,UAAU,MAAM;AAAA,IAChB;AAAA,IACA,MAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA,cAAc,WAAS;AACrB,YAAM,UAAU,MAAM,SAAS,GAAG;AAClC,YAAM,UAAU,OAAO,UAAU,OAAO,MAAM,MAAM,SAAS,EAAE,CAAC;AAChE,UAAI,WAAW,gBAAgB;AAC7B,cAAM,aAAa;AACnB,cAAM,eAAe,WAAW,KAAK,KAAK;AAC1C,YAAI,CAAC,cAAc;AACjB,iBAAO;AAAA,QACT;AAAA,MACF,WAAW,WAAW,cAAc;AAClC,YAAI,CAAC,MAAM,WAAW,GAAG,GAAG;AAC1B,iBAAO;AAAA,QACT;AAAA,MACF,OAAO;AACL,YAAI,kBAAkB,cAAc;AAClC,iBAAO;AAAA,QACT;AACA,YAAI,gBAAgB;AAClB,iBAAO;AAAA,QACT;AACA,YAAI,cAAc;AAChB,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAAA,IACA,kBAAkB,MAAM;AAAA,EAC1B,CAAC;AACH;AACA,IAAM,oBAAoB,UAAQ;AAChC,MAAI;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AACJ,QAAM,sBAAkB,qBAAO,KAAK;AACpC,QAAM,eAAe,iBAAiB,WAAW;AACjD,QAAM,UAAU,WAAW;AAC3B,8BAAU,MAAM;AACd,QAAI,gBAAgB,SAAS;AAC3B;AAAA,IACF;AACA,oBAAgB,UAAU;AAC1B,UAAM,UAAU,cAAc,SAAS,GAAG;AAC1C,KAAC,YAAY;AACX,YAAM;AACN,UAAI;AACF,cAAM,QAAQ,cAAc,UAAU;AAAA,UACpC,OAAO;AAAA,QACT,IAAI;AAAA,UACF,aAAa;AAAA,QACf,CAAC;AAAA,MACH,SAAS,GAAP;AACA,YAAI,CAAC,cAAc;AACjB,eAAK;AAAA,QACP;AACA,gBAAQ,MAAM,CAAC;AAAA,MACjB;AAAA,IACF,GAAG;AAAA,EACL,GAAG,CAAC,SAAS,eAAe,cAAc,OAAO,MAAM,YAAY,CAAC;AACpE,aAAoB,wBAAI,MAAM;AAAA,IAC5B,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,OAAO;AAAA,MACL,WAAW;AAAA,IACb;AAAA,IACA,cAAuB,wBAAI,SAAS;AAAA,MAClC,MAAM;AAAA,MACN,OAAO;AAAA,IACT,CAAC;AAAA,EACH,CAAC;AACH;",
  "names": []
}
