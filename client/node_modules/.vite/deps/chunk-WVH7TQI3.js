import {
  Signer,
  defineReadOnly,
  getDefaultProvider,
  init_lib13 as init_lib2,
  init_lib20 as init_lib3,
  init_lib4 as init_lib
} from "./chunk-RGAYGF33.js";
import {
  init_shim
} from "./chunk-ZGMFR26H.js";

// node_modules/@paperxyz/embedded-wallet-service-sdk/dist/index.mjs
init_shim();

// node_modules/@paperxyz/sdk-common-utilities/dist/index.mjs
init_shim();
var o = { Ethereum: "https://rpc.ankr.com/eth", Goerli: "https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161", Mumbai: "https://rpc-mumbai.maticvigil.com", Polygon: "https://rpc-mainnet.maticvigil.com", Avalanche: "https://api.avax.network/ext/bc/C/rpc", Optimism: "https://optimism.rpc.thirdweb.com", OptimismGoerli: "https://optimism-goerli.rpc.thirdweb.com", BSC: "https://binance.rpc.thirdweb.com", BSCTestnet: "https://binance-testnet.rpc.thirdweb.com", ArbitrumOne: "https://arbitrum.rpc.thirdweb.com", ArbitrumGoerli: "https://arbitrum-goerli.rpc.thirdweb.com", Fantom: "https://fantom.rpc.thirdweb.com", FantomTestnet: "https://fantom-testnet.rpc.thirdweb.com" };
var e = () => typeof window != "undefined" && window.localStorage.getItem("IS_PAPER_DEV") === "true";
var r = () => typeof window != "undefined" && window.location.origin.includes("paper.xyz");
var i = () => {
  var t;
  return e() ? (t = window.localStorage.getItem("PAPER_DEV_URL")) != null ? t : "http://localhost:3000" : r() ? window.location.origin : "https://withpaper.com";
};

// node_modules/@paperxyz/embedded-wallet-service-sdk/dist/index.mjs
init_lib3();
init_lib2();
init_lib();
var V = Object.defineProperty;
var z = Object.defineProperties;
var q = Object.getOwnPropertyDescriptors;
var x = Object.getOwnPropertySymbols;
var Z = Object.prototype.hasOwnProperty;
var $ = Object.prototype.propertyIsEnumerable;
var k = (s, e2, t) => e2 in s ? V(s, e2, { enumerable: true, configurable: true, writable: true, value: t }) : s[e2] = t;
var c = (s, e2) => {
  for (var t in e2 || (e2 = {}))
    Z.call(e2, t) && k(s, t, e2[t]);
  if (x)
    for (var t of x(e2))
      $.call(e2, t) && k(s, t, e2[t]);
  return s;
};
var W = (s, e2) => z(s, q(e2));
var r2 = (s, e2, t) => new Promise((i2, a) => {
  var o2 = (l) => {
    try {
      p(t.next(l));
    } catch (d) {
      a(d);
    }
  }, n = (l) => {
    try {
      p(t.throw(l));
    } catch (d) {
      a(d);
    }
  }, p = (l) => l.done ? i2(l.value) : Promise.resolve(l.value).then(o2, n);
  p((t = t.apply(s, e2)).next());
});
var E = "/sdk/2022-08-12/embedded-wallet";
var A = (s) => `paperEwsWalletUserId-${s}`;
var B = "walletToken";
var T = (s) => `${B}-${s}`;
var Q = "a";
var I = (s, e2) => `${Q}-${s}-${e2}`;
var J = (s) => `${Q}-${s}`;
var f = ((t) => (t.USER_MANAGED = "USER_MANAGED", t.AWS_MANAGED = "AWS_MANAGED", t))(f || {});
var K = ((n) => (n.PAPER_EMAIL_OTP = "PaperEmailOTP", n.GOOGLE = "Google", n.TWITTER = "Twitter", n.COGNITO = "Cognito", n.AUTH0 = "Auth0", n.CUSTOM_JWT = "CustomJWT", n))(K || {});
var F = ((t) => (t.LOGGED_OUT = "Logged Out", t.LOGGED_IN_WALLET_INITIALIZED = "Logged In, Wallet Initialized", t))(F || {});
var P = ((a) => (a.LOGGED_OUT = "Logged Out", a.LOGGED_IN_WALLET_UNINITIALIZED = "Logged In, Wallet Uninitialized", a.LOGGED_IN_NEW_DEVICE = "Logged In, New Device", a.LOGGED_IN_WALLET_INITIALIZED = "Logged In, Wallet Initialized", a))(P || {});
var H = /* @__PURE__ */ new Map();
var u = class {
  constructor({ clientId: e2 }) {
    this.isSupported = typeof window != "undefined" && !!window.localStorage, this.clientId = e2;
  }
  getItem(e2) {
    return r2(this, null, function* () {
      var t;
      return this.isSupported ? window.localStorage.getItem(e2) : (t = H.get(e2)) != null ? t : null;
    });
  }
  setItem(e2, t) {
    return r2(this, null, function* () {
      if (this.isSupported)
        return window.localStorage.setItem(e2, t);
      H.set(e2, t);
    });
  }
  removeItem(e2) {
    return r2(this, null, function* () {
      let t = yield this.getItem(e2);
      return this.isSupported && t ? (window.localStorage.removeItem(e2), true) : false;
    });
  }
  saveAuthCookie(e2) {
    return r2(this, null, function* () {
      yield this.setItem(T(this.clientId), e2);
    });
  }
  getAuthCookie() {
    return r2(this, null, function* () {
      return this.getItem(T(this.clientId));
    });
  }
  removeAuthCookie() {
    return r2(this, null, function* () {
      return this.removeItem(T(this.clientId));
    });
  }
  saveDeviceShare(e2, t) {
    return r2(this, null, function* () {
      yield this.saveWalletUserId(t), yield this.setItem(I(this.clientId, t), e2);
    });
  }
  getDeviceShare() {
    return r2(this, null, function* () {
      let e2 = yield this.getWalletUserId();
      return e2 ? this.getItem(I(this.clientId, e2)) : null;
    });
  }
  removeDeviceShare() {
    return r2(this, null, function* () {
      let e2 = yield this.getWalletUserId();
      return e2 ? this.removeItem(I(this.clientId, e2)) : false;
    });
  }
  getWalletUserId() {
    return r2(this, null, function* () {
      return this.getItem(A(this.clientId));
    });
  }
  saveWalletUserId(e2) {
    return r2(this, null, function* () {
      yield this.setItem(A(this.clientId), e2);
    });
  }
  removeWalletUserId() {
    return r2(this, null, function* () {
      return this.removeItem(A(this.clientId));
    });
  }
};
function _(s) {
  return new Promise((e2) => {
    setTimeout(e2, s * 1e3);
  });
}
var X = { height: "100%", width: "100%", border: "none", backgroundColor: "transparent", colorScheme: "light", position: "fixed", top: "0px", right: "0px", zIndex: "2147483646", display: "none" };
var N = /* @__PURE__ */ new Map();
var v = class {
  constructor({ link: e2, iframeId: t, container: i2 = document.body, iframeStyles: a, onIframeInitialize: o2 }) {
    this.POLLING_INTERVAL_SECONDS = 1.4;
    this.POST_LOAD_BUFFER_SECONDS = 1;
    let n = document.getElementById(t), p = new URL(e2), l = "1.1.0";
    if (!l)
      throw new Error("Missing SDK_VERSION env var");
    if (p.searchParams.set("sdkVersion", l), !n || n.src != p.href) {
      if (!n) {
        n = document.createElement("iframe");
        let d = c(c({}, X), a);
        Object.assign(n.style, d), n.setAttribute("id", t), n.setAttribute("fetchpriority", "high"), i2.appendChild(n);
      }
      n.src = p.href, n.setAttribute("data-version", l), n.onload = this.onIframeLoadHandler(n, this.POST_LOAD_BUFFER_SECONDS, o2);
    }
    this.iframe = n;
  }
  onIframeLoadedInitVariables() {
    return r2(this, null, function* () {
      return {};
    });
  }
  onIframeLoadHandler(e2, t, i2) {
    return () => r2(this, null, function* () {
      yield new Promise((o2, n) => r2(this, null, function* () {
        var d;
        let p = new MessageChannel();
        p.port1.onmessage = (R) => {
          let { data: g } = R;
          return p.port1.close(), g.success ? (N.set(e2.src, true), i2 && i2(), o2(true)) : n(new Error(g.error));
        }, yield _(t);
        let l = "initIframe";
        (d = e2 == null ? void 0 : e2.contentWindow) == null || d.postMessage({ eventType: l, data: yield this.onIframeLoadedInitVariables() }, `${i()}${E}`, [p.port2]);
      }));
    });
  }
  call(o2) {
    return r2(this, arguments, function* ({ procedureName: e2, params: t, showIframe: i2 = false, injectRecoveryCode: a = { isInjectRecoveryCode: false } }) {
      for (; !N.get(this.iframe.src); )
        yield _(this.POLLING_INTERVAL_SECONDS);
      return i2 && (this.iframe.style.display = "block", yield _(5e-3)), new Promise((p, l) => {
        var R;
        if (a.isInjectRecoveryCode) {
          let g = (m) => r2(this, null, function* () {
            var U, G;
            if (m.origin !== i() || m.data.type !== "paper_getRecoveryCode" || typeof m.data.userWalletId != "string")
              return;
            let j = yield (U = a.getRecoveryCode) == null ? void 0 : U.call(a, m.data.userWalletId);
            (G = this.iframe.contentWindow) == null || G.postMessage({ type: "paper_getRecoveryCode_response", recoveryCode: j }, i()), window.removeEventListener("message", g);
          });
          window.addEventListener("message", g);
        }
        let d = new MessageChannel();
        d.port1.onmessage = (g) => r2(this, null, function* () {
          let { data: m } = g;
          d.port1.close(), i2 && (yield _(0.1), this.iframe.style.display = "none"), m.success ? p(m.data) : l(new Error(m.error));
        }), (R = this.iframe.contentWindow) == null || R.postMessage({ eventType: e2, data: t }, `${i()}${E}`, [d.port2]);
      });
    });
  }
  destroy() {
    N.delete(this.iframe.src);
  }
};
var C = class extends v {
  constructor({ clientId: t, customizationOptions: i2 }) {
    super({ iframeId: te, link: ee({ clientId: t, path: E, queryParams: i2 }).href, container: document.body });
    this.clientId = t;
  }
  onIframeLoadedInitVariables() {
    return r2(this, null, function* () {
      let t = new u({ clientId: this.clientId });
      return { authCookie: yield t.getAuthCookie(), deviceShareStored: yield t.getDeviceShare(), walletUserId: yield t.getWalletUserId(), clientId: this.clientId };
    });
  }
};
function ee({ clientId: s, path: e2, queryParams: t }) {
  var a;
  let i2 = new URL(e2, i());
  if (t)
    for (let o2 of Object.keys(t))
      i2.searchParams.set(o2, ((a = t[o2]) == null ? void 0 : a.toString()) || "");
  return i2.searchParams.set("clientId", s), i2;
}
var te = "paper-embedded-wallet-iframe";
var h = class {
  constructor({ querier: e2, preLogin: t, postLogin: i2 }) {
    this.LoginQuerier = e2, this.preLogin = t, this.postLogin = i2;
  }
  sendPaperEmailLoginOtp(i2) {
    return r2(this, arguments, function* ({ email: e2, recoveryShareManagement: t }) {
      yield this.preLogin();
      let { isNewUser: a, isNewDevice: o2 } = yield this.LoginQuerier.call({ procedureName: "sendPaperEmailLoginOtp", params: { email: e2, recoveryShareManagement: t } });
      return { isNewUser: a, isNewDevice: o2 };
    });
  }
};
var D = class extends h {
  loginWithPaperModal() {
    return r2(this, null, function* () {
      yield this.preLogin();
      let e2 = yield this.LoginQuerier.call({ procedureName: "loginWithPaperModal", params: { recoveryShareManagement: "AWS_MANAGED" }, showIframe: true, injectRecoveryCode: { isInjectRecoveryCode: true } });
      return this.postLogin(e2);
    });
  }
  loginWithPaperEmailOtp(t) {
    return r2(this, arguments, function* ({ email: e2 }) {
      yield this.preLogin();
      let i2 = yield this.LoginQuerier.call({ procedureName: "loginWithPaperModal", params: { email: e2, recoveryShareManagement: "AWS_MANAGED" }, showIframe: true, injectRecoveryCode: { isInjectRecoveryCode: true } });
      return this.postLogin(i2);
    });
  }
  verifyPaperEmailLoginOtp(i2) {
    return r2(this, arguments, function* ({ email: e2, otp: t }) {
      let a = yield this.LoginQuerier.call({ procedureName: "verifyPaperEmailLoginOtp", params: { email: e2, otp: t, recoveryShareManagement: "AWS_MANAGED" }, injectRecoveryCode: { isInjectRecoveryCode: true } });
      return this.postLogin(a);
    });
  }
};
var w = class extends h {
  loginWithPaperModal(e2) {
    return r2(this, null, function* () {
      yield this.preLogin();
      let t = yield this.LoginQuerier.call({ procedureName: "loginWithPaperModal", params: void 0, showIframe: true, injectRecoveryCode: { isInjectRecoveryCode: true, getRecoveryCode: e2 == null ? void 0 : e2.getRecoveryCode } });
      return this.postLogin(t);
    });
  }
  loginWithPaperEmailOtp(i2) {
    return r2(this, arguments, function* ({ email: e2, recoveryCode: t }) {
      yield this.preLogin();
      let a = yield this.LoginQuerier.call({ procedureName: "loginWithPaperModal", params: { email: e2, recoveryCode: t }, showIframe: true, injectRecoveryCode: { isInjectRecoveryCode: true } });
      return this.postLogin(a);
    });
  }
  verifyPaperEmailLoginOtp(a) {
    return r2(this, arguments, function* ({ email: e2, otp: t, recoveryCode: i2 }) {
      let o2 = yield this.LoginQuerier.call({ procedureName: "verifyPaperEmailLoginOtp", params: { email: e2, otp: t, recoveryCode: i2 }, injectRecoveryCode: { isInjectRecoveryCode: true } });
      return this.postLogin(o2);
    });
  }
};
var O = class {
  constructor({ clientId: e2, advancedOptions: t, querier: i2, onAuthSuccess: a }) {
    var o2;
    this.clientId = e2, this.advancedOptions = { recoveryShareManagement: (o2 = t == null ? void 0 : t.recoveryShareManagement) != null ? o2 : "AWS_MANAGED" }, this.AuthQuerier = i2, this.localStorage = new u({ clientId: e2 }), this.onAuthSuccess = a, this.userManagedLogin = new w({ postLogin: (n) => r2(this, null, function* () {
      return this.postLogin(n);
    }), preLogin: () => r2(this, null, function* () {
      yield this.preLogin();
    }), querier: i2 }), this.awsManagedLogin = new D({ postLogin: (n) => r2(this, null, function* () {
      return this.postLogin(n);
    }), preLogin: () => r2(this, null, function* () {
      yield this.preLogin();
    }), querier: i2 });
  }
  preLogin() {
    return r2(this, null, function* () {
      yield this.logout();
    });
  }
  postLogin(i2) {
    return r2(this, arguments, function* ({ storedToken: e2, walletDetails: t }) {
      return e2.shouldStoreCookieString && (yield this.localStorage.saveAuthCookie(e2.cookieString)), yield this.onAuthSuccess({ storedToken: e2, walletDetails: t });
    });
  }
  loginWithJwtAuth(a) {
    return r2(this, arguments, function* ({ token: e2, authProvider: t, recoveryCode: i2 }) {
      yield this.preLogin();
      let o2 = yield this.AuthQuerier.call({ procedureName: "loginWithJwtAuthCallback", params: { token: e2, authProvider: t, recoveryCode: i2 } });
      return this.postLogin(o2);
    });
  }
  loginWithPaperModal(e2) {
    return r2(this, null, function* () {
      return yield this.preLogin(), this.advancedOptions.recoveryShareManagement === "AWS_MANAGED" ? this.awsManagedLogin.loginWithPaperModal() : this.userManagedLogin.loginWithPaperModal(e2);
    });
  }
  loginWithPaperEmailOtp(e2) {
    return r2(this, null, function* () {
      return this.advancedOptions.recoveryShareManagement === "AWS_MANAGED" ? this.awsManagedLogin.loginWithPaperEmailOtp({ email: e2.email }) : this.userManagedLogin.loginWithPaperEmailOtp(e2);
    });
  }
  sendPaperEmailLoginOtp(t) {
    return r2(this, arguments, function* ({ email: e2 }) {
      return this.advancedOptions.recoveryShareManagement === "AWS_MANAGED" ? this.awsManagedLogin.sendPaperEmailLoginOtp({ email: e2, recoveryShareManagement: "AWS_MANAGED" }) : this.userManagedLogin.sendPaperEmailLoginOtp({ email: e2 });
    });
  }
  verifyPaperEmailLoginOtp(e2) {
    return r2(this, null, function* () {
      return this.advancedOptions.recoveryShareManagement === "AWS_MANAGED" ? this.awsManagedLogin.verifyPaperEmailLoginOtp(e2) : this.userManagedLogin.verifyPaperEmailLoginOtp(e2);
    });
  }
  logout() {
    return r2(this, null, function* () {
      let { success: e2 } = yield this.AuthQuerier.call({ procedureName: "logout", params: void 0 }), t = yield this.localStorage.removeAuthCookie(), i2 = yield this.localStorage.removeWalletUserId();
      return { success: e2 || t || i2 };
    });
  }
};
var L = class {
  constructor({ chain: e2, clientId: t, querier: i2 }) {
    this.chain = e2, this.clientId = t, this.gaslessTransactionQuerier = i2;
  }
  callContract(a) {
    return r2(this, arguments, function* ({ contractAddress: e2, methodArgs: t, methodInterface: i2 }) {
      return yield this.gaslessTransactionQuerier.call({ procedureName: "callContract", params: { chain: this.chain, contractAddress: e2, method: { args: t, stub: i2 } } });
    });
  }
};
var y = class extends Signer {
  constructor({ provider: t, clientId: i2, querier: a }) {
    var o2;
    super();
    this.DEFAULT_ETHEREUM_CHAIN_ID = 5;
    this.clientId = i2, this.querier = a, this.endpoint = (o2 = t.connection) == null ? void 0 : o2.url, defineReadOnly(this, "provider", t);
  }
  getAddress() {
    return r2(this, null, function* () {
      let { address: t } = yield this.querier.call({ procedureName: "getAddress", params: void 0 });
      return t;
    });
  }
  signMessage(t) {
    return r2(this, null, function* () {
      var o2, n, p, l;
      let i2 = yield (o2 = this.provider) == null ? void 0 : o2.getNetwork();
      i2 && i2._defaultProvider;
      let { signedMessage: a } = yield this.querier.call({ procedureName: "signMessage", params: { message: t, chainId: (l = (p = yield (n = this.provider) == null ? void 0 : n.getNetwork()) == null ? void 0 : p.chainId) != null ? l : this.DEFAULT_ETHEREUM_CHAIN_ID, rpcEndpoint: this.endpoint } });
      return a;
    });
  }
  signTransaction(t) {
    return r2(this, null, function* () {
      var a, o2, n;
      let { signedTransaction: i2 } = yield this.querier.call({ procedureName: "signTransaction", params: { transaction: t, chainId: (n = (o2 = yield (a = this.provider) == null ? void 0 : a.getNetwork()) == null ? void 0 : o2.chainId) != null ? n : this.DEFAULT_ETHEREUM_CHAIN_ID, rpcEndpoint: this.endpoint } });
      return i2;
    });
  }
  _signTypedData(t, i2, a) {
    return r2(this, null, function* () {
      var n, p, l;
      let { signedTypedData: o2 } = yield this.querier.call({ procedureName: "signTypedDataV4", params: { domain: t, types: i2, message: a, chainId: (l = (p = yield (n = this.provider) == null ? void 0 : n.getNetwork()) == null ? void 0 : p.chainId) != null ? l : this.DEFAULT_ETHEREUM_CHAIN_ID, rpcEndpoint: this.endpoint } });
      return o2;
    });
  }
  connect(t) {
    return new y({ clientId: this.clientId, provider: t, querier: this.querier });
  }
};
var M = class {
  constructor({ clientId: e2, chain: t, querier: i2 }) {
    this.clientId = e2, this.chain = t, this.walletManagerQuerier = i2, this.gasless = new L({ chain: t, clientId: e2, querier: i2 }), this.localStorage = new u({ clientId: e2 });
  }
  postWalletSetUp(o2) {
    return r2(this, arguments, function* ({ deviceShareStored: e2, walletAddress: t, isIframeStorageEnabled: i2, walletUserId: a }) {
      return i2 || (yield this.localStorage.saveDeviceShare(e2, a)), { walletAddress: t };
    });
  }
  getUserWalletStatus() {
    return r2(this, null, function* () {
      let e2 = yield this.walletManagerQuerier.call({ procedureName: "getUserStatus", params: void 0 });
      return e2.status === "Logged In, Wallet Initialized" ? { status: "Logged In, Wallet Initialized", user: W(c({}, e2.user), { wallet: this }) } : e2;
    });
  }
  setChain(t) {
    return r2(this, arguments, function* ({ chain: e2 }) {
      this.chain = e2, this.gasless = new L({ chain: e2, clientId: this.clientId, querier: this.walletManagerQuerier });
    });
  }
  getEthersJsSigner(e2) {
    return r2(this, null, function* () {
      var i2;
      return new y({ clientId: this.clientId, provider: getDefaultProvider((i2 = e2 == null ? void 0 : e2.rpcEndpoint) != null ? i2 : o[this.chain]), querier: this.walletManagerQuerier });
    });
  }
};
var b = class {
  constructor({ clientId: e2, chain: t, styles: i2, advancedOptions: a }) {
    this.clientId = e2, this.querier = new C({ clientId: e2, customizationOptions: i2 }), this.wallet = new M({ clientId: e2, chain: t, querier: this.querier }), this.auth = new O({ clientId: e2, advancedOptions: c({ recoveryShareManagement: "USER_MANAGED" }, a != null ? a : {}), querier: this.querier, onAuthSuccess: (o2) => r2(this, null, function* () {
      return yield this.wallet.postWalletSetUp(W(c({}, o2.walletDetails), { walletUserId: o2.storedToken.authDetails.userWalletId })), { user: { status: "Logged In, Wallet Initialized", authDetails: o2.storedToken.authDetails, wallet: this.wallet, walletAddress: o2.walletDetails.walletAddress } };
    }) });
  }
  getUser() {
    return r2(this, null, function* () {
      let e2 = yield this.wallet.getUserWalletStatus();
      switch (e2.status) {
        case "Logged In, New Device":
        case "Logged In, Wallet Uninitialized":
          return yield this.auth.logout(), this.getUser();
        case "Logged Out":
          return { status: "Logged Out" };
        case "Logged In, Wallet Initialized":
          return c({ status: "Logged In, Wallet Initialized" }, e2.user);
      }
    });
  }
};

export {
  A,
  T,
  I,
  J,
  f,
  K,
  F,
  P,
  b
};
//# sourceMappingURL=chunk-WVH7TQI3.js.map
