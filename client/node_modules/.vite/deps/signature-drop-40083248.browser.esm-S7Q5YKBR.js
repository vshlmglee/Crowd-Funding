import {
  StandardErc721
} from "./chunk-BUTP5E4N.js";
import {
  PaperCheckout
} from "./chunk-YJBHRKKK.js";
import {
  AbiSchema,
  ContractAppURI,
  ContractEncoder,
  ContractEvents,
  ContractInterceptor,
  ContractMetadata,
  ContractOwner,
  ContractPlatformFee,
  ContractPrimarySale,
  ContractRoles,
  ContractRoyalty,
  ContractWrapper,
  DEFAULT_QUERY_ALL_COUNT,
  DelayedReveal,
  DropClaimConditions,
  DropErc721ContractSchema,
  Erc721WithQuantitySignatureMintable,
  FEATURE_NFT_REVEALABLE,
  GasCostEstimator,
  Transaction,
  _defineProperty,
  buildTransactionFunction,
  getRoleHash,
  require_bs58,
  require_dist,
  require_fast_deep_equal
} from "./chunk-6GQJFAXU.js";
import "./chunk-XUXNDKXO.js";
import {
  require_browser_ponyfill
} from "./chunk-KSBPR6CT.js";
import {
  require_utils
} from "./chunk-XQLXTUOU.js";
import "./chunk-MF32MPNC.js";
import "./chunk-24M2PVBU.js";
import {
  init_lib7 as init_lib
} from "./chunk-T4GQYX7O.js";
import {
  BigNumber,
  lib_exports8 as lib_exports
} from "./chunk-RGAYGF33.js";
import "./chunk-XLOOGUEN.js";
import {
  require_bn
} from "./chunk-2O4376VB.js";
import "./chunk-MLWVUS32.js";
import {
  init_shim
} from "./chunk-ZGMFR26H.js";
import {
  __toESM
} from "./chunk-IKJM6GHQ.js";

// node_modules/@thirdweb-dev/sdk/dist/signature-drop-40083248.browser.esm.js
init_shim();
init_lib();
var import_bn = __toESM(require_bn());
var import_merkletreejs = __toESM(require_dist());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var import_utils = __toESM(require_utils());
var import_bs58 = __toESM(require_bs58());
var import_cross_fetch = __toESM(require_browser_ponyfill());
var import_utils2 = __toESM(require_utils());
var SignatureDrop = class extends StandardErc721 {
  constructor(network, address, storage) {
    let _options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : void 0;
    let chainId = arguments.length > 5 ? arguments[5] : void 0;
    let contractWrapper = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : new ContractWrapper(network, address, abi, _options);
    super(contractWrapper, storage, chainId);
    _defineProperty(this, "abi", void 0);
    _defineProperty(this, "owner", void 0);
    _defineProperty(this, "encoder", void 0);
    _defineProperty(this, "estimator", void 0);
    _defineProperty(this, "metadata", void 0);
    _defineProperty(this, "app", void 0);
    _defineProperty(this, "sales", void 0);
    _defineProperty(this, "platformFees", void 0);
    _defineProperty(this, "events", void 0);
    _defineProperty(this, "roles", void 0);
    _defineProperty(this, "interceptor", void 0);
    _defineProperty(this, "royalties", void 0);
    _defineProperty(this, "claimConditions", void 0);
    _defineProperty(this, "revealer", void 0);
    _defineProperty(this, "signature", void 0);
    _defineProperty(this, "checkout", void 0);
    _defineProperty(this, "createBatch", buildTransactionFunction(async (metadatas, options) => {
      return this.erc721.lazyMint.prepare(metadatas, options);
    }));
    _defineProperty(this, "claimTo", buildTransactionFunction(async (destinationAddress, quantity, options) => {
      return this.erc721.claimTo.prepare(destinationAddress, quantity, options);
    }));
    _defineProperty(this, "claim", buildTransactionFunction(async (quantity, options) => {
      return this.erc721.claim.prepare(quantity, options);
    }));
    _defineProperty(this, "burn", buildTransactionFunction(async (tokenId) => {
      return this.erc721.burn.prepare(tokenId);
    }));
    this.abi = AbiSchema.parse(abi || []);
    this.metadata = new ContractMetadata(this.contractWrapper, DropErc721ContractSchema, this.storage);
    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);
    this.roles = new ContractRoles(this.contractWrapper, SignatureDrop.contractRoles);
    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);
    this.sales = new ContractPrimarySale(this.contractWrapper);
    this.encoder = new ContractEncoder(this.contractWrapper);
    this.estimator = new GasCostEstimator(this.contractWrapper);
    this.events = new ContractEvents(this.contractWrapper);
    this.platformFees = new ContractPlatformFee(this.contractWrapper);
    this.interceptor = new ContractInterceptor(this.contractWrapper);
    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);
    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);
    this.revealer = new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());
    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);
    this.owner = new ContractOwner(this.contractWrapper);
    this.checkout = new PaperCheckout(this.contractWrapper);
  }
  onNetworkUpdated(network) {
    this.contractWrapper.updateSignerOrProvider(network);
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
  async totalSupply() {
    const claimed = await this.totalClaimedSupply();
    const unclaimed = await this.totalUnclaimedSupply();
    return claimed.add(unclaimed);
  }
  async getAllClaimed(queryParams) {
    const start = BigNumber.from((queryParams == null ? void 0 : queryParams.start) || 0).toNumber();
    const count = BigNumber.from((queryParams == null ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();
    const maxId = Math.min((await this.totalClaimedSupply()).toNumber(), start + count);
    return await Promise.all(Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())));
  }
  async getAllUnclaimed(queryParams) {
    const start = BigNumber.from((queryParams == null ? void 0 : queryParams.start) || 0).toNumber();
    const count = BigNumber.from((queryParams == null ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();
    const firstTokenId = BigNumber.from(Math.max((await this.totalClaimedSupply()).toNumber(), start));
    const maxId = BigNumber.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(), firstTokenId.toNumber() + count));
    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map((i) => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));
  }
  async totalClaimedSupply() {
    return this.erc721.totalClaimedSupply();
  }
  async totalUnclaimedSupply() {
    return this.erc721.totalUnclaimedSupply();
  }
  async isTransferRestricted() {
    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash("transfer"), lib_exports.AddressZero);
    return !anyoneCanTransfer;
  }
  async getClaimTransaction(destinationAddress, quantity, options) {
    return this.erc721.getClaimTransaction(destinationAddress, quantity, options);
  }
  async prepare(method, args, overrides) {
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
};
_defineProperty(SignatureDrop, "contractRoles", ["admin", "minter", "transfer"]);
export {
  SignatureDrop
};
//# sourceMappingURL=signature-drop-40083248.browser.esm-S7Q5YKBR.js.map
