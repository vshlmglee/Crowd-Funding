import {
  AuctionAlreadyStartedError,
  AuctionHasNotEndedError,
  ContractEncoder,
  IERC1155_default,
  IERC165_default,
  IERC721_default,
  InterfaceId_IERC1155,
  InterfaceId_IERC721,
  ListingNotFoundError,
  Transaction,
  WrongListingTypeError,
  _defineProperty,
  buildTransactionFunction,
  cleanCurrencyAddress,
  fetchCurrencyMetadata,
  fetchCurrencyValue,
  fetchTokenMetadataForContract,
  handleTokenApproval,
  invariant,
  isNativeToken,
  isTokenApprovedForTransfer,
  isWinningBid,
  mapOffer,
  normalizePriceValue,
  resolveAddress,
  setErc20Allowance,
  validateNewListingParam
} from "./chunk-6GQJFAXU.js";
import {
  Contract,
  ethers_exports,
  init_lib7 as init_lib,
  utils_exports
} from "./chunk-T4GQYX7O.js";
import {
  BigNumber,
  lib_exports8 as lib_exports
} from "./chunk-RGAYGF33.js";
import {
  init_shim
} from "./chunk-ZGMFR26H.js";

// node_modules/@thirdweb-dev/sdk/dist/marketplace-auction-6ad37313.browser.esm.js
init_shim();
init_lib();
var ListingType = function(ListingType2) {
  ListingType2[ListingType2["Direct"] = 0] = "Direct";
  ListingType2[ListingType2["Auction"] = 1] = "Auction";
  return ListingType2;
}({});
var MarketplaceDirect = class {
  constructor(contractWrapper, storage) {
    _defineProperty(this, "contractWrapper", void 0);
    _defineProperty(this, "storage", void 0);
    _defineProperty(this, "createListing", buildTransactionFunction(async (listing) => {
      validateNewListingParam(listing);
      const resolvedAssetAddress = await resolveAddress(listing.assetContractAddress);
      const resolvedCurrencyAddress = await resolveAddress(listing.currencyContractAddress);
      await handleTokenApproval(this.contractWrapper, this.getAddress(), resolvedAssetAddress, listing.tokenId, await this.contractWrapper.getSignerAddress());
      const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), listing.buyoutPricePerToken, resolvedCurrencyAddress);
      let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1e3);
      const block = await this.contractWrapper.getProvider().getBlock("latest");
      const blockTime = block.timestamp;
      if (listingStartTime < blockTime) {
        listingStartTime = blockTime;
      }
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "createListing",
        args: [{
          assetContract: resolvedAssetAddress,
          tokenId: listing.tokenId,
          buyoutPricePerToken: normalizedPricePerToken,
          currencyToAccept: cleanCurrencyAddress(resolvedCurrencyAddress),
          listingType: ListingType.Direct,
          quantityToList: listing.quantity,
          reservePricePerToken: normalizedPricePerToken,
          secondsUntilEndTime: listing.listingDurationInSeconds,
          startTime: BigNumber.from(listingStartTime)
        }],
        parse: (receipt) => {
          const event = this.contractWrapper.parseLogs("ListingAdded", receipt == null ? void 0 : receipt.logs);
          return {
            id: event[0].args.listingId,
            receipt
          };
        }
      });
    }));
    _defineProperty(this, "createListingsBatch", buildTransactionFunction(async (listings) => {
      const data = await Promise.all(listings.map(async (listing) => {
        const tx = await this.createListing.prepare(listing);
        return tx.encode();
      }));
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "multicall",
        args: [data],
        parse: (receipt) => {
          const events = this.contractWrapper.parseLogs("ListingAdded", receipt == null ? void 0 : receipt.logs);
          return events.map((event) => {
            return {
              id: event.args.listingId,
              receipt
            };
          });
        }
      });
    }));
    _defineProperty(this, "makeOffer", buildTransactionFunction(async (listingId, quantityDesired, currencyContractAddress, pricePerToken, expirationDate) => {
      if (isNativeToken(currencyContractAddress)) {
        throw new Error("You must use the wrapped native token address when making an offer with a native token");
      }
      const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), pricePerToken, currencyContractAddress);
      try {
        await this.getListing(listingId);
      } catch (err) {
        console.error("Failed to get listing, err =", err);
        throw new Error(`Error getting the listing with id ${listingId}`);
      }
      const quantity = BigNumber.from(quantityDesired);
      const value = BigNumber.from(normalizedPrice).mul(quantity);
      const overrides = await this.contractWrapper.getCallOverrides() || {};
      await setErc20Allowance(this.contractWrapper, value, currencyContractAddress, overrides);
      let expirationTimestamp = ethers_exports.constants.MaxUint256;
      if (expirationDate) {
        expirationTimestamp = BigNumber.from(Math.floor(expirationDate.getTime() / 1e3));
      }
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "offer",
        args: [listingId, quantityDesired, currencyContractAddress, normalizedPrice, expirationTimestamp],
        overrides
      });
    }));
    _defineProperty(this, "acceptOffer", buildTransactionFunction(async (listingId, addressOfOfferor) => {
      await this.validateListing(BigNumber.from(listingId));
      const resolvedAddress = await resolveAddress(addressOfOfferor);
      const offer = await this.contractWrapper.readContract.offers(listingId, resolvedAddress);
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "acceptOffer",
        args: [listingId, resolvedAddress, offer.currency, offer.pricePerToken]
      });
    }));
    _defineProperty(this, "buyoutListing", buildTransactionFunction(async (listingId, quantityDesired, receiver) => {
      const listing = await this.validateListing(BigNumber.from(listingId));
      const {
        valid,
        error
      } = await this.isStillValidListing(listing, quantityDesired);
      if (!valid) {
        throw new Error(`Listing ${listingId} is no longer valid. ${error}`);
      }
      const buyFor = receiver ? receiver : await this.contractWrapper.getSignerAddress();
      const quantity = BigNumber.from(quantityDesired);
      const value = BigNumber.from(listing.buyoutPrice).mul(quantity);
      const overrides = await this.contractWrapper.getCallOverrides() || {};
      await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "buy",
        args: [listingId, buyFor, quantity, listing.currencyContractAddress, value],
        overrides
      });
    }));
    _defineProperty(this, "updateListing", buildTransactionFunction(async (listing) => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "updateListing",
        args: [
          listing.id,
          listing.quantity,
          listing.buyoutPrice,
          listing.buyoutPrice,
          await resolveAddress(listing.currencyContractAddress),
          listing.startTimeInSeconds,
          listing.secondsUntilEnd
        ]
      });
    }));
    _defineProperty(this, "cancelListing", buildTransactionFunction(async (listingId) => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "cancelDirectListing",
        args: [listingId]
      });
    }));
    this.contractWrapper = contractWrapper;
    this.storage = storage;
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
  async getListing(listingId) {
    const listing = await this.contractWrapper.readContract.listings(listingId);
    if (listing.assetContract === lib_exports.AddressZero) {
      throw new ListingNotFoundError(this.getAddress(), listingId.toString());
    }
    if (listing.listingType !== ListingType.Direct) {
      throw new WrongListingTypeError(this.getAddress(), listingId.toString(), "Auction", "Direct");
    }
    return await this.mapListing(listing);
  }
  async getActiveOffer(listingId, address) {
    await this.validateListing(BigNumber.from(listingId));
    invariant(utils_exports.isAddress(address), "Address must be a valid address");
    const offers = await this.contractWrapper.readContract.offers(listingId, await resolveAddress(address));
    if (offers.offeror === lib_exports.AddressZero) {
      return void 0;
    }
    return await mapOffer(this.contractWrapper.getProvider(), BigNumber.from(listingId), offers);
  }
  async validateListing(listingId) {
    try {
      return await this.getListing(listingId);
    } catch (err) {
      console.error(`Error getting the listing with id ${listingId}`);
      throw err;
    }
  }
  async mapListing(listing) {
    return {
      assetContractAddress: listing.assetContract,
      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),
      currencyContractAddress: listing.currency,
      buyoutCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.buyoutPricePerToken),
      id: listing.listingId.toString(),
      tokenId: listing.tokenId,
      quantity: listing.quantity,
      startTimeInSeconds: listing.startTime,
      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),
      secondsUntilEnd: listing.endTime,
      sellerAddress: listing.tokenOwner,
      type: ListingType.Direct
    };
  }
  async isStillValidListing(listing, quantity) {
    const approved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, listing.sellerAddress);
    if (!approved) {
      return {
        valid: false,
        error: `Token '${listing.tokenId}' from contract '${listing.assetContractAddress}' is not approved for transfer`
      };
    }
    const provider = this.contractWrapper.getProvider();
    const erc165 = new Contract(listing.assetContractAddress, IERC165_default, provider);
    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);
    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);
    if (isERC721) {
      const asset = new Contract(listing.assetContractAddress, IERC721_default, provider);
      let owner;
      try {
        owner = await asset.ownerOf(listing.tokenId);
      } catch (e) {
      }
      const valid = (owner == null ? void 0 : owner.toLowerCase()) === listing.sellerAddress.toLowerCase();
      return {
        valid,
        error: valid ? void 0 : `Seller is not the owner of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} anymore'`
      };
    } else if (isERC1155) {
      const asset = new Contract(listing.assetContractAddress, IERC1155_default, provider);
      const balance = await asset.balanceOf(listing.sellerAddress, listing.tokenId);
      const valid = balance.gte(quantity || listing.quantity);
      return {
        valid,
        error: valid ? void 0 : `Seller does not have enough balance of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} to fulfill the listing`
      };
    } else {
      return {
        valid: false,
        error: "Contract does not implement ERC 1155 or ERC 721."
      };
    }
  }
};
var MarketplaceAuction = class {
  constructor(contractWrapper, storage) {
    _defineProperty(this, "contractWrapper", void 0);
    _defineProperty(this, "storage", void 0);
    _defineProperty(this, "encoder", void 0);
    _defineProperty(this, "createListing", buildTransactionFunction(async (listing) => {
      validateNewListingParam(listing);
      const resolvedAssetAddress = await resolveAddress(listing.assetContractAddress);
      const resolvedCurrencyAddress = await resolveAddress(listing.currencyContractAddress);
      await handleTokenApproval(this.contractWrapper, this.getAddress(), resolvedAssetAddress, listing.tokenId, await this.contractWrapper.getSignerAddress());
      const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), listing.buyoutPricePerToken, resolvedCurrencyAddress);
      const normalizedReservePrice = await normalizePriceValue(this.contractWrapper.getProvider(), listing.reservePricePerToken, resolvedCurrencyAddress);
      let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1e3);
      const block = await this.contractWrapper.getProvider().getBlock("latest");
      const blockTime = block.timestamp;
      if (listingStartTime < blockTime) {
        listingStartTime = blockTime;
      }
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "createListing",
        args: [{
          assetContract: resolvedAssetAddress,
          tokenId: listing.tokenId,
          buyoutPricePerToken: normalizedPricePerToken,
          currencyToAccept: cleanCurrencyAddress(resolvedCurrencyAddress),
          listingType: ListingType.Auction,
          quantityToList: listing.quantity,
          reservePricePerToken: normalizedReservePrice,
          secondsUntilEndTime: listing.listingDurationInSeconds,
          startTime: BigNumber.from(listingStartTime)
        }],
        parse: (receipt) => {
          const event = this.contractWrapper.parseLogs("ListingAdded", receipt == null ? void 0 : receipt.logs);
          return {
            id: event[0].args.listingId,
            receipt
          };
        }
      });
    }));
    _defineProperty(this, "createListingsBatch", buildTransactionFunction(async (listings) => {
      const data = await Promise.all(listings.map(async (listing) => {
        const tx = await this.createListing.prepare(listing);
        return tx.encode();
      }));
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "multicall",
        args: [data],
        parse: (receipt) => {
          const events = this.contractWrapper.parseLogs("ListingAdded", receipt == null ? void 0 : receipt.logs);
          return events.map((event) => {
            return {
              id: event.args.listingId,
              receipt
            };
          });
        }
      });
    }));
    _defineProperty(this, "buyoutListing", buildTransactionFunction(async (listingId) => {
      const listing = await this.validateListing(BigNumber.from(listingId));
      const currencyMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), listing.currencyContractAddress);
      return this.makeBid.prepare(listingId, ethers_exports.utils.formatUnits(listing.buyoutPrice, currencyMetadata.decimals));
    }));
    _defineProperty(this, "makeBid", buildTransactionFunction(async (listingId, pricePerToken) => {
      const listing = await this.validateListing(BigNumber.from(listingId));
      const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), pricePerToken, listing.currencyContractAddress);
      if (normalizedPrice.eq(BigNumber.from(0))) {
        throw new Error("Cannot make a bid with 0 value");
      }
      const bidBuffer = await this.contractWrapper.readContract.bidBufferBps();
      const winningBid = await this.getWinningBid(listingId);
      if (winningBid) {
        const isWinner = isWinningBid(winningBid.pricePerToken, normalizedPrice, bidBuffer);
        invariant(isWinner, "Bid price is too low based on the current winning bid and the bid buffer");
      } else {
        const tokenPrice = normalizedPrice;
        const reservePrice = BigNumber.from(listing.reservePrice);
        invariant(tokenPrice.gte(reservePrice), "Bid price is too low based on reserve price");
      }
      const quantity = BigNumber.from(listing.quantity);
      const value = normalizedPrice.mul(quantity);
      const overrides = await this.contractWrapper.getCallOverrides() || {};
      await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "offer",
        args: [listingId, listing.quantity, listing.currencyContractAddress, normalizedPrice, ethers_exports.constants.MaxUint256],
        overrides
      });
    }));
    _defineProperty(this, "cancelListing", buildTransactionFunction(async (listingId) => {
      const listing = await this.validateListing(BigNumber.from(listingId));
      const now = BigNumber.from(Math.floor(Date.now() / 1e3));
      const startTime = BigNumber.from(listing.startTimeInEpochSeconds);
      const offers = await this.contractWrapper.readContract.winningBid(listingId);
      if (now.gt(startTime) && offers.offeror !== lib_exports.AddressZero) {
        throw new AuctionAlreadyStartedError(listingId.toString());
      }
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "closeAuction",
        args: [BigNumber.from(listingId), await this.contractWrapper.getSignerAddress()]
      });
    }));
    _defineProperty(this, "closeListing", buildTransactionFunction(async (listingId, closeFor) => {
      if (!closeFor) {
        closeFor = await this.contractWrapper.getSignerAddress();
      }
      const listing = await this.validateListing(BigNumber.from(listingId));
      try {
        return Transaction.fromContractWrapper({
          contractWrapper: this.contractWrapper,
          method: "closeAuction",
          args: [BigNumber.from(listingId), closeFor]
        });
      } catch (err) {
        if (err.message.includes("cannot close auction before it has ended")) {
          throw new AuctionHasNotEndedError(listingId.toString(), listing.endTimeInEpochSeconds.toString());
        } else {
          throw err;
        }
      }
    }));
    _defineProperty(this, "executeSale", buildTransactionFunction(async (listingId) => {
      const listing = await this.validateListing(BigNumber.from(listingId));
      try {
        const winningBid = await this.getWinningBid(listingId);
        invariant(winningBid, "No winning bid found");
        const closeForSeller = this.encoder.encode("closeAuction", [listingId, listing.sellerAddress]);
        const closeForBuyer = this.encoder.encode("closeAuction", [listingId, winningBid.buyerAddress]);
        return Transaction.fromContractWrapper({
          contractWrapper: this.contractWrapper,
          method: "multicall",
          args: [closeForSeller, closeForBuyer]
        });
      } catch (err) {
        if (err.message.includes("cannot close auction before it has ended")) {
          throw new AuctionHasNotEndedError(listingId.toString(), listing.endTimeInEpochSeconds.toString());
        } else {
          throw err;
        }
      }
    }));
    _defineProperty(this, "updateListing", buildTransactionFunction(async (listing) => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "updateListing",
        args: [listing.id, listing.quantity, listing.reservePrice, listing.buyoutPrice, listing.currencyContractAddress, listing.startTimeInEpochSeconds, listing.endTimeInEpochSeconds]
      });
    }));
    this.contractWrapper = contractWrapper;
    this.storage = storage;
    this.encoder = new ContractEncoder(contractWrapper);
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
  async getListing(listingId) {
    const listing = await this.contractWrapper.readContract.listings(listingId);
    if (listing.listingId.toString() !== listingId.toString()) {
      throw new ListingNotFoundError(this.getAddress(), listingId.toString());
    }
    if (listing.listingType !== ListingType.Auction) {
      throw new WrongListingTypeError(this.getAddress(), listingId.toString(), "Direct", "Auction");
    }
    return await this.mapListing(listing);
  }
  async getWinningBid(listingId) {
    await this.validateListing(BigNumber.from(listingId));
    const offers = await this.contractWrapper.readContract.winningBid(listingId);
    if (offers.offeror === lib_exports.AddressZero) {
      return void 0;
    }
    return await mapOffer(this.contractWrapper.getProvider(), BigNumber.from(listingId), offers);
  }
  async getWinner(listingId) {
    const listing = await this.validateListing(BigNumber.from(listingId));
    const offers = await this.contractWrapper.readContract.winningBid(listingId);
    const now = BigNumber.from(Math.floor(Date.now() / 1e3));
    const endTime = BigNumber.from(listing.endTimeInEpochSeconds);
    if (now.gt(endTime) && offers.offeror !== lib_exports.AddressZero) {
      return offers.offeror;
    }
    const closedAuctions = await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.AuctionClosed());
    const auction = closedAuctions.find((a) => a.args.listingId.eq(BigNumber.from(listingId)));
    if (!auction) {
      throw new Error(`Could not find auction with listingId ${listingId} in closed auctions`);
    }
    return auction.args.winningBidder;
  }
  async getBidBufferBps() {
    return this.contractWrapper.readContract.bidBufferBps();
  }
  async getMinimumNextBid(listingId) {
    const [currentBidBufferBps, winningBid, listing] = await Promise.all([this.getBidBufferBps(), this.getWinningBid(listingId), await this.validateListing(BigNumber.from(listingId))]);
    const currentBidOrReservePrice = winningBid ? winningBid.currencyValue.value : listing.reservePrice;
    const minimumNextBid = currentBidOrReservePrice.add(
      currentBidOrReservePrice.mul(currentBidBufferBps).div(1e4)
    );
    return fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currencyContractAddress, minimumNextBid);
  }
  async validateListing(listingId) {
    try {
      return await this.getListing(listingId);
    } catch (err) {
      console.error(`Error getting the listing with id ${listingId}`);
      throw err;
    }
  }
  async mapListing(listing) {
    return {
      assetContractAddress: listing.assetContract,
      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),
      currencyContractAddress: listing.currency,
      buyoutCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.buyoutPricePerToken),
      id: listing.listingId.toString(),
      tokenId: listing.tokenId,
      quantity: listing.quantity,
      startTimeInEpochSeconds: listing.startTime,
      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),
      reservePriceCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.reservePricePerToken),
      reservePrice: BigNumber.from(listing.reservePricePerToken),
      endTimeInEpochSeconds: listing.endTime,
      sellerAddress: listing.tokenOwner,
      type: ListingType.Auction
    };
  }
};

export {
  ListingType,
  MarketplaceDirect,
  MarketplaceAuction
};
//# sourceMappingURL=chunk-7KGO3PSZ.js.map
