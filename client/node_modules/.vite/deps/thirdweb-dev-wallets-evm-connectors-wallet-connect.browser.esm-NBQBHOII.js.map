{
  "version": 3,
  "sources": ["../../@thirdweb-dev/wallets/evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js"],
  "sourcesContent": ["import { _ as _classPrivateMethodInitSpec, a as _classPrivateMethodGet } from '../../../../dist/classPrivateMethodGet-ea199cc3.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, b as _classPrivateFieldGet, a as _classPrivateFieldSet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-99b78e4a.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-60b19604.browser.esm.js';\nimport { U as UserRejectedRequestError, S as SwitchChainError } from '../../../../dist/errors-105ad187.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nconst NAMESPACE = \"eip155\";\nconst REQUESTED_CHAINS_KEY = \"wagmi.requestedChains\";\nconst ADD_ETH_CHAIN_METHOD = \"wallet_addEthereumChain\";\nconst LAST_USED_CHAIN_ID = \"last-used-chain-id\";\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _initProviderPromise = /*#__PURE__*/new WeakMap();\nvar _storage = /*#__PURE__*/new WeakMap();\nvar _createProvider = /*#__PURE__*/new WeakSet();\nvar _initProvider = /*#__PURE__*/new WeakSet();\nvar _isChainsStale = /*#__PURE__*/new WeakSet();\nvar _removeListeners = /*#__PURE__*/new WeakSet();\nvar _setRequestedChainsIds = /*#__PURE__*/new WeakSet();\nvar _getRequestedChainsIds = /*#__PURE__*/new WeakSet();\nvar _getNamespaceChainsIds = /*#__PURE__*/new WeakSet();\nvar _getNamespaceMethods = /*#__PURE__*/new WeakSet();\nclass WalletConnectConnector extends WagmiConnector {\n  constructor(config) {\n    super({\n      ...config,\n      options: {\n        isNewChainsStale: true,\n        ...config.options\n      }\n    });\n    _classPrivateMethodInitSpec(this, _getNamespaceMethods);\n    _classPrivateMethodInitSpec(this, _getNamespaceChainsIds);\n    _classPrivateMethodInitSpec(this, _getRequestedChainsIds);\n    _classPrivateMethodInitSpec(this, _setRequestedChainsIds);\n    _classPrivateMethodInitSpec(this, _removeListeners);\n    /**\n     * Checks if the target chains match the chains that were\n     * initially requested by the connector for the WalletConnect session.\n     * If there is a mismatch, this means that the chains on the connector\n     * are considered stale, and need to be revalidated at a later point (via\n     * connection).\n     *\n     * There may be a scenario where a dapp adds a chain to the\n     * connector later on, however, this chain will not have been approved or rejected\n     * by the wallet. In this case, the chain is considered stale.\n     *\n     * There are exceptions however:\n     * -  If the wallet supports dynamic chain addition via `eth_addEthereumChain`,\n     *    then the chain is not considered stale.\n     * -  If the `isNewChainsStale` flag is falsy on the connector, then the chain is\n     *    not considered stale.\n     *\n     * For the above cases, chain validation occurs dynamically when the user\n     * attempts to switch chain.\n     *\n     * Also check that dapp supports at least 1 chain from previously approved session.\n     */\n    _classPrivateMethodInitSpec(this, _isChainsStale);\n    _classPrivateMethodInitSpec(this, _initProvider);\n    _classPrivateMethodInitSpec(this, _createProvider);\n    _defineProperty(this, \"id\", walletIds.walletConnect);\n    _defineProperty(this, \"name\", \"WalletConnect\");\n    _defineProperty(this, \"ready\", true);\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _initProviderPromise, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _storage, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = Number(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      _classPrivateFieldGet(this, _storage).setItem(LAST_USED_CHAIN_ID, String(chainId));\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", () => {\n      _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, []);\n      _classPrivateFieldGet(this, _storage).removeItem(LAST_USED_CHAIN_ID);\n      this.emit(\"disconnect\");\n    });\n    _defineProperty(this, \"onDisplayUri\", uri => {\n      this.emit(\"message\", {\n        type: \"display_uri\",\n        data: uri\n      });\n    });\n    _defineProperty(this, \"onConnect\", () => {\n      this.emit(\"connect\", {\n        provider: _classPrivateFieldGet(this, _provider)\n      });\n    });\n    _classPrivateFieldSet(this, _storage, config.options.storage);\n    _classPrivateMethodGet(this, _createProvider, _createProvider2).call(this);\n  }\n  async connect() {\n    let {\n      chainId: chainIdP,\n      pairingTopic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      let targetChainId = chainIdP;\n      if (!targetChainId) {\n        const lastUsedChainIdStr = await _classPrivateFieldGet(this, _storage).getItem(LAST_USED_CHAIN_ID);\n        const lastUsedChainId = lastUsedChainIdStr ? parseInt(lastUsedChainIdStr) : undefined;\n        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) {\n          targetChainId = lastUsedChainId;\n        } else {\n          targetChainId = this.chains[0]?.chainId;\n        }\n      }\n      if (!targetChainId) {\n        throw new Error(\"No chains found on connector.\");\n      }\n      const provider = await this.getProvider();\n      this.setupListeners();\n      const isChainsStale = await _classPrivateMethodGet(this, _isChainsStale, _isChainsStale2).call(this);\n\n      // If there is an active session with stale chains, disconnect the current session.\n      if (provider.session && isChainsStale) {\n        await provider.disconnect();\n      }\n\n      // If there no active session, or the chains are stale, connect.\n      if (!provider.session || isChainsStale) {\n        const optionalChains = this.chains.filter(chain => chain.chainId !== targetChainId).map(optionalChain => optionalChain.chainId);\n        this.emit(\"message\", {\n          type: \"connecting\"\n        });\n        await provider.connect({\n          pairingTopic,\n          chains: [targetChainId],\n          optionalChains: optionalChains.length > 0 ? optionalChains : [targetChainId]\n        });\n        _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, this.chains.map(_ref => {\n          let {\n            chainId\n          } = _ref;\n          return chainId;\n        }));\n      }\n\n      // If session exists and chains are authorized, enable provider for required chain\n      const accounts = await provider.enable();\n      if (accounts.length === 0) {\n        throw new Error(\"No accounts found on provider.\");\n      }\n      const account = utils.getAddress(accounts[0]);\n      const id = await this.getChainId();\n      const unsupported = this.isChainUnsupported(id);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider: new providers.Web3Provider(provider)\n      };\n    } catch (error) {\n      if (/user rejected/i.test(error?.message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    try {\n      await provider.disconnect();\n    } catch (error) {\n      if (!/No matching key/i.test(error.message)) {\n        throw error;\n      }\n    } finally {\n      _classPrivateMethodGet(this, _removeListeners, _removeListeners2).call(this);\n      _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, []);\n    }\n  }\n  async getAccount() {\n    const {\n      accounts\n    } = await this.getProvider();\n    if (accounts.length === 0) {\n      throw new Error(\"No accounts found on provider.\");\n    }\n    return utils.getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const {\n      chainId\n    } = await this.getProvider();\n    return chainId;\n  }\n  async getProvider() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!_classPrivateFieldGet(this, _provider)) {\n      await _classPrivateMethodGet(this, _createProvider, _createProvider2).call(this);\n    }\n    if (chainId) {\n      await this.switchChain(chainId);\n    }\n    if (!_classPrivateFieldGet(this, _provider)) {\n      throw new Error(\"No provider found.\");\n    }\n    return _classPrivateFieldGet(this, _provider);\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider({\n      chainId\n    }), this.getAccount()]);\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      const [account, provider] = await Promise.all([this.getAccount(), this.getProvider()]);\n      const isChainsStale = await _classPrivateMethodGet(this, _isChainsStale, _isChainsStale2).call(this);\n\n      // If an account does not exist on the session, then the connector is unauthorized.\n      if (!account) {\n        return false;\n      }\n\n      // If the chains are stale on the session, then the connector is unauthorized.\n      if (isChainsStale && provider.session) {\n        try {\n          await provider.disconnect();\n        } catch {} // eslint-disable-line no-empty\n        return false;\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const chain = this.chains.find(chain_ => chain_.chainId === chainId);\n    if (!chain) {\n      throw new SwitchChainError(new Error(\"chain not found on connector.\"));\n    }\n    try {\n      const provider = await this.getProvider();\n      const namespaceChains = _classPrivateMethodGet(this, _getNamespaceChainsIds, _getNamespaceChainsIds2).call(this);\n      const namespaceMethods = _classPrivateMethodGet(this, _getNamespaceMethods, _getNamespaceMethods2).call(this);\n      const isChainApproved = namespaceChains.includes(chainId);\n      if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n        await provider.request({\n          method: ADD_ETH_CHAIN_METHOD,\n          params: [{\n            chainId: utils.hexValue(chain.chainId),\n            blockExplorerUrls: [chain.explorers?.length ? chain.explorers[0] : undefined],\n            chainName: chain.name,\n            nativeCurrency: chain.nativeCurrency,\n            rpcUrls: [...chain.rpc]\n          }]\n        });\n        const requestedChains = await _classPrivateMethodGet(this, _getRequestedChainsIds, _getRequestedChainsIds2).call(this);\n        requestedChains.push(chainId);\n        _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, requestedChains);\n      }\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: utils.hexValue(chainId)\n        }]\n      });\n      return chain;\n    } catch (error) {\n      const message = typeof error === \"string\" ? error : error?.message;\n      if (/user rejected request/i.test(message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  async setupListeners() {\n    if (!_classPrivateFieldGet(this, _provider)) {\n      return;\n    }\n    _classPrivateMethodGet(this, _removeListeners, _removeListeners2).call(this);\n    _classPrivateFieldGet(this, _provider).on(\"accountsChanged\", this.onAccountsChanged);\n    _classPrivateFieldGet(this, _provider).on(\"chainChanged\", this.onChainChanged);\n    _classPrivateFieldGet(this, _provider).on(\"disconnect\", this.onDisconnect);\n    _classPrivateFieldGet(this, _provider).on(\"session_delete\", this.onDisconnect);\n    _classPrivateFieldGet(this, _provider).on(\"display_uri\", this.onDisplayUri);\n    _classPrivateFieldGet(this, _provider).on(\"connect\", this.onConnect);\n  }\n}\nasync function _createProvider2() {\n  if (!_classPrivateFieldGet(this, _initProviderPromise) && \"object\" !== \"undefined\") {\n    _classPrivateFieldSet(this, _initProviderPromise, _classPrivateMethodGet(this, _initProvider, _initProvider2).call(this));\n  }\n  return _classPrivateFieldGet(this, _initProviderPromise);\n}\nasync function _initProvider2() {\n  const {\n    default: EthereumProvider,\n    OPTIONAL_EVENTS,\n    OPTIONAL_METHODS\n  } = await import('@walletconnect/ethereum-provider');\n  const [defaultChain, ...optionalChains] = this.chains.map(_ref2 => {\n    let {\n      chainId\n    } = _ref2;\n    return chainId;\n  });\n  if (defaultChain) {\n    // EthereumProvider populates & deduplicates required methods and events internally\n    _classPrivateFieldSet(this, _provider, await EthereumProvider.init({\n      showQrModal: this.options.qrcode !== false,\n      projectId: this.options.projectId,\n      optionalMethods: OPTIONAL_METHODS,\n      optionalEvents: OPTIONAL_EVENTS,\n      chains: [defaultChain],\n      optionalChains: optionalChains,\n      metadata: {\n        name: this.options.dappMetadata.name,\n        description: this.options.dappMetadata.description || \"\",\n        url: this.options.dappMetadata.url,\n        icons: [this.options.dappMetadata.logoUrl || \"\"]\n      },\n      rpcMap: Object.fromEntries(this.chains.map(chain => [chain.chainId, chain.rpc[0]])),\n      qrModalOptions: {\n        ...this.options.qrModalOptions,\n        explorerAllowList: [],\n        explorerDenyList: []\n      }\n    }));\n  }\n}\nasync function _isChainsStale2() {\n  const namespaceMethods = _classPrivateMethodGet(this, _getNamespaceMethods, _getNamespaceMethods2).call(this);\n  if (namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n    return false;\n  }\n  if (!this.options.isNewChainsStale) {\n    return false;\n  }\n  const requestedChains = await _classPrivateMethodGet(this, _getRequestedChainsIds, _getRequestedChainsIds2).call(this);\n  const connectorChains = this.chains.map(_ref3 => {\n    let {\n      chainId\n    } = _ref3;\n    return chainId;\n  });\n  const namespaceChains = _classPrivateMethodGet(this, _getNamespaceChainsIds, _getNamespaceChainsIds2).call(this);\n  if (namespaceChains.length && !namespaceChains.some(id => connectorChains.includes(id))) {\n    return false;\n  }\n  return !connectorChains.every(id => requestedChains.includes(id));\n}\nfunction _removeListeners2() {\n  if (!_classPrivateFieldGet(this, _provider)) {\n    return;\n  }\n  _classPrivateFieldGet(this, _provider).removeListener(\"accountsChanged\", this.onAccountsChanged);\n  _classPrivateFieldGet(this, _provider).removeListener(\"chainChanged\", this.onChainChanged);\n  _classPrivateFieldGet(this, _provider).removeListener(\"disconnect\", this.onDisconnect);\n  _classPrivateFieldGet(this, _provider).removeListener(\"session_delete\", this.onDisconnect);\n  _classPrivateFieldGet(this, _provider).removeListener(\"display_uri\", this.onDisplayUri);\n  _classPrivateFieldGet(this, _provider).removeListener(\"connect\", this.onConnect);\n}\nfunction _setRequestedChainsIds2(chains) {\n  _classPrivateFieldGet(this, _storage).setItem(REQUESTED_CHAINS_KEY, JSON.stringify(chains));\n}\nasync function _getRequestedChainsIds2() {\n  const data = await _classPrivateFieldGet(this, _storage).getItem(REQUESTED_CHAINS_KEY);\n  return data ? JSON.parse(data) : [];\n}\nfunction _getNamespaceChainsIds2() {\n  if (!_classPrivateFieldGet(this, _provider)) {\n    return [];\n  }\n  const chainIds = _classPrivateFieldGet(this, _provider).session?.namespaces[NAMESPACE]?.chains?.map(chain => parseInt(chain.split(\":\")[1] || \"\"));\n  return chainIds ?? [];\n}\nfunction _getNamespaceMethods2() {\n  if (!_classPrivateFieldGet(this, _provider)) {\n    return [];\n  }\n  const methods = _classPrivateFieldGet(this, _provider).session?.namespaces[NAMESPACE]?.methods;\n  return methods ?? [];\n}\n\nexport { WalletConnectConnector };\n"],
  "mappings": "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",
  "names": []
}
