{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/marketplace-auction-6ad37313.browser.esm.js"],
  "sourcesContent": ["import { _ as _defineProperty } from './QueryParams-7d9473b5.browser.esm.js';\nimport { cZ as buildTransactionFunction, bp as ListingNotFoundError, bq as WrongListingTypeError, cj as resolveAddress, c_ as mapOffer, b6 as fetchCurrencyValue, c$ as fetchTokenMetadataForContract, d0 as isTokenApprovedForTransfer, cs as InterfaceId_IERC721, ct as InterfaceId_IERC1155, d1 as validateNewListingParam, d2 as handleTokenApproval, b4 as normalizePriceValue, aV as Transaction, b3 as cleanCurrencyAddress, b2 as isNativeToken, b7 as setErc20Allowance, af as ContractEncoder, b5 as fetchCurrencyMetadata, d3 as isWinningBid, bn as AuctionAlreadyStartedError, bt as AuctionHasNotEndedError } from './contract-publisher-a7ca5177.browser.esm.js';\nimport ERC165Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport Erc721Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport Erc1155Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport { constants, BigNumber, utils, Contract, ethers } from 'ethers';\nimport invariant from 'tiny-invariant';\n\nlet ListingType = /*#__PURE__*/function (ListingType) {\n  ListingType[ListingType[\"Direct\"] = 0] = \"Direct\";\n  ListingType[ListingType[\"Auction\"] = 1] = \"Auction\";\n  return ListingType;\n}({});\n\n/**\n * Handles direct listings\n * @public\n */\nclass MarketplaceDirect {\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Create Direct Listing\n     *\n     * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n     *\n     * @example\n     * ```javascript\n     * // Data of the listing you want to create\n     * const listing = {\n     *   // address of the contract the asset you want to list is on\n     *   assetContractAddress: \"0x...\",\n     *   // token ID of the asset you want to list\n     *   tokenId: \"0\",\n     *   // when should the listing open up for offers\n     *   startTimestamp: new Date(),\n     *   // how long the listing will be open for\n     *   listingDurationInSeconds: 86400,\n     *   // how many of the asset you want to list\n     *   quantity: 1,\n     *   // address of the currency contract that will be used to pay for the listing\n     *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n     *   // how much the asset will be sold for\n     *   buyoutPricePerToken: \"1.5\",\n     * }\n     *\n     * const tx = await contract.direct.createListing(listing);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const id = tx.id; // the id of the newly created listing\n     * ```\n     */\n    _defineProperty(this, \"createListing\", buildTransactionFunction(async listing => {\n      validateNewListingParam(listing);\n      const resolvedAssetAddress = await resolveAddress(listing.assetContractAddress);\n      const resolvedCurrencyAddress = await resolveAddress(listing.currencyContractAddress);\n      await handleTokenApproval(this.contractWrapper, this.getAddress(), resolvedAssetAddress, listing.tokenId, await this.contractWrapper.getSignerAddress());\n      const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), listing.buyoutPricePerToken, resolvedCurrencyAddress);\n      let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n      const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n      const blockTime = block.timestamp;\n      if (listingStartTime < blockTime) {\n        listingStartTime = blockTime;\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"createListing\",\n        args: [{\n          assetContract: resolvedAssetAddress,\n          tokenId: listing.tokenId,\n          buyoutPricePerToken: normalizedPricePerToken,\n          currencyToAccept: cleanCurrencyAddress(resolvedCurrencyAddress),\n          listingType: ListingType.Direct,\n          quantityToList: listing.quantity,\n          reservePricePerToken: normalizedPricePerToken,\n          secondsUntilEndTime: listing.listingDurationInSeconds,\n          startTime: BigNumber.from(listingStartTime)\n        }],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n          return {\n            id: event[0].args.listingId,\n            receipt\n          };\n        }\n      });\n    }));\n    /**\n     * Create a batch of new listings\n     *\n     * @remarks Create a batch of new listings on the marketplace\n     *\n     * @example\n     * ```javascript\n     * const listings = [...];\n     * const tx = await contract.direct.createListingsBatch(listings);\n     * ```\n     */\n    _defineProperty(this, \"createListingsBatch\", buildTransactionFunction(async listings => {\n      const data = await Promise.all(listings.map(async listing => {\n        const tx = await this.createListing.prepare(listing);\n        return tx.encode();\n      }));\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [data],\n        parse: receipt => {\n          const events = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n          return events.map(event => {\n            return {\n              id: event.args.listingId,\n              receipt\n            };\n          });\n        }\n      });\n    }));\n    /**\n     * Make an offer for a Direct Listing\n     *\n     * @remarks Make an offer on a direct listing\n     *\n     * @example\n     * ```javascript\n     * import { ChainId, NATIVE_TOKENS } from \"@thirdweb-dev/sdk\";\n     *\n     * // The listing ID of the asset you want to offer on\n     * const listingId = 0;\n     * // The price you are willing to offer per token\n     * const pricePerToken = 1;\n     * // The quantity of tokens you want to receive for this offer\n     * const quantity = 1;\n     * // The address of the currency you are making the offer in (must be ERC-20)\n     * const currencyContractAddress = NATIVE_TOKENS[ChainId.Rinkeby].wrapped.address\n     *\n     * await contract.direct.makeOffer(\n     *   listingId,\n     *   quantity,\n     *   currencyContractAddress,\n     *   pricePerToken\n     * );\n     * ```\n     */\n    _defineProperty(this, \"makeOffer\", buildTransactionFunction(async (listingId, quantityDesired, currencyContractAddress, pricePerToken, expirationDate) => {\n      if (isNativeToken(currencyContractAddress)) {\n        throw new Error(\"You must use the wrapped native token address when making an offer with a native token\");\n      }\n      const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), pricePerToken, currencyContractAddress);\n      try {\n        await this.getListing(listingId);\n      } catch (err) {\n        console.error(\"Failed to get listing, err =\", err);\n        throw new Error(`Error getting the listing with id ${listingId}`);\n      }\n      const quantity = BigNumber.from(quantityDesired);\n      const value = BigNumber.from(normalizedPrice).mul(quantity);\n      const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n      await setErc20Allowance(this.contractWrapper, value, currencyContractAddress, overrides);\n      let expirationTimestamp = ethers.constants.MaxUint256;\n      if (expirationDate) {\n        expirationTimestamp = BigNumber.from(Math.floor(expirationDate.getTime() / 1000));\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"offer\",\n        args: [listingId, quantityDesired, currencyContractAddress, normalizedPrice, expirationTimestamp],\n        overrides\n      });\n    }));\n    /**\n     * Accept an offer on a direct listing\n     *\n     * @remarks Accept an offer on a direct listing\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the asset you want to bid on\n     * const listingId = 0;\n     * // The price you are willing to bid for a single token of the listing\n     * const offeror = \"0x...\";\n     *\n     * await contract.direct.acceptOffer(listingId, offeror);\n     * ```\n     */\n    _defineProperty(this, \"acceptOffer\", buildTransactionFunction(async (listingId, addressOfOfferor) => {\n      /**\n       * TODO:\n       * - Provide better error handling if offer is too low.\n       */\n      await this.validateListing(BigNumber.from(listingId));\n      const resolvedAddress = await resolveAddress(addressOfOfferor);\n      const offer = await this.contractWrapper.readContract.offers(listingId, resolvedAddress);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"acceptOffer\",\n        args: [listingId, resolvedAddress, offer.currency, offer.pricePerToken]\n      });\n    }));\n    /**\n     * Buy a Listing\n     *\n     * @remarks Buy a specific direct listing from the marketplace.\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the asset you want to buy\n     * const listingId = 0;\n     * // Quantity of the asset you want to buy\n     * const quantityDesired = 1;\n     *\n     * await contract.direct.buyoutListing(listingId, quantityDesired);\n     * ```\n     *\n     * @param listingId - The listing id to buy\n     * @param quantityDesired - the quantity to buy\n     * @param receiver - optional receiver of the bought listing if different from the connected wallet\n     */\n    _defineProperty(this, \"buyoutListing\", buildTransactionFunction(async (listingId, quantityDesired, receiver) => {\n      const listing = await this.validateListing(BigNumber.from(listingId));\n      const {\n        valid,\n        error\n      } = await this.isStillValidListing(listing, quantityDesired);\n      if (!valid) {\n        throw new Error(`Listing ${listingId} is no longer valid. ${error}`);\n      }\n      const buyFor = receiver ? receiver : await this.contractWrapper.getSignerAddress();\n      const quantity = BigNumber.from(quantityDesired);\n      const value = BigNumber.from(listing.buyoutPrice).mul(quantity);\n      const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n      await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"buy\",\n        args: [listingId, buyFor, quantity, listing.currencyContractAddress, value],\n        overrides\n      });\n    }));\n    /**\n     * Update a Direct listing with new metadata.\n     *\n     * Note: cannot update a listing with a new quantity of 0. Use `cancelDirectListing` to remove a listing instead.\n     *\n     * @param listing - the new listing information\n     */\n    _defineProperty(this, \"updateListing\", buildTransactionFunction(async listing => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"updateListing\",\n        args: [listing.id, listing.quantity, listing.buyoutPrice,\n        // reserve price, doesn't matter for direct listing\n        listing.buyoutPrice, await resolveAddress(listing.currencyContractAddress), listing.startTimeInSeconds, listing.secondsUntilEnd]\n      });\n    }));\n    /**\n     * Cancel Direct Listing\n     *\n     * @remarks Cancel a direct listing on the marketplace\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the direct listing you want to cancel\n     * const listingId = \"0\";\n     *\n     * await contract.direct.cancelListing(listingId);\n     * ```\n     */\n    _defineProperty(this, \"cancelListing\", buildTransactionFunction(async listingId => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"cancelDirectListing\",\n        args: [listingId]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a direct listing by id\n   *\n   * @param listingId - the listing id\n   * @returns the Direct listing object\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.readContract.listings(listingId);\n    if (listing.assetContract === constants.AddressZero) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    if (listing.listingType !== ListingType.Direct) {\n      throw new WrongListingTypeError(this.getAddress(), listingId.toString(), \"Auction\", \"Direct\");\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get the active offer on a listing\n   * @param listingId - the listing id\n   * @param address - the address that made the offer\n   */\n  async getActiveOffer(listingId, address) {\n    await this.validateListing(BigNumber.from(listingId));\n    invariant(utils.isAddress(address), \"Address must be a valid address\");\n    const offers = await this.contractWrapper.readContract.offers(listingId, await resolveAddress(address));\n    if (offers.offeror === constants.AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(this.contractWrapper.getProvider(), BigNumber.from(listingId), offers);\n  }\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.buyoutPricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      secondsUntilEnd: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Direct\n    };\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  async isStillValidListing(listing, quantity) {\n    const approved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, listing.sellerAddress);\n    if (!approved) {\n      return {\n        valid: false,\n        error: `Token '${listing.tokenId}' from contract '${listing.assetContractAddress}' is not approved for transfer`\n      };\n    }\n    const provider = this.contractWrapper.getProvider();\n    const erc165 = new Contract(listing.assetContractAddress, ERC165Abi, provider);\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = new Contract(listing.assetContractAddress, Erc721Abi, provider);\n\n      // Handle reverts in case of non-existent tokens\n      let owner;\n      try {\n        owner = await asset.ownerOf(listing.tokenId);\n      } catch (e) {}\n      const valid = owner?.toLowerCase() === listing.sellerAddress.toLowerCase();\n      return {\n        valid,\n        error: valid ? undefined : `Seller is not the owner of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} anymore'`\n      };\n    } else if (isERC1155) {\n      const asset = new Contract(listing.assetContractAddress, Erc1155Abi, provider);\n      const balance = await asset.balanceOf(listing.sellerAddress, listing.tokenId);\n      const valid = balance.gte(quantity || listing.quantity);\n      return {\n        valid,\n        error: valid ? undefined : `Seller does not have enough balance of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} to fulfill the listing`\n      };\n    } else {\n      return {\n        valid: false,\n        error: \"Contract does not implement ERC 1155 or ERC 721.\"\n      };\n    }\n  }\n}\n\n/**\n * Handles auction listings\n * @public\n */\nclass MarketplaceAuction {\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Create Auction\n     *\n     * @remarks Create a new auction where people can bid on an asset.\n     *\n     * @example\n     * ```javascript\n     * // Data of the auction you want to create\n     * const auction = {\n     *   // address of the contract the asset you want to list is on\n     *   assetContractAddress: \"0x...\",\n     *   // token ID of the asset you want to list\n     *   tokenId: \"0\",\n     *  // when should the listing open up for offers\n     *   startTimestamp: new Date(),\n     *   // how long the listing will be open for\n     *   listingDurationInSeconds: 86400,\n     *   // how many of the asset you want to list\n     *   quantity: 1,\n     *   // address of the currency contract that will be used to pay for the listing\n     *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n     *   // how much people would have to bid to instantly buy the asset\n     *   buyoutPricePerToken: \"10\",\n     *   // the minimum bid that will be accepted for the token\n     *   reservePricePerToken: \"1.5\",\n     * }\n     *\n     * const tx = await contract.auction.createListing(auction);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const id = tx.id; // the id of the newly created listing\n     * ```\n     */\n    _defineProperty(this, \"createListing\", buildTransactionFunction(async listing => {\n      validateNewListingParam(listing);\n      const resolvedAssetAddress = await resolveAddress(listing.assetContractAddress);\n      const resolvedCurrencyAddress = await resolveAddress(listing.currencyContractAddress);\n      await handleTokenApproval(this.contractWrapper, this.getAddress(), resolvedAssetAddress, listing.tokenId, await this.contractWrapper.getSignerAddress());\n      const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), listing.buyoutPricePerToken, resolvedCurrencyAddress);\n      const normalizedReservePrice = await normalizePriceValue(this.contractWrapper.getProvider(), listing.reservePricePerToken, resolvedCurrencyAddress);\n      let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n      const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n      const blockTime = block.timestamp;\n      if (listingStartTime < blockTime) {\n        listingStartTime = blockTime;\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"createListing\",\n        args: [{\n          assetContract: resolvedAssetAddress,\n          tokenId: listing.tokenId,\n          buyoutPricePerToken: normalizedPricePerToken,\n          currencyToAccept: cleanCurrencyAddress(resolvedCurrencyAddress),\n          listingType: ListingType.Auction,\n          quantityToList: listing.quantity,\n          reservePricePerToken: normalizedReservePrice,\n          secondsUntilEndTime: listing.listingDurationInSeconds,\n          startTime: BigNumber.from(listingStartTime)\n        }],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n          return {\n            id: event[0].args.listingId,\n            receipt\n          };\n        }\n      });\n    }));\n    /**\n     * Create a batch of new auctions\n     *\n     * @remarks Create a batch of new auctions on the marketplace\n     *\n     * @example\n     * ```javascript\n     * const auctions = [...];\n     * const tx = await contract.auction.createListingsBatch(auctions);\n     * ```\n     */\n    _defineProperty(this, \"createListingsBatch\", buildTransactionFunction(async listings => {\n      const data = await Promise.all(listings.map(async listing => {\n        const tx = await this.createListing.prepare(listing);\n        return tx.encode();\n      }));\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [data],\n        parse: receipt => {\n          const events = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n          return events.map(event => {\n            return {\n              id: event.args.listingId,\n              receipt\n            };\n          });\n        }\n      });\n    }));\n    /**\n     * Buyout Auction\n     *\n     * @remarks Buy a specific direct listing from the marketplace.\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the asset you want to buy\n     * const listingId = 0;\n     *\n     * await contract.auction.buyoutListing(listingId);\n     * ```\n     */\n    _defineProperty(this, \"buyoutListing\", buildTransactionFunction(async listingId => {\n      const listing = await this.validateListing(BigNumber.from(listingId));\n      const currencyMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), listing.currencyContractAddress);\n      return this.makeBid.prepare(listingId, ethers.utils.formatUnits(listing.buyoutPrice, currencyMetadata.decimals));\n    }));\n    /**\n     * Bid On Auction\n     *\n     * @remarks Make a bid on an auction listing\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the asset you want to bid on\n     * const listingId = 0;\n     * // The price you are willing to bid for a single token of the listing\n     * const pricePerToken = 1;\n     *\n     * await contract.auction.makeBid(listingId, pricePerToken);\n     * ```\n     */\n    _defineProperty(this, \"makeBid\", buildTransactionFunction(async (listingId, pricePerToken) => {\n      const listing = await this.validateListing(BigNumber.from(listingId));\n      const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), pricePerToken, listing.currencyContractAddress);\n      if (normalizedPrice.eq(BigNumber.from(0))) {\n        throw new Error(\"Cannot make a bid with 0 value\");\n      }\n      const bidBuffer = await this.contractWrapper.readContract.bidBufferBps();\n      const winningBid = await this.getWinningBid(listingId);\n      if (winningBid) {\n        const isWinner = isWinningBid(winningBid.pricePerToken, normalizedPrice, bidBuffer);\n        invariant(isWinner, \"Bid price is too low based on the current winning bid and the bid buffer\");\n      } else {\n        const tokenPrice = normalizedPrice;\n        const reservePrice = BigNumber.from(listing.reservePrice);\n        invariant(tokenPrice.gte(reservePrice), \"Bid price is too low based on reserve price\");\n      }\n      const quantity = BigNumber.from(listing.quantity);\n      const value = normalizedPrice.mul(quantity);\n      const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n      await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"offer\",\n        args: [listingId, listing.quantity, listing.currencyContractAddress, normalizedPrice, ethers.constants.MaxUint256],\n        overrides\n      });\n    }));\n    /**\n     * Cancel Auction Listing\n     *\n     * @remarks Cancel an auction listing on the marketplace\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the auction listing you want to cancel\n     * const listingId = \"0\";\n     *\n     * await contract.auction.cancelListing(listingId);\n     * ```\n     */\n    _defineProperty(this, \"cancelListing\", buildTransactionFunction(async listingId => {\n      const listing = await this.validateListing(BigNumber.from(listingId));\n      const now = BigNumber.from(Math.floor(Date.now() / 1000));\n      const startTime = BigNumber.from(listing.startTimeInEpochSeconds);\n      const offers = await this.contractWrapper.readContract.winningBid(listingId);\n      if (now.gt(startTime) && offers.offeror !== constants.AddressZero) {\n        throw new AuctionAlreadyStartedError(listingId.toString());\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"closeAuction\",\n        args: [BigNumber.from(listingId), await this.contractWrapper.getSignerAddress()]\n      });\n    }));\n    /**\n     * Close the Auction for the buyer or the seller\n     *\n     * @remarks Closes the Auction and executes the sale for the buyer or the seller.\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the auction listing you want to close\n     * const listingId = \"0\";\n     * await contract.auction.closeListing(listingId);\n     * ```\n     *\n     * @param listingId - the auction  listing ud to close\n     * @param closeFor - optionally pass the auction creator address or winning bid offeror address to close the auction on their behalf\n     */\n    _defineProperty(this, \"closeListing\", buildTransactionFunction(async (listingId, closeFor) => {\n      if (!closeFor) {\n        closeFor = await this.contractWrapper.getSignerAddress();\n      }\n      const listing = await this.validateListing(BigNumber.from(listingId));\n      try {\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"closeAuction\",\n          args: [BigNumber.from(listingId), closeFor]\n        });\n      } catch (err) {\n        if (err.message.includes(\"cannot close auction before it has ended\")) {\n          throw new AuctionHasNotEndedError(listingId.toString(), listing.endTimeInEpochSeconds.toString());\n        } else {\n          throw err;\n        }\n      }\n    }));\n    /**\n     * Execute the Auction Sale\n     *\n     * @remarks Closes the Auction and executes the sale for both parties.\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the auction listing you want to close\n     * const listingId = \"0\";\n     * await contract.auction.executeSale(listingId);\n     * ```\n     *\n     * @param listingId - the auction  listing ud to close\n     */\n    _defineProperty(this, \"executeSale\", buildTransactionFunction(async listingId => {\n      const listing = await this.validateListing(BigNumber.from(listingId));\n      try {\n        const winningBid = await this.getWinningBid(listingId);\n        invariant(winningBid, \"No winning bid found\");\n        const closeForSeller = this.encoder.encode(\"closeAuction\", [listingId, listing.sellerAddress]);\n        const closeForBuyer = this.encoder.encode(\"closeAuction\", [listingId, winningBid.buyerAddress]);\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"multicall\",\n          args: [closeForSeller, closeForBuyer]\n        });\n      } catch (err) {\n        if (err.message.includes(\"cannot close auction before it has ended\")) {\n          throw new AuctionHasNotEndedError(listingId.toString(), listing.endTimeInEpochSeconds.toString());\n        } else {\n          throw err;\n        }\n      }\n    }));\n    /**\n     * Update an Auction listing with new metadata\n     * @param listing - the listing id to update\n     */\n    _defineProperty(this, \"updateListing\", buildTransactionFunction(async listing => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"updateListing\",\n        args: [listing.id, listing.quantity, listing.reservePrice, listing.buyoutPrice, listing.currencyContractAddress, listing.startTimeInEpochSeconds, listing.endTimeInEpochSeconds]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.encoder = new ContractEncoder(contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get an Auction listing by id\n   *\n   * @param listingId - the listing Id\n   * @returns the Auction listing object\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.readContract.listings(listingId);\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    if (listing.listingType !== ListingType.Auction) {\n      throw new WrongListingTypeError(this.getAddress(), listingId.toString(), \"Direct\", \"Auction\");\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get Highest Bid\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinningBid(listingId)\n   *   .then((offer) => console.log(offer))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinningBid(listingId) {\n    await this.validateListing(BigNumber.from(listingId));\n    const offers = await this.contractWrapper.readContract.winningBid(listingId);\n    if (offers.offeror === constants.AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(this.contractWrapper.getProvider(), BigNumber.from(listingId), offers);\n  }\n\n  /**\n   * Get Auction Winner\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinner(listingId)\n   *   .then((auctionWinner) => console.log(auctionWinner))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinner(listingId) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const offers = await this.contractWrapper.readContract.winningBid(listingId);\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const endTime = BigNumber.from(listing.endTimeInEpochSeconds);\n\n    // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner\n    if (now.gt(endTime) && offers.offeror !== constants.AddressZero) {\n      return offers.offeror;\n    }\n    // otherwise fall back to query filter things\n\n    // TODO this should be via indexer or direct contract call\n    const closedAuctions = await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.AuctionClosed());\n    const auction = closedAuctions.find(a => a.args.listingId.eq(BigNumber.from(listingId)));\n    if (!auction) {\n      throw new Error(`Could not find auction with listingId ${listingId} in closed auctions`);\n    }\n    return auction.args.winningBidder;\n  }\n  /**\n   * Get the buffer in basis points between offers\n   */\n  async getBidBufferBps() {\n    return this.contractWrapper.readContract.bidBufferBps();\n  }\n\n  /**\n   * returns the minimum bid a user can place to outbid the previous highest bid\n   * @param listingId - the listing id of the auction\n   */\n  async getMinimumNextBid(listingId) {\n    // we can fetch all of these at the same time using promise.all\n    const [currentBidBufferBps, winningBid, listing] = await Promise.all([this.getBidBufferBps(), this.getWinningBid(listingId), await this.validateListing(BigNumber.from(listingId))]);\n    const currentBidOrReservePrice = winningBid ?\n    // if there is a winning bid use the value of it\n    winningBid.currencyValue.value :\n    // if there is no winning bid use the reserve price\n    listing.reservePrice;\n    const minimumNextBid = currentBidOrReservePrice.add(\n    // the addition of the current bid and the buffer\n    // (have to divide by 10000 to get the fraction of the buffer (since it's in basis points))\n    currentBidOrReservePrice.mul(currentBidBufferBps).div(10000));\n\n    // it's more useful to return a currency value here\n    return fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currencyContractAddress, minimumNextBid);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the auction listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.buyoutPricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInEpochSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      reservePriceCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.reservePricePerToken),\n      reservePrice: BigNumber.from(listing.reservePricePerToken),\n      endTimeInEpochSeconds: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Auction\n    };\n  }\n}\n\nexport { ListingType as L, MarketplaceDirect as M, MarketplaceAuction as a };\n"],
  "mappings": "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",
  "names": ["ListingType"]
}
