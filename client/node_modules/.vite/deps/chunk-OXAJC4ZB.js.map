{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/erc-20-standard-7f7c4cb5.browser.esm.js"],
  "sourcesContent": ["import { _ as _defineProperty } from './QueryParams-7d9473b5.browser.esm.js';\nimport { cZ as buildTransactionFunction, an as Erc20 } from './contract-publisher-a7ca5177.browser.esm.js';\n\n/**\n * Standard ERC20 Token functions\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.transfer(walletAddress, amount);\n * ```\n * @public\n */\nclass StandardErc20 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"erc20\", void 0);\n    _defineProperty(this, \"_chainId\", void 0);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Transfer Tokens\n     *\n     * @remarks Transfer tokens from the connected wallet to another wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to send the tokens to\n     * const toAddress = \"0x...\";\n     * // The amount of tokens you want to send\n     * const amount = 0.1;\n     * await contract.transfer(toAddress, amount);\n     * ```\n     */\n    _defineProperty(this, \"transfer\", buildTransactionFunction(async (to, amount) => {\n      return this.erc20.transfer.prepare(to, amount);\n    }));\n    /**\n     * Transfer Tokens From Address\n     *\n     * @remarks Transfer tokens from one wallet to another\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet sending the tokens\n     * const fromAddress = \"{{wallet_address}}\";\n     * // Address of the wallet you want to send the tokens to\n     * const toAddress = \"0x...\";\n     * // The number of tokens you want to send\n     * const amount = 1.2\n     * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n     * await contract.transferFrom(fromAddress, toAddress, amount);\n     * ```\n     */\n    _defineProperty(this, \"transferFrom\", buildTransactionFunction(async (from, to, amount) => {\n      return this.erc20.transferFrom.prepare(from, to, amount);\n    }));\n    /**\n     * Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet to allow transfers from\n     * const spenderAddress = \"0x...\";\n     * // The number of tokens to give as allowance\n     * const amount = 100\n     * await contract.setAllowance(spenderAddress, amount);\n     * ```\n     */\n    _defineProperty(this, \"setAllowance\", buildTransactionFunction(async (spender, amount) => {\n      return this.erc20.setAllowance.prepare(spender, amount);\n    }));\n    /**\n     * Transfer Tokens To Many Wallets\n     *\n     * @remarks Mint tokens from the connected wallet to many wallets\n     *\n     * @example\n     * ```javascript\n     * // Data of the tokens you want to mint\n     * const data = [\n     *   {\n     *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n     *     amount: 100, // How many tokens to mint to specified address\n     *   },\n     *  {\n     *    toAddress: \"0x...\",\n     *    amount: 100,\n     *  }\n     * ]\n     *\n     * await contract.transferBatch(data);\n     * ```\n     */\n    _defineProperty(this, \"transferBatch\", buildTransactionFunction(async args => {\n      return this.erc20.transferBatch.prepare(args);\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc20 = new Erc20(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the token Metadata (name, symbol, etc...)\n   *\n   * @example\n   * ```javascript\n   * const token = await contract.get();\n   * ```\n   * @returns The token metadata\n   */\n  async get() {\n    return this.erc20.get();\n  }\n\n  /**\n   * Get Token Balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.balance();\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balance() {\n    return await this.erc20.balance();\n  }\n\n  /**\n   * Get Token Balance\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balanceOf(address) {\n    return this.erc20.balanceOf(address);\n  }\n\n  /**\n   * The total supply for this token\n   * @remarks Get how much supply has been minted\n   * @example\n   * ```javascript\n   * const balance = await contract.totalSupply();\n   * ```\n   */\n  async totalSupply() {\n    return await this.erc20.totalSupply();\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   * const allowance = await contract.allowance(spenderAddress);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowance(spender) {\n    return await this.erc20.allowance(spender);\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const owner = \"{{wallet_address}}\";\n   * // Address of the wallet to check token allowance\n   * const spender = \"0x...\";\n   * const allowance = await contract.allowanceOf(owner, spender);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowanceOf(owner, spender) {\n    return await this.erc20.allowanceOf(owner, spender);\n  }\n}\n\nexport { StandardErc20 as S };\n"],
  "mappings": ";;;;;;;;;;AAAA;AAaA,IAAM,gBAAN,MAAoB;AAAA,EAClB,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACd;AAAA,EACA,YAAY,iBAAiB,SAAS,SAAS;AAC7C,oBAAgB,MAAM,mBAAmB,MAAM;AAC/C,oBAAgB,MAAM,WAAW,MAAM;AACvC,oBAAgB,MAAM,SAAS,MAAM;AACrC,oBAAgB,MAAM,YAAY,MAAM;AAkBxC,oBAAgB,MAAM,YAAY,yBAAyB,OAAO,IAAI,WAAW;AAC/E,aAAO,KAAK,MAAM,SAAS,QAAQ,IAAI,MAAM;AAAA,IAC/C,CAAC,CAAC;AAkBF,oBAAgB,MAAM,gBAAgB,yBAAyB,OAAO,MAAM,IAAI,WAAW;AACzF,aAAO,KAAK,MAAM,aAAa,QAAQ,MAAM,IAAI,MAAM;AAAA,IACzD,CAAC,CAAC;AAaF,oBAAgB,MAAM,gBAAgB,yBAAyB,OAAO,SAAS,WAAW;AACxF,aAAO,KAAK,MAAM,aAAa,QAAQ,SAAS,MAAM;AAAA,IACxD,CAAC,CAAC;AAuBF,oBAAgB,MAAM,iBAAiB,yBAAyB,OAAM,SAAQ;AAC5E,aAAO,KAAK,MAAM,cAAc,QAAQ,IAAI;AAAA,IAC9C,CAAC,CAAC;AACF,SAAK,kBAAkB;AACvB,SAAK,UAAU;AACf,SAAK,QAAQ,IAAI,MAAM,KAAK,iBAAiB,KAAK,SAAS,OAAO;AAClE,SAAK,WAAW;AAAA,EAClB;AAAA,EAKA,iBAAiB,SAAS;AACxB,SAAK,gBAAgB,uBAAuB,OAAO;AAAA,EACrD;AAAA,EAKA,aAAa;AACX,WAAO,KAAK,gBAAgB,aAAa;AAAA,EAC3C;AAAA,EAeA,MAAM,MAAM;AACV,WAAO,KAAK,MAAM,IAAI;AAAA,EACxB;AAAA,EAcA,MAAM,UAAU;AACd,WAAO,MAAM,KAAK,MAAM,QAAQ;AAAA,EAClC;AAAA,EAgBA,MAAM,UAAU,SAAS;AACvB,WAAO,KAAK,MAAM,UAAU,OAAO;AAAA,EACrC;AAAA,EAUA,MAAM,cAAc;AAClB,WAAO,MAAM,KAAK,MAAM,YAAY;AAAA,EACtC;AAAA,EAgBA,MAAM,UAAU,SAAS;AACvB,WAAO,MAAM,KAAK,MAAM,UAAU,OAAO;AAAA,EAC3C;AAAA,EAkBA,MAAM,YAAY,OAAO,SAAS;AAChC,WAAO,MAAM,KAAK,MAAM,YAAY,OAAO,OAAO;AAAA,EACpD;AACF;",
  "names": []
}
