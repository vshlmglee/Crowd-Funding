{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/edition-ef56fe14.browser.esm.js"],
  "sourcesContent": ["import { _ as _defineProperty } from './QueryParams-7d9473b5.browser.esm.js';\nimport { d6 as ContractWrapper, cZ as buildTransactionFunction, e as AbiSchema, ag as ContractMetadata, dg as TokenErc1155ContractSchema, a$ as ContractAppURI, ah as ContractRoles, ai as ContractRoyalty, aj as ContractPrimarySale, af as ContractEncoder, aP as GasCostEstimator, aQ as ContractEvents, aS as ContractPlatformFee, aR as ContractInterceptor, aL as Erc1155SignatureMintable, aU as ContractOwner, bA as getRoleHash, aV as Transaction } from './contract-publisher-a7ca5177.browser.esm.js';\nimport { S as StandardErc1155 } from './erc-1155-standard-75ea6964.browser.esm.js';\nimport { constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/storage';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport 'uuid';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/chains';\nimport 'ethers/lib/utils';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport 'ethers/lib/utils.js';\n\n/**\n * Create a collection of NFTs that lets you mint multiple copies of each NFT.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"edition\");\n * ```\n *\n * @public\n */\nclass Edition extends StandardErc1155 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"app\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"signature\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Mint NFT for the connected wallet\n     *\n     * @remarks See {@link Edition.mintTo}\n     */\n    _defineProperty(this, \"mint\", buildTransactionFunction(async metadataWithSupply => {\n      return this.erc1155.mint.prepare(metadataWithSupply);\n    }));\n    /**\n     * Mint an NFT with a limited supply\n     *\n     * @remarks Mint an NFT with a limited supply to a specified wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const toAddress = \"{{wallet_address}}\"\n     *\n     * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n     * const metadata = {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }\n     *\n     * const metadataWithSupply = {\n     *   metadata,\n     *   supply: 1000, // The number of this NFT you want to mint\n     * }\n     *\n     * const tx = await contract.mintTo(toAddress, metadataWithSupply);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const tokenId = tx.id; // the id of the NFT minted\n     * const nft = await tx.data(); // (optional) fetch details of minted NFT\n     * ```\n     */\n    _defineProperty(this, \"mintTo\", buildTransactionFunction(async (to, metadataWithSupply) => {\n      return this.erc1155.mintTo.prepare(to, metadataWithSupply);\n    }));\n    /**\n     * Increase the supply of an existing NFT and mint it to the connected wallet\n     *\n     * @param tokenId - the token id of the NFT to increase supply of\n     * @param additionalSupply - the additional amount to mint\n     */\n    _defineProperty(this, \"mintAdditionalSupply\", buildTransactionFunction(async (tokenId, additionalSupply) => {\n      return this.erc1155.mintAdditionalSupply.prepare(tokenId, additionalSupply);\n    }));\n    /**\n     * Increase the supply of an existing NFT and mint it to a given wallet address\n     *\n     * @param to - the address to mint to\n     * @param tokenId - the token id of the NFT to increase supply of\n     * @param additionalSupply - the additional amount to mint\n     */\n    _defineProperty(this, \"mintAdditionalSupplyTo\", buildTransactionFunction(async (to, tokenId, additionalSupply) => {\n      return this.erc1155.mintAdditionalSupplyTo.prepare(to, tokenId, additionalSupply);\n    }));\n    /**\n     * Mint Many NFTs for the connected wallet\n     *\n     * @remarks See {@link Edition.mintBatchTo}\n     */\n    _defineProperty(this, \"mintBatch\", buildTransactionFunction(async metadatas => {\n      return this.erc1155.mintBatch.prepare(metadatas);\n    }));\n    /**\n     * Mint Many NFTs with limited supplies\n     *\n     * @remarks Mint many different NFTs with limited supplies to a specified wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const toAddress = \"{{wallet_address}}\"\n     *\n     * // Custom metadata and supplies of your NFTs\n     * const metadataWithSupply = [{\n     *   supply: 50, // The number of this NFT you want to mint\n     *   metadata: {\n     *     name: \"Cool NFT #1\",\n     *     description: \"This is a cool NFT\",\n     *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     *   },\n     * }, {\n     *   supply: 100,\n     *   metadata: {\n     *     name: \"Cool NFT #2\",\n     *     description: \"This is a cool NFT\",\n     *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     *   },\n     * }];\n     *\n     * const tx = await contract.mintBatchTo(toAddress, metadataWithSupply);\n     * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n     * const firstTokenId = tx[0].id; // token id of the first minted NFT\n     * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n     * ```\n     */\n    _defineProperty(this, \"mintBatchTo\", buildTransactionFunction(async (to, metadataWithSupply) => {\n      return this.erc1155.mintBatchTo.prepare(to, metadataWithSupply);\n    }));\n    /**\n     * Burn a specified amount of a NFT\n     *\n     * @param tokenId - the token Id to burn\n     * @param amount - amount to burn\n     *\n     * @example\n     * ```javascript\n     * const result = await contract.burnTokens(tokenId, amount);\n     * ```\n     */\n    _defineProperty(this, \"burn\", buildTransactionFunction(async (tokenId, amount) => {\n      return this.erc1155.burn.prepare(tokenId, amount);\n    }));\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc1155ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Edition.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc1155SignatureMintable(this.contractWrapper, this.storage, this.roles);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadataWithSupply - The metadata of the NFT you want to mint\n   *\n   * @deprecated `contract.mint.prepare(...args)`\n   */\n  async getMintTransaction(receiver, metadataWithSupply) {\n    return this.erc1155.getMintTransaction(receiver, metadataWithSupply);\n  }\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n_defineProperty(Edition, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\nexport { Edition };\n"],
  "mappings": "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",
  "names": ["import_utils"]
}
